
Robomaster_New_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005728  08005728  00015728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005760  08005760  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005760  08005760  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005760  08005760  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005764  08005764  00015764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000010  08005774  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08005774  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ad1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221a  00000000  00000000  00030b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00032d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  00033aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b474  00000000  00000000  00034760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b15  00000000  00000000  0004fbd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a282f  00000000  00000000  000606e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102f18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f8  00000000  00000000  00102f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005710 	.word	0x08005710

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005710 	.word	0x08005710

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <Stop>:
{
	htim17.Instance->CCR1 = 0;
}

void Stop()
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
	htim1.Instance->CCR1 = 0;
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <Stop+0x30>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2200      	movs	r2, #0
 800054a:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = 0;
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <Stop+0x30>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2200      	movs	r2, #0
 8000552:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR3 = 0;
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <Stop+0x30>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2200      	movs	r2, #0
 800055a:	63da      	str	r2, [r3, #60]	; 0x3c
	htim1.Instance->CCR4 = 0;
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <Stop+0x30>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2200      	movs	r2, #0
 8000562:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	200001bc 	.word	0x200001bc

08000574 <moveForward>:

void moveForward(int16_t speed)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	80fb      	strh	r3, [r7, #6]
	htim1.Instance->CCR1 = speed;
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <moveForward+0x40>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000586:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = speed;
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <moveForward+0x40>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000590:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR3 = speed;
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <moveForward+0x40>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800059a:	63da      	str	r2, [r3, #60]	; 0x3c
	htim1.Instance->CCR4 = speed;
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <moveForward+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80005a4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	200001bc 	.word	0x200001bc

080005b8 <rotateLeft>:
{
	//
}

void rotateLeft(uint16_t speed)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
	htim1.Instance->CCR1 = 0;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <rotateLeft+0x38>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2200      	movs	r2, #0
 80005c8:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = 0;
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <rotateLeft+0x38>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2200      	movs	r2, #0
 80005d0:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR3 = (uint32_t)speed;
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <rotateLeft+0x38>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	88fa      	ldrh	r2, [r7, #6]
 80005d8:	63da      	str	r2, [r3, #60]	; 0x3c
	htim1.Instance->CCR4 = (uint32_t)speed;
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <rotateLeft+0x38>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	88fa      	ldrh	r2, [r7, #6]
 80005e0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	200001bc 	.word	0x200001bc

080005f4 <rotateRight>:

void rotateRight(uint16_t speed)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
	htim1.Instance->CCR1 = (uint32_t)speed;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <rotateRight+0x38>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	88fa      	ldrh	r2, [r7, #6]
 8000604:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = (uint32_t)speed;
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <rotateRight+0x38>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	88fa      	ldrh	r2, [r7, #6]
 800060c:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR3 = 0;
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <rotateRight+0x38>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	63da      	str	r2, [r3, #60]	; 0x3c
	htim1.Instance->CCR4 = 0;
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <rotateRight+0x38>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	200001bc 	.word	0x200001bc

08000630 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_9)
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000640:	d120      	bne.n	8000684 <HAL_GPIO_EXTI_Callback+0x54>
	{
		us1_echo = __HAL_TIM_GET_COUNTER(&htim2);
 8000642:	4b59      	ldr	r3, [pc, #356]	; (80007a8 <HAL_GPIO_EXTI_Callback+0x178>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000648:	4a58      	ldr	r2, [pc, #352]	; (80007ac <HAL_GPIO_EXTI_Callback+0x17c>)
 800064a:	6013      	str	r3, [r2, #0]
		distance = (float)((us1_echo - us1_start)) * 330 * 2 / 100000;
 800064c:	4b57      	ldr	r3, [pc, #348]	; (80007ac <HAL_GPIO_EXTI_Callback+0x17c>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b57      	ldr	r3, [pc, #348]	; (80007b0 <HAL_GPIO_EXTI_Callback+0x180>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	ee07 3a90 	vmov	s15, r3
 800065a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800065e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80007b4 <HAL_GPIO_EXTI_Callback+0x184>
 8000662:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000666:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800066a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80007b8 <HAL_GPIO_EXTI_Callback+0x188>
 800066e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000672:	ee16 0a90 	vmov	r0, s13
 8000676:	f7ff ff0b 	bl	8000490 <__aeabi_f2d>
 800067a:	4602      	mov	r2, r0
 800067c:	460b      	mov	r3, r1
 800067e:	494f      	ldr	r1, [pc, #316]	; (80007bc <HAL_GPIO_EXTI_Callback+0x18c>)
 8000680:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(GPIO_Pin == GPIO_PIN_12)
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800068a:	d120      	bne.n	80006ce <HAL_GPIO_EXTI_Callback+0x9e>
	{
		us2_echo = __HAL_TIM_GET_COUNTER(&htim2);
 800068c:	4b46      	ldr	r3, [pc, #280]	; (80007a8 <HAL_GPIO_EXTI_Callback+0x178>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000692:	4a4b      	ldr	r2, [pc, #300]	; (80007c0 <HAL_GPIO_EXTI_Callback+0x190>)
 8000694:	6013      	str	r3, [r2, #0]
		distance = (float)((us2_echo - us2_start)) * 330 * 2 / 100000;
 8000696:	4b4a      	ldr	r3, [pc, #296]	; (80007c0 <HAL_GPIO_EXTI_Callback+0x190>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	4b4a      	ldr	r3, [pc, #296]	; (80007c4 <HAL_GPIO_EXTI_Callback+0x194>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	ee07 3a90 	vmov	s15, r3
 80006a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006a8:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80007b4 <HAL_GPIO_EXTI_Callback+0x184>
 80006ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80006b4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80007b8 <HAL_GPIO_EXTI_Callback+0x188>
 80006b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80006bc:	ee16 0a90 	vmov	r0, s13
 80006c0:	f7ff fee6 	bl	8000490 <__aeabi_f2d>
 80006c4:	4602      	mov	r2, r0
 80006c6:	460b      	mov	r3, r1
 80006c8:	493c      	ldr	r1, [pc, #240]	; (80007bc <HAL_GPIO_EXTI_Callback+0x18c>)
 80006ca:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(GPIO_Pin == GPIO_PIN_4)
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	2b10      	cmp	r3, #16
 80006d2:	d120      	bne.n	8000716 <HAL_GPIO_EXTI_Callback+0xe6>
	{
		us3_echo = __HAL_TIM_GET_COUNTER(&htim2);
 80006d4:	4b34      	ldr	r3, [pc, #208]	; (80007a8 <HAL_GPIO_EXTI_Callback+0x178>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006da:	4a3b      	ldr	r2, [pc, #236]	; (80007c8 <HAL_GPIO_EXTI_Callback+0x198>)
 80006dc:	6013      	str	r3, [r2, #0]
		distance = (float)((us3_echo - us3_start)) * 330 * 2 / 100000;
 80006de:	4b3a      	ldr	r3, [pc, #232]	; (80007c8 <HAL_GPIO_EXTI_Callback+0x198>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	4b3a      	ldr	r3, [pc, #232]	; (80007cc <HAL_GPIO_EXTI_Callback+0x19c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	ee07 3a90 	vmov	s15, r3
 80006ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006f0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80007b4 <HAL_GPIO_EXTI_Callback+0x184>
 80006f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80006fc:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80007b8 <HAL_GPIO_EXTI_Callback+0x188>
 8000700:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000704:	ee16 0a90 	vmov	r0, s13
 8000708:	f7ff fec2 	bl	8000490 <__aeabi_f2d>
 800070c:	4602      	mov	r2, r0
 800070e:	460b      	mov	r3, r1
 8000710:	492a      	ldr	r1, [pc, #168]	; (80007bc <HAL_GPIO_EXTI_Callback+0x18c>)
 8000712:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(GPIO_Pin == GPIO_PIN_8)
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800071c:	d120      	bne.n	8000760 <HAL_GPIO_EXTI_Callback+0x130>
	{
		us1_echo = __HAL_TIM_GET_COUNTER(&htim2);
 800071e:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <HAL_GPIO_EXTI_Callback+0x178>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <HAL_GPIO_EXTI_Callback+0x17c>)
 8000726:	6013      	str	r3, [r2, #0]
		distance = (float)((us4_echo - us4_start)) * 330 * 2 / 100000;
 8000728:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	ee07 3a90 	vmov	s15, r3
 8000736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800073a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80007b4 <HAL_GPIO_EXTI_Callback+0x184>
 800073e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000742:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000746:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80007b8 <HAL_GPIO_EXTI_Callback+0x188>
 800074a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800074e:	ee16 0a90 	vmov	r0, s13
 8000752:	f7ff fe9d 	bl	8000490 <__aeabi_f2d>
 8000756:	4602      	mov	r2, r0
 8000758:	460b      	mov	r3, r1
 800075a:	4918      	ldr	r1, [pc, #96]	; (80007bc <HAL_GPIO_EXTI_Callback+0x18c>)
 800075c:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(GPIO_Pin == GPIO_PIN_13 && ButtonControl == 0)
 8000760:	88fb      	ldrh	r3, [r7, #6]
 8000762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000766:	d10e      	bne.n	8000786 <HAL_GPIO_EXTI_Callback+0x156>
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d10a      	bne.n	8000786 <HAL_GPIO_EXTI_Callback+0x156>
	{
//		brushStart();
		moveForward(10000);
 8000770:	f242 7010 	movw	r0, #10000	; 0x2710
 8000774:	f7ff fefe 	bl	8000574 <moveForward>
		//rotateRight();
		ButtonControl+=1;
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000782:	801a      	strh	r2, [r3, #0]
	{
//		brushStop();
		Stop();
		ButtonControl = 0;
	}
}
 8000784:	e00c      	b.n	80007a0 <HAL_GPIO_EXTI_Callback+0x170>
	else if(GPIO_Pin == GPIO_PIN_13 && ButtonControl!=0)
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800078c:	d108      	bne.n	80007a0 <HAL_GPIO_EXTI_Callback+0x170>
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d004      	beq.n	80007a0 <HAL_GPIO_EXTI_Callback+0x170>
		Stop();
 8000796:	f7ff fed3 	bl	8000540 <Stop>
		ButtonControl = 0;
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800079c:	2200      	movs	r2, #0
 800079e:	801a      	strh	r2, [r3, #0]
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000210 	.word	0x20000210
 80007ac:	2000003c 	.word	0x2000003c
 80007b0:	20000038 	.word	0x20000038
 80007b4:	43a50000 	.word	0x43a50000
 80007b8:	47c35000 	.word	0x47c35000
 80007bc:	20000098 	.word	0x20000098
 80007c0:	20000090 	.word	0x20000090
 80007c4:	200000a4 	.word	0x200000a4
 80007c8:	2000025c 	.word	0x2000025c
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	20000208 	.word	0x20000208
 80007d4:	2000020c 	.word	0x2000020c
 80007d8:	2000002c 	.word	0x2000002c

080007dc <move>:
int16_t vertical, horizontal;

void move()
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	horizontal = remote_cmd.left_x;
 80007e0:	4b2e      	ldr	r3, [pc, #184]	; (800089c <move+0xc0>)
 80007e2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <move+0xc4>)
 80007e8:	801a      	strh	r2, [r3, #0]
	vertical = remote_cmd.left_y;
 80007ea:	4b2c      	ldr	r3, [pc, #176]	; (800089c <move+0xc0>)
 80007ec:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80007f0:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <move+0xc8>)
 80007f2:	801a      	strh	r2, [r3, #0]
	if (vertical > 10)
 80007f4:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <move+0xc8>)
 80007f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007fa:	2b0a      	cmp	r3, #10
 80007fc:	dd11      	ble.n	8000822 <move+0x46>
		moveForward(vertical*17500/660);
 80007fe:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <move+0xc8>)
 8000800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000804:	461a      	mov	r2, r3
 8000806:	f244 435c 	movw	r3, #17500	; 0x445c
 800080a:	fb03 f302 	mul.w	r3, r3, r2
 800080e:	4a26      	ldr	r2, [pc, #152]	; (80008a8 <move+0xcc>)
 8000810:	fb82 1203 	smull	r1, r2, r2, r3
 8000814:	1212      	asrs	r2, r2, #8
 8000816:	17db      	asrs	r3, r3, #31
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	b21b      	sxth	r3, r3
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fea9 	bl	8000574 <moveForward>
	if (horizontal < -10)
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <move+0xc4>)
 8000824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000828:	f113 0f0a 	cmn.w	r3, #10
 800082c:	da10      	bge.n	8000850 <move+0x74>
		rotateLeft(horizontal*(-1)*10000/660);
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <move+0xc4>)
 8000830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000834:	461a      	mov	r2, r3
 8000836:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <move+0xd0>)
 8000838:	fb03 f302 	mul.w	r3, r3, r2
 800083c:	4a1a      	ldr	r2, [pc, #104]	; (80008a8 <move+0xcc>)
 800083e:	fb82 1203 	smull	r1, r2, r2, r3
 8000842:	1212      	asrs	r2, r2, #8
 8000844:	17db      	asrs	r3, r3, #31
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff feb4 	bl	80005b8 <rotateLeft>
	if (horizontal > 10)
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <move+0xc4>)
 8000852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000856:	2b0a      	cmp	r3, #10
 8000858:	dd11      	ble.n	800087e <move+0xa2>
		rotateRight(horizontal*10000/660);
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <move+0xc4>)
 800085c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000860:	461a      	mov	r2, r3
 8000862:	f242 7310 	movw	r3, #10000	; 0x2710
 8000866:	fb03 f302 	mul.w	r3, r3, r2
 800086a:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <move+0xcc>)
 800086c:	fb82 1203 	smull	r1, r2, r2, r3
 8000870:	1212      	asrs	r2, r2, #8
 8000872:	17db      	asrs	r3, r3, #31
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	b29b      	uxth	r3, r3
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff febb 	bl	80005f4 <rotateRight>
	if (horizontal == 0 && vertical <= 0) Stop();
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <move+0xc4>)
 8000880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d106      	bne.n	8000896 <move+0xba>
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <move+0xc8>)
 800088a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800088e:	2b00      	cmp	r3, #0
 8000890:	dc01      	bgt.n	8000896 <move+0xba>
 8000892:	f7ff fe55 	bl	8000540 <Stop>
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200002e4 	.word	0x200002e4
 80008a0:	2000002e 	.word	0x2000002e
 80008a4:	20000030 	.word	0x20000030
 80008a8:	634c0635 	.word	0x634c0635
 80008ac:	ffffd8f0 	.word	0xffffd8f0

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b4:	f000 ff94 	bl	80017e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b8:	f000 f892 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008bc:	f000 fb22 	bl	8000f04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008c0:	f000 fad2 	bl	8000e68 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80008c4:	f000 f8ec 	bl	8000aa0 <MX_TIM1_Init>
  MX_TIM6_Init();
 80008c8:	f000 f9ec 	bl	8000ca4 <MX_TIM6_Init>
  MX_TIM17_Init();
 80008cc:	f000 fa20 	bl	8000d10 <MX_TIM17_Init>
  MX_DMA_Init();
 80008d0:	f000 fafa 	bl	8000ec8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80008d4:	f000 fa96 	bl	8000e04 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80008d8:	f000 f996 	bl	8000c08 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008dc:	2100      	movs	r1, #0
 80008de:	4838      	ldr	r0, [pc, #224]	; (80009c0 <main+0x110>)
 80008e0:	f003 f896 	bl	8003a10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80008e4:	2104      	movs	r1, #4
 80008e6:	4836      	ldr	r0, [pc, #216]	; (80009c0 <main+0x110>)
 80008e8:	f003 f892 	bl	8003a10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80008ec:	2108      	movs	r1, #8
 80008ee:	4834      	ldr	r0, [pc, #208]	; (80009c0 <main+0x110>)
 80008f0:	f003 f88e 	bl	8003a10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80008f4:	210c      	movs	r1, #12
 80008f6:	4832      	ldr	r0, [pc, #200]	; (80009c0 <main+0x110>)
 80008f8:	f003 f88a 	bl	8003a10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80008fc:	2100      	movs	r1, #0
 80008fe:	4831      	ldr	r0, [pc, #196]	; (80009c4 <main+0x114>)
 8000900:	f003 f886 	bl	8003a10 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  rc_start(&huart1);
 8000904:	4830      	ldr	r0, [pc, #192]	; (80009c8 <main+0x118>)
 8000906:	f000 fc8f 	bl	8001228 <rc_start>
  HAL_TIM_Base_Start(&htim2);
 800090a:	4830      	ldr	r0, [pc, #192]	; (80009cc <main+0x11c>)
 800090c:	f002 ffdc 	bl	80038c8 <HAL_TIM_Base_Start>
//  uint16_t timer_counter;
//  uint16_t compare_register;
  while (1)
  {
	  //Ultrasonic 1
	  us1_start = __HAL_TIM_GET_COUNTER(&htim2);
 8000910:	4b2e      	ldr	r3, [pc, #184]	; (80009cc <main+0x11c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000916:	4a2e      	ldr	r2, [pc, #184]	; (80009d0 <main+0x120>)
 8000918:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000924:	f001 fc78 	bl	8002218 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000928:	2001      	movs	r0, #1
 800092a:	f000 ffbf 	bl	80018ac <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f001 fc6e 	bl	8002218 <HAL_GPIO_WritePin>


	  //Ultrasonic 2
	  us2_start = __HAL_TIM_GET_COUNTER(&htim2);
 800093c:	4b23      	ldr	r3, [pc, #140]	; (80009cc <main+0x11c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000942:	4a24      	ldr	r2, [pc, #144]	; (80009d4 <main+0x124>)
 8000944:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f001 fc62 	bl	8002218 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000954:	2001      	movs	r0, #1
 8000956:	f000 ffa9 	bl	80018ac <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000964:	f001 fc58 	bl	8002218 <HAL_GPIO_WritePin>

	  //Ultrasonic 3
	  us3_start = __HAL_TIM_GET_COUNTER(&htim2);
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <main+0x11c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096e:	4a1a      	ldr	r2, [pc, #104]	; (80009d8 <main+0x128>)
 8000970:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	2120      	movs	r1, #32
 8000976:	4819      	ldr	r0, [pc, #100]	; (80009dc <main+0x12c>)
 8000978:	f001 fc4e 	bl	8002218 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 800097c:	2001      	movs	r0, #1
 800097e:	f000 ff95 	bl	80018ac <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2120      	movs	r1, #32
 8000986:	4815      	ldr	r0, [pc, #84]	; (80009dc <main+0x12c>)
 8000988:	f001 fc46 	bl	8002218 <HAL_GPIO_WritePin>

	  //Ultrasonic 4
	  us2_start = __HAL_TIM_GET_COUNTER(&htim2);
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <main+0x11c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <main+0x124>)
 8000994:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 7100 	mov.w	r1, #512	; 0x200
 800099c:	480f      	ldr	r0, [pc, #60]	; (80009dc <main+0x12c>)
 800099e:	f001 fc3b 	bl	8002218 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 80009a2:	2001      	movs	r0, #1
 80009a4:	f000 ff82 	bl	80018ac <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ae:	480b      	ldr	r0, [pc, #44]	; (80009dc <main+0x12c>)
 80009b0:	f001 fc32 	bl	8002218 <HAL_GPIO_WritePin>
//	  moveBackward();
//	  rotateLeft();
//	  rotateRight();
	  //The rotary blade that moves
	  //button = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
	  move();
 80009b4:	f7ff ff12 	bl	80007dc <move>
//	  htim17.Instance->CCR1 = 7000;
	  HAL_Delay(100);
 80009b8:	2064      	movs	r0, #100	; 0x64
 80009ba:	f000 ff77 	bl	80018ac <HAL_Delay>
	  us1_start = __HAL_TIM_GET_COUNTER(&htim2);
 80009be:	e7a7      	b.n	8000910 <main+0x60>
 80009c0:	200001bc 	.word	0x200001bc
 80009c4:	20000040 	.word	0x20000040
 80009c8:	200000ec 	.word	0x200000ec
 80009cc:	20000210 	.word	0x20000210
 80009d0:	20000038 	.word	0x20000038
 80009d4:	200000a4 	.word	0x200000a4
 80009d8:	2000008c 	.word	0x2000008c
 80009dc:	48000400 	.word	0x48000400

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b09c      	sub	sp, #112	; 0x70
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009ea:	2228      	movs	r2, #40	; 0x28
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f004 fe86 	bl	8005700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a04:	463b      	mov	r3, r7
 8000a06:	2234      	movs	r2, #52	; 0x34
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f004 fe78 	bl	8005700 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a10:	2301      	movs	r3, #1
 8000a12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a18:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a22:	2302      	movs	r3, #2
 8000a24:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a2a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a2c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a30:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a36:	4618      	mov	r0, r3
 8000a38:	f001 fc1e 	bl	8002278 <HAL_RCC_OscConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a42:	f000 fb13 	bl	800106c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a46:	230f      	movs	r3, #15
 8000a48:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a60:	2102      	movs	r1, #2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 fb10 	bl	8003088 <HAL_RCC_ClockConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a6e:	f000 fafd 	bl	800106c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <SystemClock_Config+0xbc>)
 8000a74:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a82:	463b      	mov	r3, r7
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 fd35 	bl	80034f4 <HAL_RCCEx_PeriphCLKConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a90:	f000 faec 	bl	800106c <Error_Handler>
  }
}
 8000a94:	bf00      	nop
 8000a96:	3770      	adds	r7, #112	; 0x70
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	00101001 	.word	0x00101001

08000aa0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b096      	sub	sp, #88	; 0x58
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]
 8000ac2:	615a      	str	r2, [r3, #20]
 8000ac4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	222c      	movs	r2, #44	; 0x2c
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f004 fe17 	bl	8005700 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ad2:	4b4b      	ldr	r3, [pc, #300]	; (8000c00 <MX_TIM1_Init+0x160>)
 8000ad4:	4a4b      	ldr	r2, [pc, #300]	; (8000c04 <MX_TIM1_Init+0x164>)
 8000ad6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000ad8:	4b49      	ldr	r3, [pc, #292]	; (8000c00 <MX_TIM1_Init+0x160>)
 8000ada:	2247      	movs	r2, #71	; 0x47
 8000adc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ade:	4b48      	ldr	r3, [pc, #288]	; (8000c00 <MX_TIM1_Init+0x160>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000ae4:	4b46      	ldr	r3, [pc, #280]	; (8000c00 <MX_TIM1_Init+0x160>)
 8000ae6:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000aea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aec:	4b44      	ldr	r3, [pc, #272]	; (8000c00 <MX_TIM1_Init+0x160>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000af2:	4b43      	ldr	r3, [pc, #268]	; (8000c00 <MX_TIM1_Init+0x160>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af8:	4b41      	ldr	r3, [pc, #260]	; (8000c00 <MX_TIM1_Init+0x160>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000afe:	4840      	ldr	r0, [pc, #256]	; (8000c00 <MX_TIM1_Init+0x160>)
 8000b00:	f002 ff2e 	bl	8003960 <HAL_TIM_PWM_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b0a:	f000 faaf 	bl	800106c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b12:	2300      	movs	r3, #0
 8000b14:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4837      	ldr	r0, [pc, #220]	; (8000c00 <MX_TIM1_Init+0x160>)
 8000b22:	f003 fe0d 	bl	8004740 <HAL_TIMEx_MasterConfigSynchronization>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b2c:	f000 fa9e 	bl	800106c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b30:	2360      	movs	r3, #96	; 0x60
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b50:	2200      	movs	r2, #0
 8000b52:	4619      	mov	r1, r3
 8000b54:	482a      	ldr	r0, [pc, #168]	; (8000c00 <MX_TIM1_Init+0x160>)
 8000b56:	f003 f841 	bl	8003bdc <HAL_TIM_PWM_ConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b60:	f000 fa84 	bl	800106c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b68:	2204      	movs	r2, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4824      	ldr	r0, [pc, #144]	; (8000c00 <MX_TIM1_Init+0x160>)
 8000b6e:	f003 f835 	bl	8003bdc <HAL_TIM_PWM_ConfigChannel>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000b78:	f000 fa78 	bl	800106c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b80:	2208      	movs	r2, #8
 8000b82:	4619      	mov	r1, r3
 8000b84:	481e      	ldr	r0, [pc, #120]	; (8000c00 <MX_TIM1_Init+0x160>)
 8000b86:	f003 f829 	bl	8003bdc <HAL_TIM_PWM_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000b90:	f000 fa6c 	bl	800106c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b98:	220c      	movs	r2, #12
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4818      	ldr	r0, [pc, #96]	; (8000c00 <MX_TIM1_Init+0x160>)
 8000b9e:	f003 f81d 	bl	8003bdc <HAL_TIM_PWM_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000ba8:	f000 fa60 	bl	800106c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4807      	ldr	r0, [pc, #28]	; (8000c00 <MX_TIM1_Init+0x160>)
 8000be2:	f003 fe13 	bl	800480c <HAL_TIMEx_ConfigBreakDeadTime>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000bec:	f000 fa3e 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bf0:	4803      	ldr	r0, [pc, #12]	; (8000c00 <MX_TIM1_Init+0x160>)
 8000bf2:	f000 fc3b 	bl	800146c <HAL_TIM_MspPostInit>

}
 8000bf6:	bf00      	nop
 8000bf8:	3758      	adds	r7, #88	; 0x58
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200001bc 	.word	0x200001bc
 8000c04:	40012c00 	.word	0x40012c00

08000c08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c26:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c30:	2247      	movs	r2, #71	; 0x47
 8000c32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c4e:	4814      	ldr	r0, [pc, #80]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c50:	f002 fde2 	bl	8003818 <HAL_TIM_Base_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c5a:	f000 fa07 	bl	800106c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c6c:	f003 f8ca 	bl	8003e04 <HAL_TIM_ConfigClockSource>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c76:	f000 f9f9 	bl	800106c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	4619      	mov	r1, r3
 8000c86:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c88:	f003 fd5a 	bl	8004740 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c92:	f000 f9eb 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	3720      	adds	r7, #32
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000210 	.word	0x20000210

08000ca4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_TIM6_Init+0x64>)
 8000cb6:	4a15      	ldr	r2, [pc, #84]	; (8000d0c <MX_TIM6_Init+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <MX_TIM6_Init+0x64>)
 8000cbc:	2247      	movs	r2, #71	; 0x47
 8000cbe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_TIM6_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <MX_TIM6_Init+0x64>)
 8000cc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ccc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_TIM6_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cd4:	480c      	ldr	r0, [pc, #48]	; (8000d08 <MX_TIM6_Init+0x64>)
 8000cd6:	f002 fd9f 	bl	8003818 <HAL_TIM_Base_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ce0:	f000 f9c4 	bl	800106c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_TIM6_Init+0x64>)
 8000cf2:	f003 fd25 	bl	8004740 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000cfc:	f000 f9b6 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000170 	.word	0x20000170
 8000d0c:	40001000 	.word	0x40001000

08000d10 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b092      	sub	sp, #72	; 0x48
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]
 8000d26:	615a      	str	r2, [r3, #20]
 8000d28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	222c      	movs	r2, #44	; 0x2c
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f004 fce5 	bl	8005700 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d36:	4b31      	ldr	r3, [pc, #196]	; (8000dfc <MX_TIM17_Init+0xec>)
 8000d38:	4a31      	ldr	r2, [pc, #196]	; (8000e00 <MX_TIM17_Init+0xf0>)
 8000d3a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 72-1;
 8000d3c:	4b2f      	ldr	r3, [pc, #188]	; (8000dfc <MX_TIM17_Init+0xec>)
 8000d3e:	2247      	movs	r2, #71	; 0x47
 8000d40:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d42:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <MX_TIM17_Init+0xec>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000;
 8000d48:	4b2c      	ldr	r3, [pc, #176]	; (8000dfc <MX_TIM17_Init+0xec>)
 8000d4a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000d4e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d50:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <MX_TIM17_Init+0xec>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d56:	4b29      	ldr	r3, [pc, #164]	; (8000dfc <MX_TIM17_Init+0xec>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5c:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <MX_TIM17_Init+0xec>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d62:	4826      	ldr	r0, [pc, #152]	; (8000dfc <MX_TIM17_Init+0xec>)
 8000d64:	f002 fd58 	bl	8003818 <HAL_TIM_Base_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000d6e:	f000 f97d 	bl	800106c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000d72:	4822      	ldr	r0, [pc, #136]	; (8000dfc <MX_TIM17_Init+0xec>)
 8000d74:	f002 fdf4 	bl	8003960 <HAL_TIM_PWM_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000d7e:	f000 f975 	bl	800106c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d82:	2360      	movs	r3, #96	; 0x60
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da2:	2200      	movs	r2, #0
 8000da4:	4619      	mov	r1, r3
 8000da6:	4815      	ldr	r0, [pc, #84]	; (8000dfc <MX_TIM17_Init+0xec>)
 8000da8:	f002 ff18 	bl	8003bdc <HAL_TIM_PWM_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000db2:	f000 f95b 	bl	800106c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4807      	ldr	r0, [pc, #28]	; (8000dfc <MX_TIM17_Init+0xec>)
 8000dde:	f003 fd15 	bl	800480c <HAL_TIMEx_ConfigBreakDeadTime>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000de8:	f000 f940 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <MX_TIM17_Init+0xec>)
 8000dee:	f000 fb3d 	bl	800146c <HAL_TIM_MspPostInit>

}
 8000df2:	bf00      	nop
 8000df4:	3748      	adds	r7, #72	; 0x48
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000040 	.word	0x20000040
 8000e00:	40014800 	.word	0x40014800

08000e04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_USART1_UART_Init+0x58>)
 8000e0a:	4a15      	ldr	r2, [pc, #84]	; (8000e60 <MX_USART1_UART_Init+0x5c>)
 8000e0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <MX_USART1_UART_Init+0x58>)
 8000e10:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <MX_USART1_UART_Init+0x60>)
 8000e12:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_USART1_UART_Init+0x58>)
 8000e16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_USART1_UART_Init+0x58>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_USART1_UART_Init+0x58>)
 8000e24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e28:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_USART1_UART_Init+0x58>)
 8000e2c:	220c      	movs	r2, #12
 8000e2e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <MX_USART1_UART_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_USART1_UART_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <MX_USART1_UART_Init+0x58>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_USART1_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_USART1_UART_Init+0x58>)
 8000e4a:	f003 fd57 	bl	80048fc <HAL_UART_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000e54:	f000 f90a 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200000ec 	.word	0x200000ec
 8000e60:	40013800 	.word	0x40013800
 8000e64:	000186a0 	.word	0x000186a0

08000e68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e6e:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <MX_USART2_UART_Init+0x5c>)
 8000e70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e74:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e8e:	220c      	movs	r2, #12
 8000e90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000eac:	f003 fd26 	bl	80048fc <HAL_UART_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eb6:	f000 f8d9 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000260 	.word	0x20000260
 8000ec4:	40004400 	.word	0x40004400

08000ec8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_DMA_Init+0x38>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <MX_DMA_Init+0x38>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_DMA_Init+0x38>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	200f      	movs	r0, #15
 8000eec:	f000 fddd 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ef0:	200f      	movs	r0, #15
 8000ef2:	f000 fdf6 	bl	8001ae2 <HAL_NVIC_EnableIRQ>

}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000

08000f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	4b51      	ldr	r3, [pc, #324]	; (8001060 <MX_GPIO_Init+0x15c>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	4a50      	ldr	r2, [pc, #320]	; (8001060 <MX_GPIO_Init+0x15c>)
 8000f20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f24:	6153      	str	r3, [r2, #20]
 8000f26:	4b4e      	ldr	r3, [pc, #312]	; (8001060 <MX_GPIO_Init+0x15c>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f32:	4b4b      	ldr	r3, [pc, #300]	; (8001060 <MX_GPIO_Init+0x15c>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	4a4a      	ldr	r2, [pc, #296]	; (8001060 <MX_GPIO_Init+0x15c>)
 8000f38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f3c:	6153      	str	r3, [r2, #20]
 8000f3e:	4b48      	ldr	r3, [pc, #288]	; (8001060 <MX_GPIO_Init+0x15c>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b45      	ldr	r3, [pc, #276]	; (8001060 <MX_GPIO_Init+0x15c>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	4a44      	ldr	r2, [pc, #272]	; (8001060 <MX_GPIO_Init+0x15c>)
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f54:	6153      	str	r3, [r2, #20]
 8000f56:	4b42      	ldr	r3, [pc, #264]	; (8001060 <MX_GPIO_Init+0x15c>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	4b3f      	ldr	r3, [pc, #252]	; (8001060 <MX_GPIO_Init+0x15c>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	4a3e      	ldr	r2, [pc, #248]	; (8001060 <MX_GPIO_Init+0x15c>)
 8000f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6c:	6153      	str	r3, [r2, #20]
 8000f6e:	4b3c      	ldr	r3, [pc, #240]	; (8001060 <MX_GPIO_Init+0x15c>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|Ultrasonic_3_Trigger_Pin|Ultrasonic_4_Trigger_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f242 2120 	movw	r1, #8736	; 0x2220
 8000f80:	4838      	ldr	r0, [pc, #224]	; (8001064 <MX_GPIO_Init+0x160>)
 8000f82:	f001 f949 	bl	8002218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Ultrasonic_1_Trigger_Pin|Ultrasonic_2_Trigger_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f90:	f001 f942 	bl	8002218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	482f      	ldr	r0, [pc, #188]	; (8001068 <MX_GPIO_Init+0x164>)
 8000fac:	f000 ffc2 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Ultrasonic_3_Trigger_Pin Ultrasonic_4_Trigger_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Ultrasonic_3_Trigger_Pin|Ultrasonic_4_Trigger_Pin;
 8000fb0:	f242 2320 	movw	r3, #8736	; 0x2220
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4826      	ldr	r0, [pc, #152]	; (8001064 <MX_GPIO_Init+0x160>)
 8000fca:	f000 ffb3 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ultrasonic_1_Trigger_Pin Ultrasonic_2_Trigger_Pin */
  GPIO_InitStruct.Pin = Ultrasonic_1_Trigger_Pin|Ultrasonic_2_Trigger_Pin;
 8000fce:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fea:	f000 ffa3 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ultrasonic_1_Echo_Pin Ultrasonic_2_Echo_Pin */
  GPIO_InitStruct.Pin = Ultrasonic_1_Echo_Pin|Ultrasonic_2_Echo_Pin;
 8000fee:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ff4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001008:	f000 ff94 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ultrasonic_3_Echo_Pin Ultrasonic_4_Echo_Pin */
  GPIO_InitStruct.Pin = Ultrasonic_3_Echo_Pin|Ultrasonic_4_Echo_Pin;
 800100c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001012:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001018:	2301      	movs	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	4810      	ldr	r0, [pc, #64]	; (8001064 <MX_GPIO_Init+0x160>)
 8001024:	f000 ff86 	bl	8001f34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	200a      	movs	r0, #10
 800102e:	f000 fd3c 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001032:	200a      	movs	r0, #10
 8001034:	f000 fd55 	bl	8001ae2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	2017      	movs	r0, #23
 800103e:	f000 fd34 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001042:	2017      	movs	r0, #23
 8001044:	f000 fd4d 	bl	8001ae2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	2028      	movs	r0, #40	; 0x28
 800104e:	f000 fd2c 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001052:	2028      	movs	r0, #40	; 0x28
 8001054:	f000 fd45 	bl	8001ae2 <HAL_NVIC_EnableIRQ>

}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000
 8001064:	48000400 	.word	0x48000400
 8001068:	48000800 	.word	0x48000800

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	e7fe      	b.n	8001074 <Error_Handler+0x8>
	...

08001078 <dbus_rx_cplt>:

uint8_t remote_raw_data[18];


void dbus_rx_cplt(DMA_HandleTypeDef *hdma)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
		remote_cmd.right_x = (remote_raw_data[0] | remote_raw_data[1] << 8) & 0x07FF;
 8001080:	4b67      	ldr	r3, [pc, #412]	; (8001220 <dbus_rx_cplt+0x1a8>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b21a      	sxth	r2, r3
 8001086:	4b66      	ldr	r3, [pc, #408]	; (8001220 <dbus_rx_cplt+0x1a8>)
 8001088:	785b      	ldrb	r3, [r3, #1]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21b      	sxth	r3, r3
 8001092:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001096:	b21a      	sxth	r2, r3
 8001098:	4b62      	ldr	r3, [pc, #392]	; (8001224 <dbus_rx_cplt+0x1ac>)
 800109a:	801a      	strh	r2, [r3, #0]
		remote_cmd.right_x -= JOYSTICK_OFFSET;
 800109c:	4b61      	ldr	r3, [pc, #388]	; (8001224 <dbus_rx_cplt+0x1ac>)
 800109e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	4b5d      	ldr	r3, [pc, #372]	; (8001224 <dbus_rx_cplt+0x1ac>)
 80010ae:	801a      	strh	r2, [r3, #0]
		remote_cmd.right_y = (remote_raw_data[1] >> 3 | remote_raw_data[2] << 5) & 0x07FF;
 80010b0:	4b5b      	ldr	r3, [pc, #364]	; (8001220 <dbus_rx_cplt+0x1a8>)
 80010b2:	785b      	ldrb	r3, [r3, #1]
 80010b4:	08db      	lsrs	r3, r3, #3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	4b59      	ldr	r3, [pc, #356]	; (8001220 <dbus_rx_cplt+0x1a8>)
 80010bc:	789b      	ldrb	r3, [r3, #2]
 80010be:	015b      	lsls	r3, r3, #5
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	4b55      	ldr	r3, [pc, #340]	; (8001224 <dbus_rx_cplt+0x1ac>)
 80010ce:	805a      	strh	r2, [r3, #2]
		remote_cmd.right_y -= JOYSTICK_OFFSET;
 80010d0:	4b54      	ldr	r3, [pc, #336]	; (8001224 <dbus_rx_cplt+0x1ac>)
 80010d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80010dc:	b29b      	uxth	r3, r3
 80010de:	b21a      	sxth	r2, r3
 80010e0:	4b50      	ldr	r3, [pc, #320]	; (8001224 <dbus_rx_cplt+0x1ac>)
 80010e2:	805a      	strh	r2, [r3, #2]
		remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2 | remote_raw_data[4] << 10) & 0x07FF;
 80010e4:	4b4e      	ldr	r3, [pc, #312]	; (8001220 <dbus_rx_cplt+0x1a8>)
 80010e6:	789b      	ldrb	r3, [r3, #2]
 80010e8:	099b      	lsrs	r3, r3, #6
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	4b4c      	ldr	r3, [pc, #304]	; (8001220 <dbus_rx_cplt+0x1a8>)
 80010f0:	78db      	ldrb	r3, [r3, #3]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	4b49      	ldr	r3, [pc, #292]	; (8001220 <dbus_rx_cplt+0x1a8>)
 80010fc:	791b      	ldrb	r3, [r3, #4]
 80010fe:	029b      	lsls	r3, r3, #10
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21b      	sxth	r3, r3
 8001106:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800110a:	b21a      	sxth	r2, r3
 800110c:	4b45      	ldr	r3, [pc, #276]	; (8001224 <dbus_rx_cplt+0x1ac>)
 800110e:	809a      	strh	r2, [r3, #4]
		remote_cmd.left_x -= JOYSTICK_OFFSET;
 8001110:	4b44      	ldr	r3, [pc, #272]	; (8001224 <dbus_rx_cplt+0x1ac>)
 8001112:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001116:	b29b      	uxth	r3, r3
 8001118:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800111c:	b29b      	uxth	r3, r3
 800111e:	b21a      	sxth	r2, r3
 8001120:	4b40      	ldr	r3, [pc, #256]	; (8001224 <dbus_rx_cplt+0x1ac>)
 8001122:	809a      	strh	r2, [r3, #4]
		remote_cmd.left_y = (remote_raw_data[4] >> 1 | remote_raw_data[5] << 7) & 0x07FF;
 8001124:	4b3e      	ldr	r3, [pc, #248]	; (8001220 <dbus_rx_cplt+0x1a8>)
 8001126:	791b      	ldrb	r3, [r3, #4]
 8001128:	085b      	lsrs	r3, r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	b21a      	sxth	r2, r3
 800112e:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <dbus_rx_cplt+0x1a8>)
 8001130:	795b      	ldrb	r3, [r3, #5]
 8001132:	01db      	lsls	r3, r3, #7
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21b      	sxth	r3, r3
 800113a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800113e:	b21a      	sxth	r2, r3
 8001140:	4b38      	ldr	r3, [pc, #224]	; (8001224 <dbus_rx_cplt+0x1ac>)
 8001142:	80da      	strh	r2, [r3, #6]
		remote_cmd.left_y -= JOYSTICK_OFFSET;
 8001144:	4b37      	ldr	r3, [pc, #220]	; (8001224 <dbus_rx_cplt+0x1ac>)
 8001146:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800114a:	b29b      	uxth	r3, r3
 800114c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001150:	b29b      	uxth	r3, r3
 8001152:	b21a      	sxth	r2, r3
 8001154:	4b33      	ldr	r3, [pc, #204]	; (8001224 <dbus_rx_cplt+0x1ac>)
 8001156:	80da      	strh	r2, [r3, #6]
		//Left switch position
		remote_cmd.left_switch = ((remote_raw_data[5] >> 4) & 0x000C) >> 2;
 8001158:	4b31      	ldr	r3, [pc, #196]	; (8001220 <dbus_rx_cplt+0x1a8>)
 800115a:	795b      	ldrb	r3, [r3, #5]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	b2db      	uxtb	r3, r3
 8001160:	109b      	asrs	r3, r3, #2
 8001162:	b25b      	sxtb	r3, r3
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	b25a      	sxtb	r2, r3
 800116a:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <dbus_rx_cplt+0x1ac>)
 800116c:	721a      	strb	r2, [r3, #8]
		remote_cmd.right_switch = (remote_raw_data[5] >> 4) & 0x0003;
 800116e:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <dbus_rx_cplt+0x1a8>)
 8001170:	795b      	ldrb	r3, [r3, #5]
 8001172:	091b      	lsrs	r3, r3, #4
 8001174:	b2db      	uxtb	r3, r3
 8001176:	b25b      	sxtb	r3, r3
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	b25a      	sxtb	r2, r3
 800117e:	4b29      	ldr	r3, [pc, #164]	; (8001224 <dbus_rx_cplt+0x1ac>)
 8001180:	725a      	strb	r2, [r3, #9]
		remote_cmd.mouse_x = ((int16_t)remote_raw_data[6] | ((int16_t)remote_raw_data[7] << 8));
 8001182:	4b27      	ldr	r3, [pc, #156]	; (8001220 <dbus_rx_cplt+0x1a8>)
 8001184:	799b      	ldrb	r3, [r3, #6]
 8001186:	b21a      	sxth	r2, r3
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <dbus_rx_cplt+0x1a8>)
 800118a:	79db      	ldrb	r3, [r3, #7]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21a      	sxth	r2, r3
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <dbus_rx_cplt+0x1ac>)
 8001196:	815a      	strh	r2, [r3, #10]
		remote_cmd.mouse_y = ((int16_t)remote_raw_data[8] | ((int16_t)remote_raw_data[9] << 8));
 8001198:	4b21      	ldr	r3, [pc, #132]	; (8001220 <dbus_rx_cplt+0x1a8>)
 800119a:	7a1b      	ldrb	r3, [r3, #8]
 800119c:	b21a      	sxth	r2, r3
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <dbus_rx_cplt+0x1a8>)
 80011a0:	7a5b      	ldrb	r3, [r3, #9]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <dbus_rx_cplt+0x1ac>)
 80011ac:	819a      	strh	r2, [r3, #12]
		remote_cmd.mouse_z = ((int16_t)remote_raw_data[10] | ((int16_t)remote_raw_data[11] << 8));
 80011ae:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <dbus_rx_cplt+0x1a8>)
 80011b0:	7a9b      	ldrb	r3, [r3, #10]
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <dbus_rx_cplt+0x1a8>)
 80011b6:	7adb      	ldrb	r3, [r3, #11]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <dbus_rx_cplt+0x1ac>)
 80011c2:	81da      	strh	r2, [r3, #14]
		remote_cmd.mouse_left = (remote_raw_data[12]);
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <dbus_rx_cplt+0x1a8>)
 80011c6:	7b1b      	ldrb	r3, [r3, #12]
 80011c8:	b25a      	sxtb	r2, r3
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <dbus_rx_cplt+0x1ac>)
 80011cc:	761a      	strb	r2, [r3, #24]
		remote_cmd.mouse_right = (remote_raw_data[13]);
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <dbus_rx_cplt+0x1a8>)
 80011d0:	7b5b      	ldrb	r3, [r3, #13]
 80011d2:	b25a      	sxtb	r2, r3
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <dbus_rx_cplt+0x1ac>)
 80011d6:	765a      	strb	r2, [r3, #25]
		remote_cmd.keyboard_keys = (remote_raw_data[14]);
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <dbus_rx_cplt+0x1a8>)
 80011da:	7b9b      	ldrb	r3, [r3, #14]
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <dbus_rx_cplt+0x1ac>)
 80011e0:	835a      	strh	r2, [r3, #26]
		remote_cmd.side_dial = ((int16_t)remote_raw_data[16]) | ((int16_t)remote_raw_data[17] << 8);
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <dbus_rx_cplt+0x1a8>)
 80011e4:	7c1b      	ldrb	r3, [r3, #16]
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <dbus_rx_cplt+0x1a8>)
 80011ea:	7c5b      	ldrb	r3, [r3, #17]
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <dbus_rx_cplt+0x1ac>)
 80011f6:	839a      	strh	r2, [r3, #28]
		remote_cmd.side_dial -= JOYSTICK_OFFSET;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <dbus_rx_cplt+0x1ac>)
 80011fa:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001204:	b29b      	uxth	r3, r3
 8001206:	b21a      	sxth	r2, r3
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <dbus_rx_cplt+0x1ac>)
 800120a:	839a      	strh	r2, [r3, #28]
		remote_cmd.last_time = HAL_GetTick();
 800120c:	f000 fb42 	bl	8001894 <HAL_GetTick>
 8001210:	4603      	mov	r3, r0
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <dbus_rx_cplt+0x1ac>)
 8001214:	6213      	str	r3, [r2, #32]
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000308 	.word	0x20000308
 8001224:	200002e4 	.word	0x200002e4

08001228 <rc_start>:



HAL_StatusTypeDef rc_start(UART_HandleTypeDef *huart)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b096      	sub	sp, #88	; 0x58
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	uint8_t *pData = remote_raw_data;
 8001230:	4b47      	ldr	r3, [pc, #284]	; (8001350 <rc_start+0x128>)
 8001232:	657b      	str	r3, [r7, #84]	; 0x54
	uint16_t Size = 18;
 8001234:	2312      	movs	r3, #18
 8001236:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	  huart->pRxBuffPtr = pData;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800123e:	655a      	str	r2, [r3, #84]	; 0x54
	  huart->RxXferSize = Size;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8001246:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2222      	movs	r2, #34	; 0x22
 8001256:	67da      	str	r2, [r3, #124]	; 0x7c

	  if (huart->hdmarx != NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125c:	2b00      	cmp	r3, #0
 800125e:	d020      	beq.n	80012a2 <rc_start+0x7a>
	  {
	    /* Set the UART DMA transfer complete callback */
	    huart->hdmarx->XferCpltCallback = dbus_rx_cplt;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001264:	4a3b      	ldr	r2, [pc, #236]	; (8001354 <rc_start+0x12c>)
 8001266:	629a      	str	r2, [r3, #40]	; 0x28


	    /* Enable the DMA channel */
	    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3324      	adds	r3, #36	; 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001278:	461a      	mov	r2, r3
 800127a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800127e:	f000 fc91 	bl	8001ba4 <HAL_DMA_Start_IT>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00c      	beq.n	80012a2 <rc_start+0x7a>
	    {
	      /* Set error code to DMA */
	      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2210      	movs	r2, #16
 800128c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	      __HAL_UNLOCK(huart);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

	      /* Restore huart->RxState to ready */
	      huart->RxState = HAL_UART_STATE_READY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2220      	movs	r2, #32
 800129c:	67da      	str	r2, [r3, #124]	; 0x7c

	      return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e051      	b.n	8001346 <rc_start+0x11e>
	    }
	  }
	  __HAL_UNLOCK(huart);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

	  /* Enable the UART Parity Error Interrupt */
	  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b2:	e853 3f00 	ldrex	r3, [r3]
 80012b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80012b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012c8:	643b      	str	r3, [r7, #64]	; 0x40
 80012ca:	63fa      	str	r2, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80012ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012d0:	e841 2300 	strex	r3, r2, [r1]
 80012d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80012d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1e6      	bne.n	80012aa <rc_start+0x82>

	  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3308      	adds	r3, #8
 80012e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	e853 3f00 	ldrex	r3, [r3]
 80012ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3308      	adds	r3, #8
 80012fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001304:	e841 2300 	strex	r3, r2, [r1]
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1e5      	bne.n	80012dc <rc_start+0xb4>

	  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
	  in the UART CR3 register */
	  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3308      	adds	r3, #8
 8001316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	e853 3f00 	ldrex	r3, [r3]
 800131e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001326:	647b      	str	r3, [r7, #68]	; 0x44
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3308      	adds	r3, #8
 800132e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001330:	61ba      	str	r2, [r7, #24]
 8001332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001334:	6979      	ldr	r1, [r7, #20]
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	e841 2300 	strex	r3, r2, [r1]
 800133c:	613b      	str	r3, [r7, #16]
   return(result);
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1e5      	bne.n	8001310 <rc_start+0xe8>

	  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3758      	adds	r7, #88	; 0x58
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000308 	.word	0x20000308
 8001354:	08001079 	.word	0x08001079

08001358 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_MspInit+0x44>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <HAL_MspInit+0x44>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6193      	str	r3, [r2, #24]
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_MspInit+0x44>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_MspInit+0x44>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <HAL_MspInit+0x44>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	61d3      	str	r3, [r2, #28]
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_MspInit+0x44>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800138e:	2007      	movs	r0, #7
 8001390:	f000 fb80 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021000 	.word	0x40021000

080013a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <HAL_TIM_PWM_MspInit+0x38>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d10b      	bne.n	80013ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_TIM_PWM_MspInit+0x3c>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	4a09      	ldr	r2, [pc, #36]	; (80013dc <HAL_TIM_PWM_MspInit+0x3c>)
 80013b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013bc:	6193      	str	r3, [r2, #24]
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <HAL_TIM_PWM_MspInit+0x3c>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40012c00 	.word	0x40012c00
 80013dc:	40021000 	.word	0x40021000

080013e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f0:	d10c      	bne.n	800140c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_TIM_Base_MspInit+0x80>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	4a1a      	ldr	r2, [pc, #104]	; (8001460 <HAL_TIM_Base_MspInit+0x80>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	61d3      	str	r3, [r2, #28]
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_TIM_Base_MspInit+0x80>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800140a:	e022      	b.n	8001452 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM6)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <HAL_TIM_Base_MspInit+0x84>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d10c      	bne.n	8001430 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_TIM_Base_MspInit+0x80>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	4a11      	ldr	r2, [pc, #68]	; (8001460 <HAL_TIM_Base_MspInit+0x80>)
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	61d3      	str	r3, [r2, #28]
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_TIM_Base_MspInit+0x80>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
}
 800142e:	e010      	b.n	8001452 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM17)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <HAL_TIM_Base_MspInit+0x88>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d10b      	bne.n	8001452 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_TIM_Base_MspInit+0x80>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	4a08      	ldr	r2, [pc, #32]	; (8001460 <HAL_TIM_Base_MspInit+0x80>)
 8001440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001444:	6193      	str	r3, [r2, #24]
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_TIM_Base_MspInit+0x80>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
}
 8001452:	bf00      	nop
 8001454:	371c      	adds	r7, #28
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000
 8001464:	40001000 	.word	0x40001000
 8001468:	40014800 	.word	0x40014800

0800146c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a22      	ldr	r2, [pc, #136]	; (8001514 <HAL_TIM_MspPostInit+0xa8>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d11c      	bne.n	80014c8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	4b22      	ldr	r3, [pc, #136]	; (8001518 <HAL_TIM_MspPostInit+0xac>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	4a21      	ldr	r2, [pc, #132]	; (8001518 <HAL_TIM_MspPostInit+0xac>)
 8001494:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001498:	6153      	str	r3, [r2, #20]
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <HAL_TIM_MspPostInit+0xac>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = DC_Motor_PWM_CH1_Pin|DC_Motor_PWM_CH2_Pin|DC_Motor_PWM_CH3_Pin|DC_Motor_PWM_CH4_Pin;
 80014a6:	230f      	movs	r3, #15
 80014a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80014b6:	2302      	movs	r3, #2
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	4816      	ldr	r0, [pc, #88]	; (800151c <HAL_TIM_MspPostInit+0xb0>)
 80014c2:	f000 fd37 	bl	8001f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80014c6:	e021      	b.n	800150c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM17)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a14      	ldr	r2, [pc, #80]	; (8001520 <HAL_TIM_MspPostInit+0xb4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d11c      	bne.n	800150c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_TIM_MspPostInit+0xac>)
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	4a10      	ldr	r2, [pc, #64]	; (8001518 <HAL_TIM_MspPostInit+0xac>)
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014dc:	6153      	str	r3, [r2, #20]
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <HAL_TIM_MspPostInit+0xac>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DC_Motor_Brush_PWM_Pin;
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80014fa:	2301      	movs	r3, #1
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DC_Motor_Brush_PWM_GPIO_Port, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001508:	f000 fd14 	bl	8001f34 <HAL_GPIO_Init>
}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40012c00 	.word	0x40012c00
 8001518:	40021000 	.word	0x40021000
 800151c:	48000800 	.word	0x48000800
 8001520:	40014800 	.word	0x40014800

08001524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	; 0x30
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a54      	ldr	r2, [pc, #336]	; (8001694 <HAL_UART_MspInit+0x170>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d174      	bne.n	8001630 <HAL_UART_MspInit+0x10c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001546:	4b54      	ldr	r3, [pc, #336]	; (8001698 <HAL_UART_MspInit+0x174>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	4a53      	ldr	r2, [pc, #332]	; (8001698 <HAL_UART_MspInit+0x174>)
 800154c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001550:	6193      	str	r3, [r2, #24]
 8001552:	4b51      	ldr	r3, [pc, #324]	; (8001698 <HAL_UART_MspInit+0x174>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155a:	61bb      	str	r3, [r7, #24]
 800155c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	4b4e      	ldr	r3, [pc, #312]	; (8001698 <HAL_UART_MspInit+0x174>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	4a4d      	ldr	r2, [pc, #308]	; (8001698 <HAL_UART_MspInit+0x174>)
 8001564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001568:	6153      	str	r3, [r2, #20]
 800156a:	4b4b      	ldr	r3, [pc, #300]	; (8001698 <HAL_UART_MspInit+0x174>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	4b48      	ldr	r3, [pc, #288]	; (8001698 <HAL_UART_MspInit+0x174>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	4a47      	ldr	r2, [pc, #284]	; (8001698 <HAL_UART_MspInit+0x174>)
 800157c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001580:	6153      	str	r3, [r2, #20]
 8001582:	4b45      	ldr	r3, [pc, #276]	; (8001698 <HAL_UART_MspInit+0x174>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800158e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015a0:	2307      	movs	r3, #7
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ae:	f000 fcc1 	bl	8001f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015b2:	2340      	movs	r3, #64	; 0x40
 80015b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015c2:	2307      	movs	r3, #7
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	4833      	ldr	r0, [pc, #204]	; (800169c <HAL_UART_MspInit+0x178>)
 80015ce:	f000 fcb1 	bl	8001f34 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80015d2:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <HAL_UART_MspInit+0x17c>)
 80015d4:	4a33      	ldr	r2, [pc, #204]	; (80016a4 <HAL_UART_MspInit+0x180>)
 80015d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015d8:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <HAL_UART_MspInit+0x17c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <HAL_UART_MspInit+0x17c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015e4:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <HAL_UART_MspInit+0x17c>)
 80015e6:	2280      	movs	r2, #128	; 0x80
 80015e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ea:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <HAL_UART_MspInit+0x17c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015f0:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <HAL_UART_MspInit+0x17c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80015f6:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <HAL_UART_MspInit+0x17c>)
 80015f8:	2220      	movs	r2, #32
 80015fa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015fc:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <HAL_UART_MspInit+0x17c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001602:	4827      	ldr	r0, [pc, #156]	; (80016a0 <HAL_UART_MspInit+0x17c>)
 8001604:	f000 fa87 	bl	8001b16 <HAL_DMA_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 800160e:	f7ff fd2d 	bl	800106c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a22      	ldr	r2, [pc, #136]	; (80016a0 <HAL_UART_MspInit+0x17c>)
 8001616:	671a      	str	r2, [r3, #112]	; 0x70
 8001618:	4a21      	ldr	r2, [pc, #132]	; (80016a0 <HAL_UART_MspInit+0x17c>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	2025      	movs	r0, #37	; 0x25
 8001624:	f000 fa41 	bl	8001aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001628:	2025      	movs	r0, #37	; 0x25
 800162a:	f000 fa5a 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800162e:	e02d      	b.n	800168c <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <HAL_UART_MspInit+0x184>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d128      	bne.n	800168c <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART2_CLK_ENABLE();
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_UART_MspInit+0x174>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a16      	ldr	r2, [pc, #88]	; (8001698 <HAL_UART_MspInit+0x174>)
 8001640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001644:	61d3      	str	r3, [r2, #28]
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <HAL_UART_MspInit+0x174>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_UART_MspInit+0x174>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	4a10      	ldr	r2, [pc, #64]	; (8001698 <HAL_UART_MspInit+0x174>)
 8001658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800165c:	6153      	str	r3, [r2, #20]
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_UART_MspInit+0x174>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800166a:	230c      	movs	r3, #12
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800167a:	2307      	movs	r3, #7
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001688:	f000 fc54 	bl	8001f34 <HAL_GPIO_Init>
}
 800168c:	bf00      	nop
 800168e:	3730      	adds	r7, #48	; 0x30
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40013800 	.word	0x40013800
 8001698:	40021000 	.word	0x40021000
 800169c:	48000400 	.word	0x48000400
 80016a0:	200000a8 	.word	0x200000a8
 80016a4:	40020058 	.word	0x40020058
 80016a8:	40004400 	.word	0x40004400

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f8:	f000 f8b8 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ultrasonic_3_Echo_Pin);
 8001704:	2010      	movs	r0, #16
 8001706:	f000 fd9f 	bl	8002248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <DMA1_Channel5_IRQHandler+0x10>)
 8001716:	f000 fb1b 	bl	8001d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000a8 	.word	0x200000a8

08001724 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ultrasonic_1_Trigger_Pin);
 8001728:	f44f 7080 	mov.w	r0, #256	; 0x100
 800172c:	f000 fd8c 	bl	8002248 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Ultrasonic_1_Echo_Pin);
 8001730:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001734:	f000 fd88 	bl	8002248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <USART1_IRQHandler+0x10>)
 8001742:	f003 f929 	bl	8004998 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200000ec 	.word	0x200000ec

08001750 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ultrasonic_2_Echo_Pin);
 8001754:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001758:	f000 fd76 	bl	8002248 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800175c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001760:	f000 fd72 	bl	8002248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <SystemInit+0x20>)
 800176e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <SystemInit+0x20>)
 8001774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800178c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001790:	480d      	ldr	r0, [pc, #52]	; (80017c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001792:	490e      	ldr	r1, [pc, #56]	; (80017cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001794:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <LoopForever+0xe>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001798:	e002      	b.n	80017a0 <LoopCopyDataInit>

0800179a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800179c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179e:	3304      	adds	r3, #4

080017a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a4:	d3f9      	bcc.n	800179a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a6:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017a8:	4c0b      	ldr	r4, [pc, #44]	; (80017d8 <LoopForever+0x16>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ac:	e001      	b.n	80017b2 <LoopFillZerobss>

080017ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b0:	3204      	adds	r2, #4

080017b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b4:	d3fb      	bcc.n	80017ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017b6:	f7ff ffd7 	bl	8001768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ba:	f003 ff7d 	bl	80056b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017be:	f7ff f877 	bl	80008b0 <main>

080017c2 <LoopForever>:

LoopForever:
    b LoopForever
 80017c2:	e7fe      	b.n	80017c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017c4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80017c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017d0:	08005768 	.word	0x08005768
  ldr r2, =_sbss
 80017d4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80017d8:	20000320 	.word	0x20000320

080017dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC1_IRQHandler>
	...

080017e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_Init+0x28>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a07      	ldr	r2, [pc, #28]	; (8001808 <HAL_Init+0x28>)
 80017ea:	f043 0310 	orr.w	r3, r3, #16
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f000 f94f 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f000 f808 	bl	800180c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fc:	f7ff fdac 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40022000 	.word	0x40022000

0800180c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_InitTick+0x54>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x58>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f967 	bl	8001afe <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f000 f92f 	bl	8001aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	; (8001868 <HAL_InitTick+0x5c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000000 	.word	0x20000000
 8001864:	20000008 	.word	0x20000008
 8001868:	20000004 	.word	0x20000004

0800186c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000008 	.word	0x20000008
 8001890:	2000031c 	.word	0x2000031c

08001894 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;  
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	2000031c 	.word	0x2000031c

080018ac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff ffee 	bl	8001894 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c4:	d005      	beq.n	80018d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_Delay+0x44>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80018d2:	bf00      	nop
 80018d4:	f7ff ffde 	bl	8001894 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8f7      	bhi.n	80018d4 <HAL_Delay+0x28>
  {
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000008 	.word	0x20000008

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800191c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db0b      	blt.n	8001982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4907      	ldr	r1, [pc, #28]	; (8001990 <__NVIC_EnableIRQ+0x38>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2001      	movs	r0, #1
 800197a:	fa00 f202 	lsl.w	r2, r0, r2
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e100 	.word	0xe000e100

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	; (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a60:	d301      	bcc.n	8001a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00f      	b.n	8001a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <SysTick_Config+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6e:	210f      	movs	r1, #15
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f7ff ff8e 	bl	8001994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <SysTick_Config+0x40>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SysTick_Config+0x40>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff29 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001abc:	f7ff ff3e 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6978      	ldr	r0, [r7, #20]
 8001ac8:	f7ff ff8e 	bl	80019e8 <NVIC_EncodePriority>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff5d 	bl	8001994 <__NVIC_SetPriority>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff31 	bl	8001958 <__NVIC_EnableIRQ>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ffa2 	bl	8001a50 <SysTick_Config>
 8001b0c:	4603      	mov	r3, r0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e037      	b.n	8001b9c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f9b8 	bl	8001ef4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}  
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_DMA_Start_IT+0x20>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e04a      	b.n	8001c5a <HAL_DMA_Start_IT+0xb6>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d13a      	bne.n	8001c4c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2202      	movs	r2, #2
 8001bda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 f94b 	bl	8001e96 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 020e 	orr.w	r2, r2, #14
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	e00f      	b.n	8001c3a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 020a 	orr.w	r2, r2, #10
 8001c28:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0204 	bic.w	r2, r2, #4
 8001c38:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 0201 	orr.w	r2, r2, #1
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	e005      	b.n	8001c58 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001c54:	2302      	movs	r3, #2
 8001c56:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d008      	beq.n	8001c86 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2204      	movs	r2, #4
 8001c78:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e020      	b.n	8001cc8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 020e 	bic.w	r2, r2, #14
 8001c94:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0201 	bic.w	r2, r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cae:	2101      	movs	r1, #1
 8001cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d005      	beq.n	8001cf6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2204      	movs	r2, #4
 8001cee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	e027      	b.n	8001d46 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 020e 	bic.w	r2, r2, #14
 8001d04:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0201 	bic.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1e:	2101      	movs	r1, #1
 8001d20:	fa01 f202 	lsl.w	r2, r1, r2
 8001d24:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	4798      	blx	r3
    } 
  }
  return status;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d024      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x72>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d01f      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0320 	and.w	r3, r3, #32
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0204 	bic.w	r2, r2, #4
 8001d9e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da8:	2104      	movs	r1, #4
 8001daa:	fa01 f202 	lsl.w	r2, r1, r2
 8001dae:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d06a      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001dc0:	e065      	b.n	8001e8e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d02c      	beq.n	8001e2c <HAL_DMA_IRQHandler+0xdc>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d027      	beq.n	8001e2c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10b      	bne.n	8001e02 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 020a 	bic.w	r2, r2, #10
 8001df8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e10:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d035      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001e2a:	e030      	b.n	8001e8e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	2208      	movs	r2, #8
 8001e32:	409a      	lsls	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d028      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x13e>
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d023      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 020e 	bic.w	r2, r2, #14
 8001e54:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5e:	2101      	movs	r1, #1
 8001e60:	fa01 f202 	lsl.w	r2, r1, r2
 8001e64:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
    }
  }
}  
 8001e8c:	e7ff      	b.n	8001e8e <HAL_DMA_IRQHandler+0x13e>
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b085      	sub	sp, #20
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eac:	2101      	movs	r1, #1
 8001eae:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b10      	cmp	r3, #16
 8001ec2:	d108      	bne.n	8001ed6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ed4:	e007      	b.n	8001ee6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	60da      	str	r2, [r3, #12]
}
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <DMA_CalcBaseAndBitshift+0x34>)
 8001f04:	4413      	add	r3, r2
 8001f06:	4a09      	ldr	r2, [pc, #36]	; (8001f2c <DMA_CalcBaseAndBitshift+0x38>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	009a      	lsls	r2, r3, #2
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a06      	ldr	r2, [pc, #24]	; (8001f30 <DMA_CalcBaseAndBitshift+0x3c>)
 8001f18:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	bffdfff8 	.word	0xbffdfff8
 8001f2c:	cccccccd 	.word	0xcccccccd
 8001f30:	40020000 	.word	0x40020000

08001f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f42:	e14e      	b.n	80021e2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2101      	movs	r1, #1
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8140 	beq.w	80021dc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d005      	beq.n	8001f74 <HAL_GPIO_Init+0x40>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d130      	bne.n	8001fd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001faa:	2201      	movs	r2, #1
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	f003 0201 	and.w	r2, r3, #1
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d017      	beq.n	8002012 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d123      	bne.n	8002066 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	08da      	lsrs	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3208      	adds	r2, #8
 8002026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	220f      	movs	r2, #15
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	08da      	lsrs	r2, r3, #3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3208      	adds	r2, #8
 8002060:	6939      	ldr	r1, [r7, #16]
 8002062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	2203      	movs	r2, #3
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0203 	and.w	r2, r3, #3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 809a 	beq.w	80021dc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a8:	4b55      	ldr	r3, [pc, #340]	; (8002200 <HAL_GPIO_Init+0x2cc>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4a54      	ldr	r2, [pc, #336]	; (8002200 <HAL_GPIO_Init+0x2cc>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6193      	str	r3, [r2, #24]
 80020b4:	4b52      	ldr	r3, [pc, #328]	; (8002200 <HAL_GPIO_Init+0x2cc>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020c0:	4a50      	ldr	r2, [pc, #320]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	3302      	adds	r3, #2
 80020c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	220f      	movs	r2, #15
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020ea:	d013      	beq.n	8002114 <HAL_GPIO_Init+0x1e0>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a46      	ldr	r2, [pc, #280]	; (8002208 <HAL_GPIO_Init+0x2d4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d00d      	beq.n	8002110 <HAL_GPIO_Init+0x1dc>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a45      	ldr	r2, [pc, #276]	; (800220c <HAL_GPIO_Init+0x2d8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d007      	beq.n	800210c <HAL_GPIO_Init+0x1d8>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a44      	ldr	r2, [pc, #272]	; (8002210 <HAL_GPIO_Init+0x2dc>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d101      	bne.n	8002108 <HAL_GPIO_Init+0x1d4>
 8002104:	2303      	movs	r3, #3
 8002106:	e006      	b.n	8002116 <HAL_GPIO_Init+0x1e2>
 8002108:	2305      	movs	r3, #5
 800210a:	e004      	b.n	8002116 <HAL_GPIO_Init+0x1e2>
 800210c:	2302      	movs	r3, #2
 800210e:	e002      	b.n	8002116 <HAL_GPIO_Init+0x1e2>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <HAL_GPIO_Init+0x1e2>
 8002114:	2300      	movs	r3, #0
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	f002 0203 	and.w	r2, r2, #3
 800211c:	0092      	lsls	r2, r2, #2
 800211e:	4093      	lsls	r3, r2
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002126:	4937      	ldr	r1, [pc, #220]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	3302      	adds	r3, #2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002134:	4b37      	ldr	r3, [pc, #220]	; (8002214 <HAL_GPIO_Init+0x2e0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	43db      	mvns	r3, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002158:	4a2e      	ldr	r2, [pc, #184]	; (8002214 <HAL_GPIO_Init+0x2e0>)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800215e:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <HAL_GPIO_Init+0x2e0>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	43db      	mvns	r3, r3
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4013      	ands	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002182:	4a24      	ldr	r2, [pc, #144]	; (8002214 <HAL_GPIO_Init+0x2e0>)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002188:	4b22      	ldr	r3, [pc, #136]	; (8002214 <HAL_GPIO_Init+0x2e0>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	43db      	mvns	r3, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021ac:	4a19      	ldr	r2, [pc, #100]	; (8002214 <HAL_GPIO_Init+0x2e0>)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <HAL_GPIO_Init+0x2e0>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021d6:	4a0f      	ldr	r2, [pc, #60]	; (8002214 <HAL_GPIO_Init+0x2e0>)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3301      	adds	r3, #1
 80021e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	fa22 f303 	lsr.w	r3, r2, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f47f aea9 	bne.w	8001f44 <HAL_GPIO_Init+0x10>
  }
}
 80021f2:	bf00      	nop
 80021f4:	bf00      	nop
 80021f6:	371c      	adds	r7, #28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	40021000 	.word	0x40021000
 8002204:	40010000 	.word	0x40010000
 8002208:	48000400 	.word	0x48000400
 800220c:	48000800 	.word	0x48000800
 8002210:	48000c00 	.word	0x48000c00
 8002214:	40010400 	.word	0x40010400

08002218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
 8002224:	4613      	mov	r3, r2
 8002226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002228:	787b      	ldrb	r3, [r7, #1]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800222e:	887a      	ldrh	r2, [r7, #2]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002234:	e002      	b.n	800223c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002236:	887a      	ldrh	r2, [r7, #2]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	88fb      	ldrh	r3, [r7, #6]
 8002258:	4013      	ands	r3, r2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d006      	beq.n	800226c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe f9e2 	bl	8000630 <HAL_GPIO_EXTI_Callback>
  }
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40010400 	.word	0x40010400

08002278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800227e:	af00      	add	r7, sp, #0
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	f000 bef4 	b.w	800307a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 816a 	beq.w	8002576 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022a2:	4bb3      	ldr	r3, [pc, #716]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d00c      	beq.n	80022c8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022ae:	4bb0      	ldr	r3, [pc, #704]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d159      	bne.n	800236e <HAL_RCC_OscConfig+0xf6>
 80022ba:	4bad      	ldr	r3, [pc, #692]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c6:	d152      	bne.n	800236e <HAL_RCC_OscConfig+0xf6>
 80022c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022cc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80022dc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	fab3 f383 	clz	r3, r3
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d102      	bne.n	80022fa <HAL_RCC_OscConfig+0x82>
 80022f4:	4b9e      	ldr	r3, [pc, #632]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	e015      	b.n	8002326 <HAL_RCC_OscConfig+0xae>
 80022fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022fe:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800230e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002312:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002316:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002322:	4b93      	ldr	r3, [pc, #588]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800232a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800232e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002332:	fa92 f2a2 	rbit	r2, r2
 8002336:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800233a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800233e:	fab2 f282 	clz	r2, r2
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	f042 0220 	orr.w	r2, r2, #32
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	f002 021f 	and.w	r2, r2, #31
 800234e:	2101      	movs	r1, #1
 8002350:	fa01 f202 	lsl.w	r2, r1, r2
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 810c 	beq.w	8002574 <HAL_RCC_OscConfig+0x2fc>
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	f040 8106 	bne.w	8002574 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	f000 be86 	b.w	800307a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002378:	d106      	bne.n	8002388 <HAL_RCC_OscConfig+0x110>
 800237a:	4b7d      	ldr	r3, [pc, #500]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a7c      	ldr	r2, [pc, #496]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e030      	b.n	80023ea <HAL_RCC_OscConfig+0x172>
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10c      	bne.n	80023ac <HAL_RCC_OscConfig+0x134>
 8002392:	4b77      	ldr	r3, [pc, #476]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a76      	ldr	r2, [pc, #472]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 8002398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	4b74      	ldr	r3, [pc, #464]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a73      	ldr	r2, [pc, #460]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 80023a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01e      	b.n	80023ea <HAL_RCC_OscConfig+0x172>
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b6:	d10c      	bne.n	80023d2 <HAL_RCC_OscConfig+0x15a>
 80023b8:	4b6d      	ldr	r3, [pc, #436]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a6c      	ldr	r2, [pc, #432]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 80023be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	4b6a      	ldr	r3, [pc, #424]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a69      	ldr	r2, [pc, #420]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 80023ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	e00b      	b.n	80023ea <HAL_RCC_OscConfig+0x172>
 80023d2:	4b67      	ldr	r3, [pc, #412]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a66      	ldr	r2, [pc, #408]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 80023d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b64      	ldr	r3, [pc, #400]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a63      	ldr	r2, [pc, #396]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 80023e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023ea:	4b61      	ldr	r3, [pc, #388]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	f023 020f 	bic.w	r2, r3, #15
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	495d      	ldr	r1, [pc, #372]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d059      	beq.n	80024bc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7ff fa44 	bl	8001894 <HAL_GetTick>
 800240c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002412:	f7ff fa3f 	bl	8001894 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d902      	bls.n	8002428 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	f000 be29 	b.w	800307a <HAL_RCC_OscConfig+0xe02>
 8002428:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800242c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800243c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002440:	fab3 f383 	clz	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d102      	bne.n	800245a <HAL_RCC_OscConfig+0x1e2>
 8002454:	4b46      	ldr	r3, [pc, #280]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	e015      	b.n	8002486 <HAL_RCC_OscConfig+0x20e>
 800245a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800245e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800246e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002472:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002476:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002482:	4b3b      	ldr	r3, [pc, #236]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800248a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800248e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002492:	fa92 f2a2 	rbit	r2, r2
 8002496:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800249a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800249e:	fab2 f282 	clz	r2, r2
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	f042 0220 	orr.w	r2, r2, #32
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	f002 021f 	and.w	r2, r2, #31
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f202 	lsl.w	r2, r1, r2
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0ab      	beq.n	8002412 <HAL_RCC_OscConfig+0x19a>
 80024ba:	e05c      	b.n	8002576 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7ff f9ea 	bl	8001894 <HAL_GetTick>
 80024c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c6:	f7ff f9e5 	bl	8001894 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d902      	bls.n	80024dc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	f000 bdcf 	b.w	800307a <HAL_RCC_OscConfig+0xe02>
 80024dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024e0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80024f0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d102      	bne.n	800250e <HAL_RCC_OscConfig+0x296>
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	e015      	b.n	800253a <HAL_RCC_OscConfig+0x2c2>
 800250e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002512:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002522:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002526:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800252a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <HAL_RCC_OscConfig+0x2f8>)
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800253e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002542:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002546:	fa92 f2a2 	rbit	r2, r2
 800254a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800254e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002552:	fab2 f282 	clz	r2, r2
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	f042 0220 	orr.w	r2, r2, #32
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	f002 021f 	and.w	r2, r2, #31
 8002562:	2101      	movs	r1, #1
 8002564:	fa01 f202 	lsl.w	r2, r1, r2
 8002568:	4013      	ands	r3, r2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1ab      	bne.n	80024c6 <HAL_RCC_OscConfig+0x24e>
 800256e:	e002      	b.n	8002576 <HAL_RCC_OscConfig+0x2fe>
 8002570:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 816f 	beq.w	8002864 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002586:	4bd0      	ldr	r3, [pc, #832]	; (80028c8 <HAL_RCC_OscConfig+0x650>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002592:	4bcd      	ldr	r3, [pc, #820]	; (80028c8 <HAL_RCC_OscConfig+0x650>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b08      	cmp	r3, #8
 800259c:	d16c      	bne.n	8002678 <HAL_RCC_OscConfig+0x400>
 800259e:	4bca      	ldr	r3, [pc, #808]	; (80028c8 <HAL_RCC_OscConfig+0x650>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d166      	bne.n	8002678 <HAL_RCC_OscConfig+0x400>
 80025aa:	2302      	movs	r3, #2
 80025ac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80025bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d102      	bne.n	80025da <HAL_RCC_OscConfig+0x362>
 80025d4:	4bbc      	ldr	r3, [pc, #752]	; (80028c8 <HAL_RCC_OscConfig+0x650>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	e013      	b.n	8002602 <HAL_RCC_OscConfig+0x38a>
 80025da:	2302      	movs	r3, #2
 80025dc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80025ec:	2302      	movs	r3, #2
 80025ee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80025f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80025fe:	4bb2      	ldr	r3, [pc, #712]	; (80028c8 <HAL_RCC_OscConfig+0x650>)
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	2202      	movs	r2, #2
 8002604:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002608:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800260c:	fa92 f2a2 	rbit	r2, r2
 8002610:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002614:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002618:	fab2 f282 	clz	r2, r2
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	f042 0220 	orr.w	r2, r2, #32
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	f002 021f 	and.w	r2, r2, #31
 8002628:	2101      	movs	r1, #1
 800262a:	fa01 f202 	lsl.w	r2, r1, r2
 800262e:	4013      	ands	r3, r2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <HAL_RCC_OscConfig+0x3cc>
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d002      	beq.n	8002644 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	f000 bd1b 	b.w	800307a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4ba0      	ldr	r3, [pc, #640]	; (80028c8 <HAL_RCC_OscConfig+0x650>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	21f8      	movs	r1, #248	; 0xf8
 8002654:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800265c:	fa91 f1a1 	rbit	r1, r1
 8002660:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002664:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002668:	fab1 f181 	clz	r1, r1
 800266c:	b2c9      	uxtb	r1, r1
 800266e:	408b      	lsls	r3, r1
 8002670:	4995      	ldr	r1, [pc, #596]	; (80028c8 <HAL_RCC_OscConfig+0x650>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	e0f5      	b.n	8002864 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8085 	beq.w	800278e <HAL_RCC_OscConfig+0x516>
 8002684:	2301      	movs	r3, #1
 8002686:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002696:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	461a      	mov	r2, r3
 80026ac:	2301      	movs	r3, #1
 80026ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff f8f0 	bl	8001894 <HAL_GetTick>
 80026b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ba:	f7ff f8eb 	bl	8001894 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d902      	bls.n	80026d0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	f000 bcd5 	b.w	800307a <HAL_RCC_OscConfig+0xe02>
 80026d0:	2302      	movs	r3, #2
 80026d2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80026e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d102      	bne.n	8002700 <HAL_RCC_OscConfig+0x488>
 80026fa:	4b73      	ldr	r3, [pc, #460]	; (80028c8 <HAL_RCC_OscConfig+0x650>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	e013      	b.n	8002728 <HAL_RCC_OscConfig+0x4b0>
 8002700:	2302      	movs	r3, #2
 8002702:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002712:	2302      	movs	r3, #2
 8002714:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002718:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002724:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCC_OscConfig+0x650>)
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	2202      	movs	r2, #2
 800272a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800272e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002732:	fa92 f2a2 	rbit	r2, r2
 8002736:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800273a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800273e:	fab2 f282 	clz	r2, r2
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	f042 0220 	orr.w	r2, r2, #32
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	f002 021f 	and.w	r2, r2, #31
 800274e:	2101      	movs	r1, #1
 8002750:	fa01 f202 	lsl.w	r2, r1, r2
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0af      	beq.n	80026ba <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275a:	4b5b      	ldr	r3, [pc, #364]	; (80028c8 <HAL_RCC_OscConfig+0x650>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	21f8      	movs	r1, #248	; 0xf8
 800276a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002772:	fa91 f1a1 	rbit	r1, r1
 8002776:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800277a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800277e:	fab1 f181 	clz	r1, r1
 8002782:	b2c9      	uxtb	r1, r1
 8002784:	408b      	lsls	r3, r1
 8002786:	4950      	ldr	r1, [pc, #320]	; (80028c8 <HAL_RCC_OscConfig+0x650>)
 8002788:	4313      	orrs	r3, r2
 800278a:	600b      	str	r3, [r1, #0]
 800278c:	e06a      	b.n	8002864 <HAL_RCC_OscConfig+0x5ec>
 800278e:	2301      	movs	r3, #1
 8002790:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80027a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	461a      	mov	r2, r3
 80027b6:	2300      	movs	r3, #0
 80027b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ba:	f7ff f86b 	bl	8001894 <HAL_GetTick>
 80027be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c2:	e00a      	b.n	80027da <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c4:	f7ff f866 	bl	8001894 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d902      	bls.n	80027da <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	f000 bc50 	b.w	800307a <HAL_RCC_OscConfig+0xe02>
 80027da:	2302      	movs	r3, #2
 80027dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80027ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f0:	fab3 f383 	clz	r3, r3
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b01      	cmp	r3, #1
 8002802:	d102      	bne.n	800280a <HAL_RCC_OscConfig+0x592>
 8002804:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_RCC_OscConfig+0x650>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	e013      	b.n	8002832 <HAL_RCC_OscConfig+0x5ba>
 800280a:	2302      	movs	r3, #2
 800280c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800281c:	2302      	movs	r3, #2
 800281e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002822:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800282e:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <HAL_RCC_OscConfig+0x650>)
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	2202      	movs	r2, #2
 8002834:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002838:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800283c:	fa92 f2a2 	rbit	r2, r2
 8002840:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002844:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002848:	fab2 f282 	clz	r2, r2
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	f042 0220 	orr.w	r2, r2, #32
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	f002 021f 	and.w	r2, r2, #31
 8002858:	2101      	movs	r1, #1
 800285a:	fa01 f202 	lsl.w	r2, r1, r2
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1af      	bne.n	80027c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 80da 	beq.w	8002a28 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002874:	1d3b      	adds	r3, r7, #4
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d069      	beq.n	8002952 <HAL_RCC_OscConfig+0x6da>
 800287e:	2301      	movs	r3, #1
 8002880:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_OscConfig+0x654>)
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	461a      	mov	r2, r3
 80028a4:	2301      	movs	r3, #1
 80028a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a8:	f7fe fff4 	bl	8001894 <HAL_GetTick>
 80028ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b0:	e00e      	b.n	80028d0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b2:	f7fe ffef 	bl	8001894 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d906      	bls.n	80028d0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e3d9      	b.n	800307a <HAL_RCC_OscConfig+0xe02>
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	10908120 	.word	0x10908120
 80028d0:	2302      	movs	r3, #2
 80028d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028e2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80028e6:	2202      	movs	r2, #2
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	fa93 f2a3 	rbit	r2, r3
 80028f4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80028fe:	2202      	movs	r2, #2
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	fa93 f2a3 	rbit	r2, r3
 800290c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002910:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002912:	4ba5      	ldr	r3, [pc, #660]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002916:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800291a:	2102      	movs	r1, #2
 800291c:	6019      	str	r1, [r3, #0]
 800291e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	fa93 f1a3 	rbit	r1, r3
 8002928:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800292c:	6019      	str	r1, [r3, #0]
  return result;
 800292e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f003 031f 	and.w	r3, r3, #31
 8002944:	2101      	movs	r1, #1
 8002946:	fa01 f303 	lsl.w	r3, r1, r3
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0b0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x63a>
 8002950:	e06a      	b.n	8002a28 <HAL_RCC_OscConfig+0x7b0>
 8002952:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	fa93 f2a3 	rbit	r2, r3
 8002964:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002968:	601a      	str	r2, [r3, #0]
  return result;
 800296a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800296e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	4b8c      	ldr	r3, [pc, #560]	; (8002bac <HAL_RCC_OscConfig+0x934>)
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	461a      	mov	r2, r3
 8002980:	2300      	movs	r3, #0
 8002982:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002984:	f7fe ff86 	bl	8001894 <HAL_GetTick>
 8002988:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298c:	e009      	b.n	80029a2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298e:	f7fe ff81 	bl	8001894 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e36b      	b.n	800307a <HAL_RCC_OscConfig+0xe02>
 80029a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80029a6:	2202      	movs	r2, #2
 80029a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	fa93 f2a3 	rbit	r2, r3
 80029b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80029be:	2202      	movs	r2, #2
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	fa93 f2a3 	rbit	r2, r3
 80029cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029d6:	2202      	movs	r2, #2
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	fa93 f2a3 	rbit	r2, r3
 80029e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ea:	4b6f      	ldr	r3, [pc, #444]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 80029ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029f2:	2102      	movs	r1, #2
 80029f4:	6019      	str	r1, [r3, #0]
 80029f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	fa93 f1a3 	rbit	r1, r3
 8002a00:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a04:	6019      	str	r1, [r3, #0]
  return result;
 8002a06:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	fab3 f383 	clz	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1b2      	bne.n	800298e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8158 	beq.w	8002ce8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3e:	4b5a      	ldr	r3, [pc, #360]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d112      	bne.n	8002a70 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4a:	4b57      	ldr	r3, [pc, #348]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	4a56      	ldr	r2, [pc, #344]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a54:	61d3      	str	r3, [r2, #28]
 8002a56:	4b54      	ldr	r3, [pc, #336]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a5e:	f107 0308 	add.w	r3, r7, #8
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	f107 0308 	add.w	r3, r7, #8
 8002a68:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	4b4f      	ldr	r3, [pc, #316]	; (8002bb0 <HAL_RCC_OscConfig+0x938>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d11a      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7c:	4b4c      	ldr	r3, [pc, #304]	; (8002bb0 <HAL_RCC_OscConfig+0x938>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a4b      	ldr	r2, [pc, #300]	; (8002bb0 <HAL_RCC_OscConfig+0x938>)
 8002a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a86:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a88:	f7fe ff04 	bl	8001894 <HAL_GetTick>
 8002a8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a90:	e009      	b.n	8002aa6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a92:	f7fe feff 	bl	8001894 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e2e9      	b.n	800307a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa6:	4b42      	ldr	r3, [pc, #264]	; (8002bb0 <HAL_RCC_OscConfig+0x938>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0ef      	beq.n	8002a92 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab2:	1d3b      	adds	r3, r7, #4
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d106      	bne.n	8002aca <HAL_RCC_OscConfig+0x852>
 8002abc:	4b3a      	ldr	r3, [pc, #232]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	4a39      	ldr	r2, [pc, #228]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6213      	str	r3, [r2, #32]
 8002ac8:	e02f      	b.n	8002b2a <HAL_RCC_OscConfig+0x8b2>
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10c      	bne.n	8002aee <HAL_RCC_OscConfig+0x876>
 8002ad4:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4a33      	ldr	r2, [pc, #204]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	6213      	str	r3, [r2, #32]
 8002ae0:	4b31      	ldr	r3, [pc, #196]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4a30      	ldr	r2, [pc, #192]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002ae6:	f023 0304 	bic.w	r3, r3, #4
 8002aea:	6213      	str	r3, [r2, #32]
 8002aec:	e01d      	b.n	8002b2a <HAL_RCC_OscConfig+0x8b2>
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d10c      	bne.n	8002b12 <HAL_RCC_OscConfig+0x89a>
 8002af8:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4a2a      	ldr	r2, [pc, #168]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002afe:	f043 0304 	orr.w	r3, r3, #4
 8002b02:	6213      	str	r3, [r2, #32]
 8002b04:	4b28      	ldr	r3, [pc, #160]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4a27      	ldr	r2, [pc, #156]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6213      	str	r3, [r2, #32]
 8002b10:	e00b      	b.n	8002b2a <HAL_RCC_OscConfig+0x8b2>
 8002b12:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4a24      	ldr	r2, [pc, #144]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	6213      	str	r3, [r2, #32]
 8002b1e:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	4a21      	ldr	r2, [pc, #132]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002b24:	f023 0304 	bic.w	r3, r3, #4
 8002b28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d06b      	beq.n	8002c0c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b34:	f7fe feae 	bl	8001894 <HAL_GetTick>
 8002b38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3c:	e00b      	b.n	8002b56 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7fe fea9 	bl	8001894 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e291      	b.n	800307a <HAL_RCC_OscConfig+0xe02>
 8002b56:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	fa93 f2a3 	rbit	r2, r3
 8002b68:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b72:	2202      	movs	r2, #2
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	fa93 f2a3 	rbit	r2, r3
 8002b80:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b84:	601a      	str	r2, [r3, #0]
  return result;
 8002b86:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b8a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	f043 0302 	orr.w	r3, r3, #2
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d109      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x93c>
 8002ba0:	4b01      	ldr	r3, [pc, #4]	; (8002ba8 <HAL_RCC_OscConfig+0x930>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	e014      	b.n	8002bd0 <HAL_RCC_OscConfig+0x958>
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	10908120 	.word	0x10908120
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002bb8:	2202      	movs	r2, #2
 8002bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	fa93 f2a3 	rbit	r2, r3
 8002bc6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	4bbb      	ldr	r3, [pc, #748]	; (8002ebc <HAL_RCC_OscConfig+0xc44>)
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002bd4:	2102      	movs	r1, #2
 8002bd6:	6011      	str	r1, [r2, #0]
 8002bd8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	fa92 f1a2 	rbit	r1, r2
 8002be2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002be6:	6011      	str	r1, [r2, #0]
  return result;
 8002be8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	fab2 f282 	clz	r2, r2
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	f002 021f 	and.w	r2, r2, #31
 8002bfe:	2101      	movs	r1, #1
 8002c00:	fa01 f202 	lsl.w	r2, r1, r2
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d099      	beq.n	8002b3e <HAL_RCC_OscConfig+0x8c6>
 8002c0a:	e063      	b.n	8002cd4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0c:	f7fe fe42 	bl	8001894 <HAL_GetTick>
 8002c10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c14:	e00b      	b.n	8002c2e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c16:	f7fe fe3d 	bl	8001894 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e225      	b.n	800307a <HAL_RCC_OscConfig+0xe02>
 8002c2e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c32:	2202      	movs	r2, #2
 8002c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	fa93 f2a3 	rbit	r2, r3
 8002c40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	fa93 f2a3 	rbit	r2, r3
 8002c58:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c5c:	601a      	str	r2, [r3, #0]
  return result;
 8002c5e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f043 0302 	orr.w	r3, r3, #2
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d102      	bne.n	8002c7e <HAL_RCC_OscConfig+0xa06>
 8002c78:	4b90      	ldr	r3, [pc, #576]	; (8002ebc <HAL_RCC_OscConfig+0xc44>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	e00d      	b.n	8002c9a <HAL_RCC_OscConfig+0xa22>
 8002c7e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c82:	2202      	movs	r2, #2
 8002c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	fa93 f2a3 	rbit	r2, r3
 8002c90:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	4b89      	ldr	r3, [pc, #548]	; (8002ebc <HAL_RCC_OscConfig+0xc44>)
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c9e:	2102      	movs	r1, #2
 8002ca0:	6011      	str	r1, [r2, #0]
 8002ca2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	fa92 f1a2 	rbit	r1, r2
 8002cac:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002cb0:	6011      	str	r1, [r2, #0]
  return result;
 8002cb2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	fab2 f282 	clz	r2, r2
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	f002 021f 	and.w	r2, r2, #31
 8002cc8:	2101      	movs	r1, #1
 8002cca:	fa01 f202 	lsl.w	r2, r1, r2
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1a0      	bne.n	8002c16 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cd4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d105      	bne.n	8002ce8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cdc:	4b77      	ldr	r3, [pc, #476]	; (8002ebc <HAL_RCC_OscConfig+0xc44>)
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	4a76      	ldr	r2, [pc, #472]	; (8002ebc <HAL_RCC_OscConfig+0xc44>)
 8002ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 81c2 	beq.w	8003078 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf4:	4b71      	ldr	r3, [pc, #452]	; (8002ebc <HAL_RCC_OscConfig+0xc44>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	f000 819c 	beq.w	800303a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d02:	1d3b      	adds	r3, r7, #4
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	f040 8114 	bne.w	8002f36 <HAL_RCC_OscConfig+0xcbe>
 8002d0e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	fa93 f2a3 	rbit	r2, r3
 8002d22:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d26:	601a      	str	r2, [r3, #0]
  return result;
 8002d28:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d2c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2e:	fab3 f383 	clz	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2300      	movs	r3, #0
 8002d42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe fda6 	bl	8001894 <HAL_GetTick>
 8002d48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d4c:	e009      	b.n	8002d62 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7fe fda1 	bl	8001894 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e18b      	b.n	800307a <HAL_RCC_OscConfig+0xe02>
 8002d62:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	fa93 f2a3 	rbit	r2, r3
 8002d76:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d7a:	601a      	str	r2, [r3, #0]
  return result;
 8002d7c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d102      	bne.n	8002d9c <HAL_RCC_OscConfig+0xb24>
 8002d96:	4b49      	ldr	r3, [pc, #292]	; (8002ebc <HAL_RCC_OscConfig+0xc44>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	e01b      	b.n	8002dd4 <HAL_RCC_OscConfig+0xb5c>
 8002d9c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	fa93 f2a3 	rbit	r2, r3
 8002db0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002dba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	fa93 f2a3 	rbit	r2, r3
 8002dca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	4b3a      	ldr	r3, [pc, #232]	; (8002ebc <HAL_RCC_OscConfig+0xc44>)
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002dd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ddc:	6011      	str	r1, [r2, #0]
 8002dde:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	fa92 f1a2 	rbit	r1, r2
 8002de8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002dec:	6011      	str	r1, [r2, #0]
  return result;
 8002dee:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	fab2 f282 	clz	r2, r2
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	f042 0220 	orr.w	r2, r2, #32
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	f002 021f 	and.w	r2, r2, #31
 8002e04:	2101      	movs	r1, #1
 8002e06:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d19e      	bne.n	8002d4e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e10:	4b2a      	ldr	r3, [pc, #168]	; (8002ebc <HAL_RCC_OscConfig+0xc44>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e18:	1d3b      	adds	r3, r7, #4
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	4925      	ldr	r1, [pc, #148]	; (8002ebc <HAL_RCC_OscConfig+0xc44>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]
 8002e2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	fa93 f2a3 	rbit	r2, r3
 8002e40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e44:	601a      	str	r2, [r3, #0]
  return result;
 8002e46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e4a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e4c:	fab3 f383 	clz	r3, r3
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2301      	movs	r3, #1
 8002e60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7fe fd17 	bl	8001894 <HAL_GetTick>
 8002e66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e6a:	e009      	b.n	8002e80 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7fe fd12 	bl	8001894 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e0fc      	b.n	800307a <HAL_RCC_OscConfig+0xe02>
 8002e80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	fa93 f2a3 	rbit	r2, r3
 8002e94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e98:	601a      	str	r2, [r3, #0]
  return result;
 8002e9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d105      	bne.n	8002ec0 <HAL_RCC_OscConfig+0xc48>
 8002eb4:	4b01      	ldr	r3, [pc, #4]	; (8002ebc <HAL_RCC_OscConfig+0xc44>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	e01e      	b.n	8002ef8 <HAL_RCC_OscConfig+0xc80>
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	fa93 f2a3 	rbit	r2, r3
 8002ed4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ede:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	fa93 f2a3 	rbit	r2, r3
 8002eee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	4b63      	ldr	r3, [pc, #396]	; (8003084 <HAL_RCC_OscConfig+0xe0c>)
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002efc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f00:	6011      	str	r1, [r2, #0]
 8002f02:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	fa92 f1a2 	rbit	r1, r2
 8002f0c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002f10:	6011      	str	r1, [r2, #0]
  return result;
 8002f12:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	fab2 f282 	clz	r2, r2
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	f042 0220 	orr.w	r2, r2, #32
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	f002 021f 	and.w	r2, r2, #31
 8002f28:	2101      	movs	r1, #1
 8002f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d09b      	beq.n	8002e6c <HAL_RCC_OscConfig+0xbf4>
 8002f34:	e0a0      	b.n	8003078 <HAL_RCC_OscConfig+0xe00>
 8002f36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	fa93 f2a3 	rbit	r2, r3
 8002f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f4e:	601a      	str	r2, [r3, #0]
  return result;
 8002f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f54:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	461a      	mov	r2, r3
 8002f68:	2300      	movs	r3, #0
 8002f6a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fc92 	bl	8001894 <HAL_GetTick>
 8002f70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f74:	e009      	b.n	8002f8a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f76:	f7fe fc8d 	bl	8001894 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e077      	b.n	800307a <HAL_RCC_OscConfig+0xe02>
 8002f8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	fa93 f2a3 	rbit	r2, r3
 8002f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fa2:	601a      	str	r2, [r3, #0]
  return result;
 8002fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fa8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	095b      	lsrs	r3, r3, #5
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d102      	bne.n	8002fc4 <HAL_RCC_OscConfig+0xd4c>
 8002fbe:	4b31      	ldr	r3, [pc, #196]	; (8003084 <HAL_RCC_OscConfig+0xe0c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	e01b      	b.n	8002ffc <HAL_RCC_OscConfig+0xd84>
 8002fc4:	f107 0320 	add.w	r3, r7, #32
 8002fc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f107 0320 	add.w	r3, r7, #32
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	fa93 f2a3 	rbit	r2, r3
 8002fd8:	f107 031c 	add.w	r3, r7, #28
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f107 0318 	add.w	r3, r7, #24
 8002fe2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	f107 0318 	add.w	r3, r7, #24
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	fa93 f2a3 	rbit	r2, r3
 8002ff2:	f107 0314 	add.w	r3, r7, #20
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	4b22      	ldr	r3, [pc, #136]	; (8003084 <HAL_RCC_OscConfig+0xe0c>)
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	f107 0210 	add.w	r2, r7, #16
 8003000:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003004:	6011      	str	r1, [r2, #0]
 8003006:	f107 0210 	add.w	r2, r7, #16
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	fa92 f1a2 	rbit	r1, r2
 8003010:	f107 020c 	add.w	r2, r7, #12
 8003014:	6011      	str	r1, [r2, #0]
  return result;
 8003016:	f107 020c 	add.w	r2, r7, #12
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	fab2 f282 	clz	r2, r2
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	f042 0220 	orr.w	r2, r2, #32
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	f002 021f 	and.w	r2, r2, #31
 800302c:	2101      	movs	r1, #1
 800302e:	fa01 f202 	lsl.w	r2, r1, r2
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d19e      	bne.n	8002f76 <HAL_RCC_OscConfig+0xcfe>
 8003038:	e01e      	b.n	8003078 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303a:	1d3b      	adds	r3, r7, #4
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e018      	b.n	800307a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003048:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <HAL_RCC_OscConfig+0xe0c>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003050:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003054:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003058:	1d3b      	adds	r3, r7, #4
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	429a      	cmp	r2, r3
 8003060:	d108      	bne.n	8003074 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003062:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003066:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800306a:	1d3b      	adds	r3, r7, #4
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40021000 	.word	0x40021000

08003088 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b09e      	sub	sp, #120	; 0x78
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e162      	b.n	8003366 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a0:	4b90      	ldr	r3, [pc, #576]	; (80032e4 <HAL_RCC_ClockConfig+0x25c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d910      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b8d      	ldr	r3, [pc, #564]	; (80032e4 <HAL_RCC_ClockConfig+0x25c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 0207 	bic.w	r2, r3, #7
 80030b6:	498b      	ldr	r1, [pc, #556]	; (80032e4 <HAL_RCC_ClockConfig+0x25c>)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b89      	ldr	r3, [pc, #548]	; (80032e4 <HAL_RCC_ClockConfig+0x25c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e14a      	b.n	8003366 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030dc:	4b82      	ldr	r3, [pc, #520]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	497f      	ldr	r1, [pc, #508]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 80dc 	beq.w	80032b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d13c      	bne.n	800317e <HAL_RCC_ClockConfig+0xf6>
 8003104:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003108:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800310c:	fa93 f3a3 	rbit	r3, r3
 8003110:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003114:	fab3 f383 	clz	r3, r3
 8003118:	b2db      	uxtb	r3, r3
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d102      	bne.n	800312e <HAL_RCC_ClockConfig+0xa6>
 8003128:	4b6f      	ldr	r3, [pc, #444]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	e00f      	b.n	800314e <HAL_RCC_ClockConfig+0xc6>
 800312e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003132:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	667b      	str	r3, [r7, #100]	; 0x64
 800313c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003140:	663b      	str	r3, [r7, #96]	; 0x60
 8003142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	65fb      	str	r3, [r7, #92]	; 0x5c
 800314a:	4b67      	ldr	r3, [pc, #412]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003152:	65ba      	str	r2, [r7, #88]	; 0x58
 8003154:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003156:	fa92 f2a2 	rbit	r2, r2
 800315a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800315c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800315e:	fab2 f282 	clz	r2, r2
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	f042 0220 	orr.w	r2, r2, #32
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	f002 021f 	and.w	r2, r2, #31
 800316e:	2101      	movs	r1, #1
 8003170:	fa01 f202 	lsl.w	r2, r1, r2
 8003174:	4013      	ands	r3, r2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d17b      	bne.n	8003272 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e0f3      	b.n	8003366 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d13c      	bne.n	8003200 <HAL_RCC_ClockConfig+0x178>
 8003186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800318a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003196:	fab3 f383 	clz	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d102      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x128>
 80031aa:	4b4f      	ldr	r3, [pc, #316]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	e00f      	b.n	80031d0 <HAL_RCC_ClockConfig+0x148>
 80031b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	647b      	str	r3, [r7, #68]	; 0x44
 80031be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031c2:	643b      	str	r3, [r7, #64]	; 0x40
 80031c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c6:	fa93 f3a3 	rbit	r3, r3
 80031ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031cc:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80031d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031d8:	fa92 f2a2 	rbit	r2, r2
 80031dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031e0:	fab2 f282 	clz	r2, r2
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	f042 0220 	orr.w	r2, r2, #32
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	f002 021f 	and.w	r2, r2, #31
 80031f0:	2101      	movs	r1, #1
 80031f2:	fa01 f202 	lsl.w	r2, r1, r2
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d13a      	bne.n	8003272 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0b2      	b.n	8003366 <HAL_RCC_ClockConfig+0x2de>
 8003200:	2302      	movs	r3, #2
 8003202:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320e:	fab3 f383 	clz	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	b2db      	uxtb	r3, r3
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b01      	cmp	r3, #1
 8003220:	d102      	bne.n	8003228 <HAL_RCC_ClockConfig+0x1a0>
 8003222:	4b31      	ldr	r3, [pc, #196]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	e00d      	b.n	8003244 <HAL_RCC_ClockConfig+0x1bc>
 8003228:	2302      	movs	r3, #2
 800322a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
 8003234:	2302      	movs	r3, #2
 8003236:	623b      	str	r3, [r7, #32]
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	4b29      	ldr	r3, [pc, #164]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	2202      	movs	r2, #2
 8003246:	61ba      	str	r2, [r7, #24]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	fa92 f2a2 	rbit	r2, r2
 800324e:	617a      	str	r2, [r7, #20]
  return result;
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	fab2 f282 	clz	r2, r2
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	f042 0220 	orr.w	r2, r2, #32
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	f002 021f 	and.w	r2, r2, #31
 8003262:	2101      	movs	r1, #1
 8003264:	fa01 f202 	lsl.w	r2, r1, r2
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e079      	b.n	8003366 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003272:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f023 0203 	bic.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	491a      	ldr	r1, [pc, #104]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003284:	f7fe fb06 	bl	8001894 <HAL_GetTick>
 8003288:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328c:	f7fe fb02 	bl	8001894 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e061      	b.n	8003366 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <HAL_RCC_ClockConfig+0x260>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 020c 	and.w	r2, r3, #12
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d1eb      	bne.n	800328c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_ClockConfig+0x25c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d214      	bcs.n	80032ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <HAL_RCC_ClockConfig+0x25c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f023 0207 	bic.w	r2, r3, #7
 80032ca:	4906      	ldr	r1, [pc, #24]	; (80032e4 <HAL_RCC_ClockConfig+0x25c>)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <HAL_RCC_ClockConfig+0x25c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d005      	beq.n	80032ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e040      	b.n	8003366 <HAL_RCC_ClockConfig+0x2de>
 80032e4:	40022000 	.word	0x40022000
 80032e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032f8:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_RCC_ClockConfig+0x2e8>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	491a      	ldr	r1, [pc, #104]	; (8003370 <HAL_RCC_ClockConfig+0x2e8>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d009      	beq.n	800332a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003316:	4b16      	ldr	r3, [pc, #88]	; (8003370 <HAL_RCC_ClockConfig+0x2e8>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4912      	ldr	r1, [pc, #72]	; (8003370 <HAL_RCC_ClockConfig+0x2e8>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800332a:	f000 f829 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 800332e:	4601      	mov	r1, r0
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <HAL_RCC_ClockConfig+0x2e8>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003338:	22f0      	movs	r2, #240	; 0xf0
 800333a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	fa92 f2a2 	rbit	r2, r2
 8003342:	60fa      	str	r2, [r7, #12]
  return result;
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	fab2 f282 	clz	r2, r2
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	40d3      	lsrs	r3, r2
 800334e:	4a09      	ldr	r2, [pc, #36]	; (8003374 <HAL_RCC_ClockConfig+0x2ec>)
 8003350:	5cd3      	ldrb	r3, [r2, r3]
 8003352:	fa21 f303 	lsr.w	r3, r1, r3
 8003356:	4a08      	ldr	r2, [pc, #32]	; (8003378 <HAL_RCC_ClockConfig+0x2f0>)
 8003358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800335a:	4b08      	ldr	r3, [pc, #32]	; (800337c <HAL_RCC_ClockConfig+0x2f4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe fa54 	bl	800180c <HAL_InitTick>
  
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3778      	adds	r7, #120	; 0x78
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	08005728 	.word	0x08005728
 8003378:	20000000 	.word	0x20000000
 800337c:	20000004 	.word	0x20000004

08003380 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003380:	b480      	push	{r7}
 8003382:	b08b      	sub	sp, #44	; 0x2c
 8003384:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800339a:	4b29      	ldr	r3, [pc, #164]	; (8003440 <HAL_RCC_GetSysClockFreq+0xc0>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d002      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x30>
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d003      	beq.n	80033b6 <HAL_RCC_GetSysClockFreq+0x36>
 80033ae:	e03c      	b.n	800342a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033b2:	623b      	str	r3, [r7, #32]
      break;
 80033b4:	e03c      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033bc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80033c0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	fa92 f2a2 	rbit	r2, r2
 80033c8:	607a      	str	r2, [r7, #4]
  return result;
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	fab2 f282 	clz	r2, r2
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	40d3      	lsrs	r3, r2
 80033d4:	4a1c      	ldr	r2, [pc, #112]	; (8003448 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033da:	4b19      	ldr	r3, [pc, #100]	; (8003440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	220f      	movs	r2, #15
 80033e4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	fa92 f2a2 	rbit	r2, r2
 80033ec:	60fa      	str	r2, [r7, #12]
  return result;
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	fab2 f282 	clz	r2, r2
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	40d3      	lsrs	r3, r2
 80033f8:	4a14      	ldr	r2, [pc, #80]	; (800344c <HAL_RCC_GetSysClockFreq+0xcc>)
 80033fa:	5cd3      	ldrb	r3, [r2, r3]
 80033fc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003408:	4a0e      	ldr	r2, [pc, #56]	; (8003444 <HAL_RCC_GetSysClockFreq+0xc4>)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
 8003418:	e004      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	4a0c      	ldr	r2, [pc, #48]	; (8003450 <HAL_RCC_GetSysClockFreq+0xd0>)
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	623b      	str	r3, [r7, #32]
      break;
 8003428:	e002      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_RCC_GetSysClockFreq+0xc4>)
 800342c:	623b      	str	r3, [r7, #32]
      break;
 800342e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003430:	6a3b      	ldr	r3, [r7, #32]
}
 8003432:	4618      	mov	r0, r3
 8003434:	372c      	adds	r7, #44	; 0x2c
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	007a1200 	.word	0x007a1200
 8003448:	08005740 	.word	0x08005740
 800344c:	08005750 	.word	0x08005750
 8003450:	003d0900 	.word	0x003d0900

08003454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003458:	4b03      	ldr	r3, [pc, #12]	; (8003468 <HAL_RCC_GetHCLKFreq+0x14>)
 800345a:	681b      	ldr	r3, [r3, #0]
}
 800345c:	4618      	mov	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	20000000 	.word	0x20000000

0800346c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003472:	f7ff ffef 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003476:	4601      	mov	r1, r0
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003480:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003484:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	fa92 f2a2 	rbit	r2, r2
 800348c:	603a      	str	r2, [r7, #0]
  return result;
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	fab2 f282 	clz	r2, r2
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	40d3      	lsrs	r3, r2
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <HAL_RCC_GetPCLK1Freq+0x40>)
 800349a:	5cd3      	ldrb	r3, [r2, r3]
 800349c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40021000 	.word	0x40021000
 80034ac:	08005738 	.word	0x08005738

080034b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034b6:	f7ff ffcd 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 80034ba:	4601      	mov	r1, r0
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCC_GetPCLK2Freq+0x3c>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80034c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80034c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	fa92 f2a2 	rbit	r2, r2
 80034d0:	603a      	str	r2, [r7, #0]
  return result;
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	fab2 f282 	clz	r2, r2
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	40d3      	lsrs	r3, r2
 80034dc:	4a04      	ldr	r2, [pc, #16]	; (80034f0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80034de:	5cd3      	ldrb	r3, [r2, r3]
 80034e0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40021000 	.word	0x40021000
 80034f0:	08005738 	.word	0x08005738

080034f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b092      	sub	sp, #72	; 0x48
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003504:	2300      	movs	r3, #0
 8003506:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 80d4 	beq.w	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003518:	4b4e      	ldr	r3, [pc, #312]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10e      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003524:	4b4b      	ldr	r3, [pc, #300]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	4a4a      	ldr	r2, [pc, #296]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800352e:	61d3      	str	r3, [r2, #28]
 8003530:	4b48      	ldr	r3, [pc, #288]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353c:	2301      	movs	r3, #1
 800353e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003542:	4b45      	ldr	r3, [pc, #276]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d118      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354e:	4b42      	ldr	r3, [pc, #264]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a41      	ldr	r2, [pc, #260]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003558:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355a:	f7fe f99b 	bl	8001894 <HAL_GetTick>
 800355e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	e008      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003562:	f7fe f997 	bl	8001894 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b64      	cmp	r3, #100	; 0x64
 800356e:	d901      	bls.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e14b      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	4b38      	ldr	r3, [pc, #224]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003580:	4b34      	ldr	r3, [pc, #208]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003588:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800358a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8084 	beq.w	800369a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800359c:	429a      	cmp	r2, r3
 800359e:	d07c      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035a0:	4b2c      	ldr	r3, [pc, #176]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	4b26      	ldr	r3, [pc, #152]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	461a      	mov	r2, r3
 80035ca:	2301      	movs	r3, #1
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d6:	fa93 f3a3 	rbit	r3, r3
 80035da:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035de:	fab3 f383 	clz	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	4b1d      	ldr	r3, [pc, #116]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	461a      	mov	r2, r3
 80035ee:	2300      	movs	r3, #0
 80035f0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035f2:	4a18      	ldr	r2, [pc, #96]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d04b      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003602:	f7fe f947 	bl	8001894 <HAL_GetTick>
 8003606:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003608:	e00a      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360a:	f7fe f943 	bl	8001894 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f241 3288 	movw	r2, #5000	; 0x1388
 8003618:	4293      	cmp	r3, r2
 800361a:	d901      	bls.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e0f5      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003620:	2302      	movs	r3, #2
 8003622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
 800362c:	2302      	movs	r3, #2
 800362e:	623b      	str	r3, [r7, #32]
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	fa93 f3a3 	rbit	r3, r3
 8003636:	61fb      	str	r3, [r7, #28]
  return result;
 8003638:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363a:	fab3 f383 	clz	r3, r3
 800363e:	b2db      	uxtb	r3, r3
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	b2db      	uxtb	r3, r3
 8003644:	f043 0302 	orr.w	r3, r3, #2
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d108      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800364e:	4b01      	ldr	r3, [pc, #4]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	e00d      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003654:	40021000 	.word	0x40021000
 8003658:	40007000 	.word	0x40007000
 800365c:	10908100 	.word	0x10908100
 8003660:	2302      	movs	r3, #2
 8003662:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	4b69      	ldr	r3, [pc, #420]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	2202      	movs	r2, #2
 8003672:	613a      	str	r2, [r7, #16]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	fa92 f2a2 	rbit	r2, r2
 800367a:	60fa      	str	r2, [r7, #12]
  return result;
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	fab2 f282 	clz	r2, r2
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	f002 021f 	and.w	r2, r2, #31
 800368e:	2101      	movs	r1, #1
 8003690:	fa01 f202 	lsl.w	r2, r1, r2
 8003694:	4013      	ands	r3, r2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0b7      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800369a:	4b5e      	ldr	r3, [pc, #376]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	495b      	ldr	r1, [pc, #364]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d105      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b4:	4b57      	ldr	r3, [pc, #348]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	4a56      	ldr	r2, [pc, #344]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036cc:	4b51      	ldr	r3, [pc, #324]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	f023 0203 	bic.w	r2, r3, #3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	494e      	ldr	r1, [pc, #312]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d008      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ea:	4b4a      	ldr	r3, [pc, #296]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f023 0210 	bic.w	r2, r3, #16
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	4947      	ldr	r1, [pc, #284]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003708:	4b42      	ldr	r3, [pc, #264]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	493f      	ldr	r1, [pc, #252]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003716:	4313      	orrs	r3, r2
 8003718:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003726:	4b3b      	ldr	r3, [pc, #236]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	f023 0220 	bic.w	r2, r3, #32
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	4938      	ldr	r1, [pc, #224]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003734:	4313      	orrs	r3, r2
 8003736:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003744:	4b33      	ldr	r3, [pc, #204]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	4930      	ldr	r1, [pc, #192]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003752:	4313      	orrs	r3, r2
 8003754:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800375e:	2b00      	cmp	r3, #0
 8003760:	d008      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003762:	4b2c      	ldr	r3, [pc, #176]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	4929      	ldr	r1, [pc, #164]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003780:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	4921      	ldr	r1, [pc, #132]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800378e:	4313      	orrs	r3, r2
 8003790:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d008      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800379e:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	491a      	ldr	r1, [pc, #104]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80037bc:	4b15      	ldr	r3, [pc, #84]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	4912      	ldr	r1, [pc, #72]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d008      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80037da:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	490b      	ldr	r1, [pc, #44]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	4903      	ldr	r1, [pc, #12]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003806:	4313      	orrs	r3, r2
 8003808:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3748      	adds	r7, #72	; 0x48
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40021000 	.word	0x40021000

08003818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e049      	b.n	80038be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fd fdce 	bl	80013e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3304      	adds	r3, #4
 8003854:	4619      	mov	r1, r3
 8003856:	4610      	mov	r0, r2
 8003858:	f000 fb9e 	bl	8003f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d001      	beq.n	80038e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e033      	b.n	8003948 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a19      	ldr	r2, [pc, #100]	; (8003954 <HAL_TIM_Base_Start+0x8c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d009      	beq.n	8003906 <HAL_TIM_Base_Start+0x3e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fa:	d004      	beq.n	8003906 <HAL_TIM_Base_Start+0x3e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a15      	ldr	r2, [pc, #84]	; (8003958 <HAL_TIM_Base_Start+0x90>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d115      	bne.n	8003932 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	4b13      	ldr	r3, [pc, #76]	; (800395c <HAL_TIM_Base_Start+0x94>)
 800390e:	4013      	ands	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b06      	cmp	r3, #6
 8003916:	d015      	beq.n	8003944 <HAL_TIM_Base_Start+0x7c>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391e:	d011      	beq.n	8003944 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003930:	e008      	b.n	8003944 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0201 	orr.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	e000      	b.n	8003946 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003944:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	40012c00 	.word	0x40012c00
 8003958:	40014000 	.word	0x40014000
 800395c:	00010007 	.word	0x00010007

08003960 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e049      	b.n	8003a06 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fd0a 	bl	80013a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3304      	adds	r3, #4
 800399c:	4619      	mov	r1, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f000 fafa 	bl	8003f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d109      	bne.n	8003a34 <HAL_TIM_PWM_Start+0x24>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e03c      	b.n	8003aae <HAL_TIM_PWM_Start+0x9e>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d109      	bne.n	8003a4e <HAL_TIM_PWM_Start+0x3e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	bf14      	ite	ne
 8003a46:	2301      	movne	r3, #1
 8003a48:	2300      	moveq	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	e02f      	b.n	8003aae <HAL_TIM_PWM_Start+0x9e>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d109      	bne.n	8003a68 <HAL_TIM_PWM_Start+0x58>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	bf14      	ite	ne
 8003a60:	2301      	movne	r3, #1
 8003a62:	2300      	moveq	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	e022      	b.n	8003aae <HAL_TIM_PWM_Start+0x9e>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2b0c      	cmp	r3, #12
 8003a6c:	d109      	bne.n	8003a82 <HAL_TIM_PWM_Start+0x72>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	bf14      	ite	ne
 8003a7a:	2301      	movne	r3, #1
 8003a7c:	2300      	moveq	r3, #0
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	e015      	b.n	8003aae <HAL_TIM_PWM_Start+0x9e>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d109      	bne.n	8003a9c <HAL_TIM_PWM_Start+0x8c>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	bf14      	ite	ne
 8003a94:	2301      	movne	r3, #1
 8003a96:	2300      	moveq	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	e008      	b.n	8003aae <HAL_TIM_PWM_Start+0x9e>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e083      	b.n	8003bbe <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <HAL_TIM_PWM_Start+0xb6>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac4:	e023      	b.n	8003b0e <HAL_TIM_PWM_Start+0xfe>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d104      	bne.n	8003ad6 <HAL_TIM_PWM_Start+0xc6>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad4:	e01b      	b.n	8003b0e <HAL_TIM_PWM_Start+0xfe>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d104      	bne.n	8003ae6 <HAL_TIM_PWM_Start+0xd6>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae4:	e013      	b.n	8003b0e <HAL_TIM_PWM_Start+0xfe>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b0c      	cmp	r3, #12
 8003aea:	d104      	bne.n	8003af6 <HAL_TIM_PWM_Start+0xe6>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003af4:	e00b      	b.n	8003b0e <HAL_TIM_PWM_Start+0xfe>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d104      	bne.n	8003b06 <HAL_TIM_PWM_Start+0xf6>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b04:	e003      	b.n	8003b0e <HAL_TIM_PWM_Start+0xfe>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2201      	movs	r2, #1
 8003b14:	6839      	ldr	r1, [r7, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fdec 	bl	80046f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a29      	ldr	r2, [pc, #164]	; (8003bc8 <HAL_TIM_PWM_Start+0x1b8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00e      	beq.n	8003b44 <HAL_TIM_PWM_Start+0x134>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a28      	ldr	r2, [pc, #160]	; (8003bcc <HAL_TIM_PWM_Start+0x1bc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d009      	beq.n	8003b44 <HAL_TIM_PWM_Start+0x134>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <HAL_TIM_PWM_Start+0x1c0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d004      	beq.n	8003b44 <HAL_TIM_PWM_Start+0x134>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a25      	ldr	r2, [pc, #148]	; (8003bd4 <HAL_TIM_PWM_Start+0x1c4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d101      	bne.n	8003b48 <HAL_TIM_PWM_Start+0x138>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <HAL_TIM_PWM_Start+0x13a>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a19      	ldr	r2, [pc, #100]	; (8003bc8 <HAL_TIM_PWM_Start+0x1b8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d009      	beq.n	8003b7c <HAL_TIM_PWM_Start+0x16c>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b70:	d004      	beq.n	8003b7c <HAL_TIM_PWM_Start+0x16c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <HAL_TIM_PWM_Start+0x1bc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d115      	bne.n	8003ba8 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <HAL_TIM_PWM_Start+0x1c8>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b06      	cmp	r3, #6
 8003b8c:	d015      	beq.n	8003bba <HAL_TIM_PWM_Start+0x1aa>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b94:	d011      	beq.n	8003bba <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0201 	orr.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba6:	e008      	b.n	8003bba <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	e000      	b.n	8003bbc <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40012c00 	.word	0x40012c00
 8003bcc:	40014000 	.word	0x40014000
 8003bd0:	40014400 	.word	0x40014400
 8003bd4:	40014800 	.word	0x40014800
 8003bd8:	00010007 	.word	0x00010007

08003bdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d101      	bne.n	8003bfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e0ff      	b.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b14      	cmp	r3, #20
 8003c06:	f200 80f0 	bhi.w	8003dea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c0a:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c10:	08003c65 	.word	0x08003c65
 8003c14:	08003deb 	.word	0x08003deb
 8003c18:	08003deb 	.word	0x08003deb
 8003c1c:	08003deb 	.word	0x08003deb
 8003c20:	08003ca5 	.word	0x08003ca5
 8003c24:	08003deb 	.word	0x08003deb
 8003c28:	08003deb 	.word	0x08003deb
 8003c2c:	08003deb 	.word	0x08003deb
 8003c30:	08003ce7 	.word	0x08003ce7
 8003c34:	08003deb 	.word	0x08003deb
 8003c38:	08003deb 	.word	0x08003deb
 8003c3c:	08003deb 	.word	0x08003deb
 8003c40:	08003d27 	.word	0x08003d27
 8003c44:	08003deb 	.word	0x08003deb
 8003c48:	08003deb 	.word	0x08003deb
 8003c4c:	08003deb 	.word	0x08003deb
 8003c50:	08003d69 	.word	0x08003d69
 8003c54:	08003deb 	.word	0x08003deb
 8003c58:	08003deb 	.word	0x08003deb
 8003c5c:	08003deb 	.word	0x08003deb
 8003c60:	08003da9 	.word	0x08003da9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fa02 	bl	8004074 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0208 	orr.w	r2, r2, #8
 8003c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0204 	bic.w	r2, r2, #4
 8003c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6999      	ldr	r1, [r3, #24]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	619a      	str	r2, [r3, #24]
      break;
 8003ca2:	e0a5      	b.n	8003df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fa68 	bl	8004180 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6999      	ldr	r1, [r3, #24]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	021a      	lsls	r2, r3, #8
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	619a      	str	r2, [r3, #24]
      break;
 8003ce4:	e084      	b.n	8003df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fac7 	bl	8004280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0208 	orr.w	r2, r2, #8
 8003d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0204 	bic.w	r2, r2, #4
 8003d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69d9      	ldr	r1, [r3, #28]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	61da      	str	r2, [r3, #28]
      break;
 8003d24:	e064      	b.n	8003df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fb25 	bl	800437c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69d9      	ldr	r1, [r3, #28]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	021a      	lsls	r2, r3, #8
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	61da      	str	r2, [r3, #28]
      break;
 8003d66:	e043      	b.n	8003df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fb68 	bl	8004444 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0208 	orr.w	r2, r2, #8
 8003d82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0204 	bic.w	r2, r2, #4
 8003d92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	691a      	ldr	r2, [r3, #16]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003da6:	e023      	b.n	8003df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fba6 	bl	8004500 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	021a      	lsls	r2, r3, #8
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003de8:	e002      	b.n	8003df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	75fb      	strb	r3, [r7, #23]
      break;
 8003dee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop

08003e04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_TIM_ConfigClockSource+0x1c>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e0b6      	b.n	8003f8e <HAL_TIM_ConfigClockSource+0x18a>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5c:	d03e      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0xd8>
 8003e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e62:	f200 8087 	bhi.w	8003f74 <HAL_TIM_ConfigClockSource+0x170>
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6a:	f000 8086 	beq.w	8003f7a <HAL_TIM_ConfigClockSource+0x176>
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	d87f      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x170>
 8003e74:	2b70      	cmp	r3, #112	; 0x70
 8003e76:	d01a      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0xaa>
 8003e78:	2b70      	cmp	r3, #112	; 0x70
 8003e7a:	d87b      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x170>
 8003e7c:	2b60      	cmp	r3, #96	; 0x60
 8003e7e:	d050      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x11e>
 8003e80:	2b60      	cmp	r3, #96	; 0x60
 8003e82:	d877      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x170>
 8003e84:	2b50      	cmp	r3, #80	; 0x50
 8003e86:	d03c      	beq.n	8003f02 <HAL_TIM_ConfigClockSource+0xfe>
 8003e88:	2b50      	cmp	r3, #80	; 0x50
 8003e8a:	d873      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x170>
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d058      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x13e>
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	d86f      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x170>
 8003e94:	2b30      	cmp	r3, #48	; 0x30
 8003e96:	d064      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x15e>
 8003e98:	2b30      	cmp	r3, #48	; 0x30
 8003e9a:	d86b      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x170>
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d060      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x15e>
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d867      	bhi.n	8003f74 <HAL_TIM_ConfigClockSource+0x170>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d05c      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x15e>
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d05a      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x15e>
 8003eac:	e062      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6899      	ldr	r1, [r3, #8]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f000 fbf9 	bl	80046b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ed0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	609a      	str	r2, [r3, #8]
      break;
 8003eda:	e04f      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6818      	ldr	r0, [r3, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	6899      	ldr	r1, [r3, #8]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f000 fbe2 	bl	80046b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003efe:	609a      	str	r2, [r3, #8]
      break;
 8003f00:	e03c      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f000 fb56 	bl	80045c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2150      	movs	r1, #80	; 0x50
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fbaf 	bl	800467e <TIM_ITRx_SetConfig>
      break;
 8003f20:	e02c      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f000 fb75 	bl	800461e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2160      	movs	r1, #96	; 0x60
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fb9f 	bl	800467e <TIM_ITRx_SetConfig>
      break;
 8003f40:	e01c      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6859      	ldr	r1, [r3, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f000 fb36 	bl	80045c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2140      	movs	r1, #64	; 0x40
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fb8f 	bl	800467e <TIM_ITRx_SetConfig>
      break;
 8003f60:	e00c      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f000 fb86 	bl	800467e <TIM_ITRx_SetConfig>
      break;
 8003f72:	e003      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	73fb      	strb	r3, [r7, #15]
      break;
 8003f78:	e000      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a2e      	ldr	r2, [pc, #184]	; (8004064 <TIM_Base_SetConfig+0xcc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d003      	beq.n	8003fb8 <TIM_Base_SetConfig+0x20>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb6:	d108      	bne.n	8003fca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a25      	ldr	r2, [pc, #148]	; (8004064 <TIM_Base_SetConfig+0xcc>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00f      	beq.n	8003ff2 <TIM_Base_SetConfig+0x5a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd8:	d00b      	beq.n	8003ff2 <TIM_Base_SetConfig+0x5a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a22      	ldr	r2, [pc, #136]	; (8004068 <TIM_Base_SetConfig+0xd0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <TIM_Base_SetConfig+0x5a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a21      	ldr	r2, [pc, #132]	; (800406c <TIM_Base_SetConfig+0xd4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_Base_SetConfig+0x5a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a20      	ldr	r2, [pc, #128]	; (8004070 <TIM_Base_SetConfig+0xd8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d108      	bne.n	8004004 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a0e      	ldr	r2, [pc, #56]	; (8004064 <TIM_Base_SetConfig+0xcc>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00b      	beq.n	8004048 <TIM_Base_SetConfig+0xb0>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a0d      	ldr	r2, [pc, #52]	; (8004068 <TIM_Base_SetConfig+0xd0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d007      	beq.n	8004048 <TIM_Base_SetConfig+0xb0>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a0c      	ldr	r2, [pc, #48]	; (800406c <TIM_Base_SetConfig+0xd4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d003      	beq.n	8004048 <TIM_Base_SetConfig+0xb0>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a0b      	ldr	r2, [pc, #44]	; (8004070 <TIM_Base_SetConfig+0xd8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d103      	bne.n	8004050 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	615a      	str	r2, [r3, #20]
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40012c00 	.word	0x40012c00
 8004068:	40014000 	.word	0x40014000
 800406c:	40014400 	.word	0x40014400
 8004070:	40014800 	.word	0x40014800

08004074 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f023 0201 	bic.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0303 	bic.w	r3, r3, #3
 80040ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f023 0302 	bic.w	r3, r3, #2
 80040c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a28      	ldr	r2, [pc, #160]	; (8004170 <TIM_OC1_SetConfig+0xfc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00b      	beq.n	80040ec <TIM_OC1_SetConfig+0x78>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a27      	ldr	r2, [pc, #156]	; (8004174 <TIM_OC1_SetConfig+0x100>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d007      	beq.n	80040ec <TIM_OC1_SetConfig+0x78>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a26      	ldr	r2, [pc, #152]	; (8004178 <TIM_OC1_SetConfig+0x104>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_OC1_SetConfig+0x78>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a25      	ldr	r2, [pc, #148]	; (800417c <TIM_OC1_SetConfig+0x108>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d10c      	bne.n	8004106 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f023 0308 	bic.w	r3, r3, #8
 80040f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f023 0304 	bic.w	r3, r3, #4
 8004104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a19      	ldr	r2, [pc, #100]	; (8004170 <TIM_OC1_SetConfig+0xfc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00b      	beq.n	8004126 <TIM_OC1_SetConfig+0xb2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a18      	ldr	r2, [pc, #96]	; (8004174 <TIM_OC1_SetConfig+0x100>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d007      	beq.n	8004126 <TIM_OC1_SetConfig+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a17      	ldr	r2, [pc, #92]	; (8004178 <TIM_OC1_SetConfig+0x104>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d003      	beq.n	8004126 <TIM_OC1_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a16      	ldr	r2, [pc, #88]	; (800417c <TIM_OC1_SetConfig+0x108>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d111      	bne.n	800414a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800412c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	621a      	str	r2, [r3, #32]
}
 8004164:	bf00      	nop
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	40012c00 	.word	0x40012c00
 8004174:	40014000 	.word	0x40014000
 8004178:	40014400 	.word	0x40014400
 800417c:	40014800 	.word	0x40014800

08004180 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f023 0210 	bic.w	r2, r3, #16
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	021b      	lsls	r3, r3, #8
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f023 0320 	bic.w	r3, r3, #32
 80041ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a24      	ldr	r2, [pc, #144]	; (8004270 <TIM_OC2_SetConfig+0xf0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d10d      	bne.n	8004200 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <TIM_OC2_SetConfig+0xf0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00b      	beq.n	8004220 <TIM_OC2_SetConfig+0xa0>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a1a      	ldr	r2, [pc, #104]	; (8004274 <TIM_OC2_SetConfig+0xf4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d007      	beq.n	8004220 <TIM_OC2_SetConfig+0xa0>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a19      	ldr	r2, [pc, #100]	; (8004278 <TIM_OC2_SetConfig+0xf8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d003      	beq.n	8004220 <TIM_OC2_SetConfig+0xa0>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a18      	ldr	r2, [pc, #96]	; (800427c <TIM_OC2_SetConfig+0xfc>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d113      	bne.n	8004248 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004226:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800422e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40012c00 	.word	0x40012c00
 8004274:	40014000 	.word	0x40014000
 8004278:	40014400 	.word	0x40014400
 800427c:	40014800 	.word	0x40014800

08004280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0303 	bic.w	r3, r3, #3
 80042ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	021b      	lsls	r3, r3, #8
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a23      	ldr	r2, [pc, #140]	; (800436c <TIM_OC3_SetConfig+0xec>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10d      	bne.n	80042fe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042fc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a1a      	ldr	r2, [pc, #104]	; (800436c <TIM_OC3_SetConfig+0xec>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00b      	beq.n	800431e <TIM_OC3_SetConfig+0x9e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a19      	ldr	r2, [pc, #100]	; (8004370 <TIM_OC3_SetConfig+0xf0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d007      	beq.n	800431e <TIM_OC3_SetConfig+0x9e>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a18      	ldr	r2, [pc, #96]	; (8004374 <TIM_OC3_SetConfig+0xf4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d003      	beq.n	800431e <TIM_OC3_SetConfig+0x9e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a17      	ldr	r2, [pc, #92]	; (8004378 <TIM_OC3_SetConfig+0xf8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d113      	bne.n	8004346 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800432c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	621a      	str	r2, [r3, #32]
}
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	40012c00 	.word	0x40012c00
 8004370:	40014000 	.word	0x40014000
 8004374:	40014400 	.word	0x40014400
 8004378:	40014800 	.word	0x40014800

0800437c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	031b      	lsls	r3, r3, #12
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a16      	ldr	r2, [pc, #88]	; (8004434 <TIM_OC4_SetConfig+0xb8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d00b      	beq.n	80043f8 <TIM_OC4_SetConfig+0x7c>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a15      	ldr	r2, [pc, #84]	; (8004438 <TIM_OC4_SetConfig+0xbc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d007      	beq.n	80043f8 <TIM_OC4_SetConfig+0x7c>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a14      	ldr	r2, [pc, #80]	; (800443c <TIM_OC4_SetConfig+0xc0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d003      	beq.n	80043f8 <TIM_OC4_SetConfig+0x7c>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a13      	ldr	r2, [pc, #76]	; (8004440 <TIM_OC4_SetConfig+0xc4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d109      	bne.n	800440c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	019b      	lsls	r3, r3, #6
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	621a      	str	r2, [r3, #32]
}
 8004426:	bf00      	nop
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40014000 	.word	0x40014000
 800443c:	40014400 	.word	0x40014400
 8004440:	40014800 	.word	0x40014800

08004444 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004488:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	041b      	lsls	r3, r3, #16
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a15      	ldr	r2, [pc, #84]	; (80044f0 <TIM_OC5_SetConfig+0xac>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00b      	beq.n	80044b6 <TIM_OC5_SetConfig+0x72>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a14      	ldr	r2, [pc, #80]	; (80044f4 <TIM_OC5_SetConfig+0xb0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d007      	beq.n	80044b6 <TIM_OC5_SetConfig+0x72>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a13      	ldr	r2, [pc, #76]	; (80044f8 <TIM_OC5_SetConfig+0xb4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d003      	beq.n	80044b6 <TIM_OC5_SetConfig+0x72>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a12      	ldr	r2, [pc, #72]	; (80044fc <TIM_OC5_SetConfig+0xb8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d109      	bne.n	80044ca <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	021b      	lsls	r3, r3, #8
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	621a      	str	r2, [r3, #32]
}
 80044e4:	bf00      	nop
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	40012c00 	.word	0x40012c00
 80044f4:	40014000 	.word	0x40014000
 80044f8:	40014400 	.word	0x40014400
 80044fc:	40014800 	.word	0x40014800

08004500 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800452e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	051b      	lsls	r3, r3, #20
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a16      	ldr	r2, [pc, #88]	; (80045b0 <TIM_OC6_SetConfig+0xb0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00b      	beq.n	8004574 <TIM_OC6_SetConfig+0x74>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a15      	ldr	r2, [pc, #84]	; (80045b4 <TIM_OC6_SetConfig+0xb4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d007      	beq.n	8004574 <TIM_OC6_SetConfig+0x74>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a14      	ldr	r2, [pc, #80]	; (80045b8 <TIM_OC6_SetConfig+0xb8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d003      	beq.n	8004574 <TIM_OC6_SetConfig+0x74>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a13      	ldr	r2, [pc, #76]	; (80045bc <TIM_OC6_SetConfig+0xbc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d109      	bne.n	8004588 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800457a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	029b      	lsls	r3, r3, #10
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	621a      	str	r2, [r3, #32]
}
 80045a2:	bf00      	nop
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40012c00 	.word	0x40012c00
 80045b4:	40014000 	.word	0x40014000
 80045b8:	40014400 	.word	0x40014400
 80045bc:	40014800 	.word	0x40014800

080045c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	f023 0201 	bic.w	r2, r3, #1
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f023 030a 	bic.w	r3, r3, #10
 80045fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	621a      	str	r2, [r3, #32]
}
 8004612:	bf00      	nop
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800461e:	b480      	push	{r7}
 8004620:	b087      	sub	sp, #28
 8004622:	af00      	add	r7, sp, #0
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f023 0210 	bic.w	r2, r3, #16
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004648:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	031b      	lsls	r3, r3, #12
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800465a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	621a      	str	r2, [r3, #32]
}
 8004672:	bf00      	nop
 8004674:	371c      	adds	r7, #28
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800467e:	b480      	push	{r7}
 8004680:	b085      	sub	sp, #20
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004694:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4313      	orrs	r3, r2
 800469c:	f043 0307 	orr.w	r3, r3, #7
 80046a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	609a      	str	r2, [r3, #8]
}
 80046a8:	bf00      	nop
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
 80046c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	021a      	lsls	r2, r3, #8
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4313      	orrs	r3, r2
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	609a      	str	r2, [r3, #8]
}
 80046e8:	bf00      	nop
 80046ea:	371c      	adds	r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	2201      	movs	r2, #1
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a1a      	ldr	r2, [r3, #32]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	43db      	mvns	r3, r3
 8004716:	401a      	ands	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a1a      	ldr	r2, [r3, #32]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	fa01 f303 	lsl.w	r3, r1, r3
 800472c:	431a      	orrs	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	621a      	str	r2, [r3, #32]
}
 8004732:	bf00      	nop
 8004734:	371c      	adds	r7, #28
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004754:	2302      	movs	r3, #2
 8004756:	e04f      	b.n	80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a21      	ldr	r2, [pc, #132]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d108      	bne.n	8004794 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004788:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a14      	ldr	r2, [pc, #80]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d009      	beq.n	80047cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c0:	d004      	beq.n	80047cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a10      	ldr	r2, [pc, #64]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d10c      	bne.n	80047e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	40012c00 	.word	0x40012c00
 8004808:	40014000 	.word	0x40014000

0800480c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004824:	2302      	movs	r3, #2
 8004826:	e060      	b.n	80048ea <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4313      	orrs	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	041b      	lsls	r3, r3, #16
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a14      	ldr	r2, [pc, #80]	; (80048f8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d115      	bne.n	80048d8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	051b      	lsls	r3, r3, #20
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40012c00 	.word	0x40012c00

080048fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e040      	b.n	8004990 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004912:	2b00      	cmp	r3, #0
 8004914:	d106      	bne.n	8004924 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fc fe00 	bl	8001524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2224      	movs	r2, #36	; 0x24
 8004928:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0201 	bic.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fb2a 	bl	8004f94 <UART_SetConfig>
 8004940:	4603      	mov	r3, r0
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e022      	b.n	8004990 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fc54 	bl	8005200 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004976:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fcdb 	bl	8005344 <UART_CheckIdleState>
 800498e:	4603      	mov	r3, r0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b0ba      	sub	sp, #232	; 0xe8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80049c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80049c6:	4013      	ands	r3, r2
 80049c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80049cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d115      	bne.n	8004a00 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80049d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00f      	beq.n	8004a00 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d009      	beq.n	8004a00 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 82a3 	beq.w	8004f3c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	4798      	blx	r3
      }
      return;
 80049fe:	e29d      	b.n	8004f3c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 8117 	beq.w	8004c38 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a1a:	4b85      	ldr	r3, [pc, #532]	; (8004c30 <HAL_UART_IRQHandler+0x298>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 810a 	beq.w	8004c38 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d011      	beq.n	8004a54 <HAL_UART_IRQHandler+0xbc>
 8004a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00b      	beq.n	8004a54 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2201      	movs	r2, #1
 8004a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a4a:	f043 0201 	orr.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d011      	beq.n	8004a84 <HAL_UART_IRQHandler+0xec>
 8004a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00b      	beq.n	8004a84 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2202      	movs	r2, #2
 8004a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a7a:	f043 0204 	orr.w	r2, r3, #4
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d011      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x11c>
 8004a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00b      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2204      	movs	r2, #4
 8004aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aaa:	f043 0202 	orr.w	r2, r3, #2
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d017      	beq.n	8004af0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d105      	bne.n	8004ad8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ad0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00b      	beq.n	8004af0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2208      	movs	r2, #8
 8004ade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ae6:	f043 0208 	orr.w	r2, r3, #8
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d012      	beq.n	8004b22 <HAL_UART_IRQHandler+0x18a>
 8004afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00c      	beq.n	8004b22 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b18:	f043 0220 	orr.w	r2, r3, #32
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8209 	beq.w	8004f40 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00d      	beq.n	8004b56 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	d005      	beq.n	8004b7a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d04f      	beq.n	8004c1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fcef 	bl	800555e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8a:	2b40      	cmp	r3, #64	; 0x40
 8004b8c:	d141      	bne.n	8004c12 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3308      	adds	r3, #8
 8004b94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1d9      	bne.n	8004b8e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d013      	beq.n	8004c0a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be6:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <HAL_UART_IRQHandler+0x29c>)
 8004be8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fd f870 	bl	8001cd4 <HAL_DMA_Abort_IT>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d017      	beq.n	8004c2a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004c04:	4610      	mov	r0, r2
 8004c06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c08:	e00f      	b.n	8004c2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f9ac 	bl	8004f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c10:	e00b      	b.n	8004c2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f9a8 	bl	8004f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c18:	e007      	b.n	8004c2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f9a4 	bl	8004f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004c28:	e18a      	b.n	8004f40 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c2a:	bf00      	nop
    return;
 8004c2c:	e188      	b.n	8004f40 <HAL_UART_IRQHandler+0x5a8>
 8004c2e:	bf00      	nop
 8004c30:	04000120 	.word	0x04000120
 8004c34:	08005625 	.word	0x08005625

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	f040 8143 	bne.w	8004ec8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c46:	f003 0310 	and.w	r3, r3, #16
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 813c 	beq.w	8004ec8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8135 	beq.w	8004ec8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2210      	movs	r2, #16
 8004c64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c70:	2b40      	cmp	r3, #64	; 0x40
 8004c72:	f040 80b1 	bne.w	8004dd8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 815c 	beq.w	8004f44 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c96:	429a      	cmp	r2, r3
 8004c98:	f080 8154 	bcs.w	8004f44 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ca2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	f000 8085 	beq.w	8004dbc <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ce0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ce8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cec:	e841 2300 	strex	r3, r2, [r1]
 8004cf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1da      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3308      	adds	r3, #8
 8004d02:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d20:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d24:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e1      	bne.n	8004cfc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3308      	adds	r3, #8
 8004d58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d5c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e3      	bne.n	8004d38 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d84:	e853 3f00 	ldrex	r3, [r3]
 8004d88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d8c:	f023 0310 	bic.w	r3, r3, #16
 8004d90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004da0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004da4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e4      	bne.n	8004d7c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fc ff53 	bl	8001c62 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	4619      	mov	r1, r3
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f8d3 	bl	8004f7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dd6:	e0b5      	b.n	8004f44 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 80a7 	beq.w	8004f48 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004dfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 80a2 	beq.w	8004f48 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	e853 3f00 	ldrex	r3, [r3]
 8004e10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e26:	647b      	str	r3, [r7, #68]	; 0x44
 8004e28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e4      	bne.n	8004e04 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3308      	adds	r3, #8
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	623b      	str	r3, [r7, #32]
   return(result);
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	f023 0301 	bic.w	r3, r3, #1
 8004e50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3308      	adds	r3, #8
 8004e5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e5e:	633a      	str	r2, [r7, #48]	; 0x30
 8004e60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e66:	e841 2300 	strex	r3, r2, [r1]
 8004e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1e3      	bne.n	8004e3a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f023 0310 	bic.w	r3, r3, #16
 8004e98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ea6:	61fb      	str	r3, [r7, #28]
 8004ea8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	69b9      	ldr	r1, [r7, #24]
 8004eac:	69fa      	ldr	r2, [r7, #28]
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	617b      	str	r3, [r7, #20]
   return(result);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e4      	bne.n	8004e84 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f85b 	bl	8004f7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ec6:	e03f      	b.n	8004f48 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00e      	beq.n	8004ef2 <HAL_UART_IRQHandler+0x55a>
 8004ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ee8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fbda 	bl	80056a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ef0:	e02d      	b.n	8004f4e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00e      	beq.n	8004f1c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d008      	beq.n	8004f1c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d01c      	beq.n	8004f4c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	4798      	blx	r3
    }
    return;
 8004f1a:	e017      	b.n	8004f4c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d012      	beq.n	8004f4e <HAL_UART_IRQHandler+0x5b6>
 8004f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00c      	beq.n	8004f4e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fb8b 	bl	8005650 <UART_EndTransmit_IT>
    return;
 8004f3a:	e008      	b.n	8004f4e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004f3c:	bf00      	nop
 8004f3e:	e006      	b.n	8004f4e <HAL_UART_IRQHandler+0x5b6>
    return;
 8004f40:	bf00      	nop
 8004f42:	e004      	b.n	8004f4e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004f44:	bf00      	nop
 8004f46:	e002      	b.n	8004f4e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004f48:	bf00      	nop
 8004f4a:	e000      	b.n	8004f4e <HAL_UART_IRQHandler+0x5b6>
    return;
 8004f4c:	bf00      	nop
  }

}
 8004f4e:	37e8      	adds	r7, #232	; 0xe8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	4b8a      	ldr	r3, [pc, #552]	; (80051e8 <UART_SetConfig+0x254>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6812      	ldr	r2, [r2, #0]
 8004fc6:	6979      	ldr	r1, [r7, #20]
 8004fc8:	430b      	orrs	r3, r1
 8004fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	430a      	orrs	r2, r1
 8005004:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a78      	ldr	r2, [pc, #480]	; (80051ec <UART_SetConfig+0x258>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d120      	bne.n	8005052 <UART_SetConfig+0xbe>
 8005010:	4b77      	ldr	r3, [pc, #476]	; (80051f0 <UART_SetConfig+0x25c>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	2b03      	cmp	r3, #3
 800501a:	d817      	bhi.n	800504c <UART_SetConfig+0xb8>
 800501c:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <UART_SetConfig+0x90>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	08005035 	.word	0x08005035
 8005028:	08005041 	.word	0x08005041
 800502c:	08005047 	.word	0x08005047
 8005030:	0800503b 	.word	0x0800503b
 8005034:	2300      	movs	r3, #0
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e01d      	b.n	8005076 <UART_SetConfig+0xe2>
 800503a:	2302      	movs	r3, #2
 800503c:	77fb      	strb	r3, [r7, #31]
 800503e:	e01a      	b.n	8005076 <UART_SetConfig+0xe2>
 8005040:	2304      	movs	r3, #4
 8005042:	77fb      	strb	r3, [r7, #31]
 8005044:	e017      	b.n	8005076 <UART_SetConfig+0xe2>
 8005046:	2308      	movs	r3, #8
 8005048:	77fb      	strb	r3, [r7, #31]
 800504a:	e014      	b.n	8005076 <UART_SetConfig+0xe2>
 800504c:	2310      	movs	r3, #16
 800504e:	77fb      	strb	r3, [r7, #31]
 8005050:	e011      	b.n	8005076 <UART_SetConfig+0xe2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a67      	ldr	r2, [pc, #412]	; (80051f4 <UART_SetConfig+0x260>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d102      	bne.n	8005062 <UART_SetConfig+0xce>
 800505c:	2300      	movs	r3, #0
 800505e:	77fb      	strb	r3, [r7, #31]
 8005060:	e009      	b.n	8005076 <UART_SetConfig+0xe2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a64      	ldr	r2, [pc, #400]	; (80051f8 <UART_SetConfig+0x264>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d102      	bne.n	8005072 <UART_SetConfig+0xde>
 800506c:	2300      	movs	r3, #0
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e001      	b.n	8005076 <UART_SetConfig+0xe2>
 8005072:	2310      	movs	r3, #16
 8005074:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800507e:	d15b      	bne.n	8005138 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005080:	7ffb      	ldrb	r3, [r7, #31]
 8005082:	2b08      	cmp	r3, #8
 8005084:	d827      	bhi.n	80050d6 <UART_SetConfig+0x142>
 8005086:	a201      	add	r2, pc, #4	; (adr r2, 800508c <UART_SetConfig+0xf8>)
 8005088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508c:	080050b1 	.word	0x080050b1
 8005090:	080050b9 	.word	0x080050b9
 8005094:	080050c1 	.word	0x080050c1
 8005098:	080050d7 	.word	0x080050d7
 800509c:	080050c7 	.word	0x080050c7
 80050a0:	080050d7 	.word	0x080050d7
 80050a4:	080050d7 	.word	0x080050d7
 80050a8:	080050d7 	.word	0x080050d7
 80050ac:	080050cf 	.word	0x080050cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050b0:	f7fe f9dc 	bl	800346c <HAL_RCC_GetPCLK1Freq>
 80050b4:	61b8      	str	r0, [r7, #24]
        break;
 80050b6:	e013      	b.n	80050e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050b8:	f7fe f9fa 	bl	80034b0 <HAL_RCC_GetPCLK2Freq>
 80050bc:	61b8      	str	r0, [r7, #24]
        break;
 80050be:	e00f      	b.n	80050e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050c0:	4b4e      	ldr	r3, [pc, #312]	; (80051fc <UART_SetConfig+0x268>)
 80050c2:	61bb      	str	r3, [r7, #24]
        break;
 80050c4:	e00c      	b.n	80050e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050c6:	f7fe f95b 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 80050ca:	61b8      	str	r0, [r7, #24]
        break;
 80050cc:	e008      	b.n	80050e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050d2:	61bb      	str	r3, [r7, #24]
        break;
 80050d4:	e004      	b.n	80050e0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	77bb      	strb	r3, [r7, #30]
        break;
 80050de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d074      	beq.n	80051d0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	005a      	lsls	r2, r3, #1
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	085b      	lsrs	r3, r3, #1
 80050f0:	441a      	add	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b0f      	cmp	r3, #15
 8005102:	d916      	bls.n	8005132 <UART_SetConfig+0x19e>
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800510a:	d212      	bcs.n	8005132 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	b29b      	uxth	r3, r3
 8005110:	f023 030f 	bic.w	r3, r3, #15
 8005114:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	085b      	lsrs	r3, r3, #1
 800511a:	b29b      	uxth	r3, r3
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	b29a      	uxth	r2, r3
 8005122:	89fb      	ldrh	r3, [r7, #14]
 8005124:	4313      	orrs	r3, r2
 8005126:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	89fa      	ldrh	r2, [r7, #14]
 800512e:	60da      	str	r2, [r3, #12]
 8005130:	e04e      	b.n	80051d0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	77bb      	strb	r3, [r7, #30]
 8005136:	e04b      	b.n	80051d0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005138:	7ffb      	ldrb	r3, [r7, #31]
 800513a:	2b08      	cmp	r3, #8
 800513c:	d827      	bhi.n	800518e <UART_SetConfig+0x1fa>
 800513e:	a201      	add	r2, pc, #4	; (adr r2, 8005144 <UART_SetConfig+0x1b0>)
 8005140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005144:	08005169 	.word	0x08005169
 8005148:	08005171 	.word	0x08005171
 800514c:	08005179 	.word	0x08005179
 8005150:	0800518f 	.word	0x0800518f
 8005154:	0800517f 	.word	0x0800517f
 8005158:	0800518f 	.word	0x0800518f
 800515c:	0800518f 	.word	0x0800518f
 8005160:	0800518f 	.word	0x0800518f
 8005164:	08005187 	.word	0x08005187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005168:	f7fe f980 	bl	800346c <HAL_RCC_GetPCLK1Freq>
 800516c:	61b8      	str	r0, [r7, #24]
        break;
 800516e:	e013      	b.n	8005198 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005170:	f7fe f99e 	bl	80034b0 <HAL_RCC_GetPCLK2Freq>
 8005174:	61b8      	str	r0, [r7, #24]
        break;
 8005176:	e00f      	b.n	8005198 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005178:	4b20      	ldr	r3, [pc, #128]	; (80051fc <UART_SetConfig+0x268>)
 800517a:	61bb      	str	r3, [r7, #24]
        break;
 800517c:	e00c      	b.n	8005198 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800517e:	f7fe f8ff 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 8005182:	61b8      	str	r0, [r7, #24]
        break;
 8005184:	e008      	b.n	8005198 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800518a:	61bb      	str	r3, [r7, #24]
        break;
 800518c:	e004      	b.n	8005198 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	77bb      	strb	r3, [r7, #30]
        break;
 8005196:	bf00      	nop
    }

    if (pclk != 0U)
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d018      	beq.n	80051d0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	085a      	lsrs	r2, r3, #1
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	441a      	add	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	2b0f      	cmp	r3, #15
 80051b8:	d908      	bls.n	80051cc <UART_SetConfig+0x238>
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c0:	d204      	bcs.n	80051cc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	60da      	str	r2, [r3, #12]
 80051ca:	e001      	b.n	80051d0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80051dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3720      	adds	r7, #32
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	efff69f3 	.word	0xefff69f3
 80051ec:	40013800 	.word	0x40013800
 80051f0:	40021000 	.word	0x40021000
 80051f4:	40004400 	.word	0x40004400
 80051f8:	40004800 	.word	0x40004800
 80051fc:	007a1200 	.word	0x007a1200

08005200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01a      	beq.n	8005316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052fe:	d10a      	bne.n	8005316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	605a      	str	r2, [r3, #4]
  }
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af02      	add	r7, sp, #8
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005354:	f7fc fa9e 	bl	8001894 <HAL_GetTick>
 8005358:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0308 	and.w	r3, r3, #8
 8005364:	2b08      	cmp	r3, #8
 8005366:	d10e      	bne.n	8005386 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f82d 	bl	80053d6 <UART_WaitOnFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e023      	b.n	80053ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b04      	cmp	r3, #4
 8005392:	d10e      	bne.n	80053b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f817 	bl	80053d6 <UART_WaitOnFlagUntilTimeout>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e00d      	b.n	80053ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2220      	movs	r2, #32
 80053b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2220      	movs	r2, #32
 80053bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b09c      	sub	sp, #112	; 0x70
 80053da:	af00      	add	r7, sp, #0
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	603b      	str	r3, [r7, #0]
 80053e2:	4613      	mov	r3, r2
 80053e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e6:	e0a5      	b.n	8005534 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ee:	f000 80a1 	beq.w	8005534 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f2:	f7fc fa4f 	bl	8001894 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80053fe:	429a      	cmp	r2, r3
 8005400:	d302      	bcc.n	8005408 <UART_WaitOnFlagUntilTimeout+0x32>
 8005402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005404:	2b00      	cmp	r3, #0
 8005406:	d13e      	bne.n	8005486 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005418:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800541c:	667b      	str	r3, [r7, #100]	; 0x64
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005428:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800542c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e6      	bne.n	8005408 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3308      	adds	r3, #8
 8005440:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800544a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544c:	f023 0301 	bic.w	r3, r3, #1
 8005450:	663b      	str	r3, [r7, #96]	; 0x60
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3308      	adds	r3, #8
 8005458:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800545a:	64ba      	str	r2, [r7, #72]	; 0x48
 800545c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e5      	bne.n	800543a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e067      	b.n	8005556 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d04f      	beq.n	8005534 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800549e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054a2:	d147      	bne.n	8005534 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	e853 3f00 	ldrex	r3, [r3]
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054cc:	637b      	str	r3, [r7, #52]	; 0x34
 80054ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054d4:	e841 2300 	strex	r3, r2, [r1]
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e6      	bne.n	80054ae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3308      	adds	r3, #8
 80054e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	e853 3f00 	ldrex	r3, [r3]
 80054ee:	613b      	str	r3, [r7, #16]
   return(result);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	f023 0301 	bic.w	r3, r3, #1
 80054f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3308      	adds	r3, #8
 80054fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005500:	623a      	str	r2, [r7, #32]
 8005502:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005504:	69f9      	ldr	r1, [r7, #28]
 8005506:	6a3a      	ldr	r2, [r7, #32]
 8005508:	e841 2300 	strex	r3, r2, [r1]
 800550c:	61bb      	str	r3, [r7, #24]
   return(result);
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e5      	bne.n	80054e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2220      	movs	r2, #32
 8005518:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2220      	movs	r2, #32
 8005524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e010      	b.n	8005556 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	69da      	ldr	r2, [r3, #28]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	4013      	ands	r3, r2
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	429a      	cmp	r2, r3
 8005542:	bf0c      	ite	eq
 8005544:	2301      	moveq	r3, #1
 8005546:	2300      	movne	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	461a      	mov	r2, r3
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	429a      	cmp	r2, r3
 8005550:	f43f af4a 	beq.w	80053e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3770      	adds	r7, #112	; 0x70
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800555e:	b480      	push	{r7}
 8005560:	b095      	sub	sp, #84	; 0x54
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556e:	e853 3f00 	ldrex	r3, [r3]
 8005572:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800557a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005584:	643b      	str	r3, [r7, #64]	; 0x40
 8005586:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005588:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800558a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800558c:	e841 2300 	strex	r3, r2, [r1]
 8005590:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e6      	bne.n	8005566 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3308      	adds	r3, #8
 800559e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	e853 3f00 	ldrex	r3, [r3]
 80055a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f023 0301 	bic.w	r3, r3, #1
 80055ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3308      	adds	r3, #8
 80055b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055c0:	e841 2300 	strex	r3, r2, [r1]
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e5      	bne.n	8005598 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d118      	bne.n	8005606 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f023 0310 	bic.w	r3, r3, #16
 80055e8:	647b      	str	r3, [r7, #68]	; 0x44
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055f2:	61bb      	str	r3, [r7, #24]
 80055f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6979      	ldr	r1, [r7, #20]
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e6      	bne.n	80055d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005618:	bf00      	nop
 800561a:	3754      	adds	r7, #84	; 0x54
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f7ff fc90 	bl	8004f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005648:	bf00      	nop
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	60bb      	str	r3, [r7, #8]
   return(result);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800566c:	61fb      	str	r3, [r7, #28]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	61bb      	str	r3, [r7, #24]
 8005678:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6979      	ldr	r1, [r7, #20]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	613b      	str	r3, [r7, #16]
   return(result);
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e6      	bne.n	8005658 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff fc5c 	bl	8004f54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800569c:	bf00      	nop
 800569e:	3720      	adds	r7, #32
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <__libc_init_array>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	4d0d      	ldr	r5, [pc, #52]	; (80056f0 <__libc_init_array+0x38>)
 80056bc:	4c0d      	ldr	r4, [pc, #52]	; (80056f4 <__libc_init_array+0x3c>)
 80056be:	1b64      	subs	r4, r4, r5
 80056c0:	10a4      	asrs	r4, r4, #2
 80056c2:	2600      	movs	r6, #0
 80056c4:	42a6      	cmp	r6, r4
 80056c6:	d109      	bne.n	80056dc <__libc_init_array+0x24>
 80056c8:	4d0b      	ldr	r5, [pc, #44]	; (80056f8 <__libc_init_array+0x40>)
 80056ca:	4c0c      	ldr	r4, [pc, #48]	; (80056fc <__libc_init_array+0x44>)
 80056cc:	f000 f820 	bl	8005710 <_init>
 80056d0:	1b64      	subs	r4, r4, r5
 80056d2:	10a4      	asrs	r4, r4, #2
 80056d4:	2600      	movs	r6, #0
 80056d6:	42a6      	cmp	r6, r4
 80056d8:	d105      	bne.n	80056e6 <__libc_init_array+0x2e>
 80056da:	bd70      	pop	{r4, r5, r6, pc}
 80056dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80056e0:	4798      	blx	r3
 80056e2:	3601      	adds	r6, #1
 80056e4:	e7ee      	b.n	80056c4 <__libc_init_array+0xc>
 80056e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ea:	4798      	blx	r3
 80056ec:	3601      	adds	r6, #1
 80056ee:	e7f2      	b.n	80056d6 <__libc_init_array+0x1e>
 80056f0:	08005760 	.word	0x08005760
 80056f4:	08005760 	.word	0x08005760
 80056f8:	08005760 	.word	0x08005760
 80056fc:	08005764 	.word	0x08005764

08005700 <memset>:
 8005700:	4402      	add	r2, r0
 8005702:	4603      	mov	r3, r0
 8005704:	4293      	cmp	r3, r2
 8005706:	d100      	bne.n	800570a <memset+0xa>
 8005708:	4770      	bx	lr
 800570a:	f803 1b01 	strb.w	r1, [r3], #1
 800570e:	e7f9      	b.n	8005704 <memset+0x4>

08005710 <_init>:
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	bf00      	nop
 8005714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005716:	bc08      	pop	{r3}
 8005718:	469e      	mov	lr, r3
 800571a:	4770      	bx	lr

0800571c <_fini>:
 800571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571e:	bf00      	nop
 8005720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005722:	bc08      	pop	{r3}
 8005724:	469e      	mov	lr, r3
 8005726:	4770      	bx	lr
