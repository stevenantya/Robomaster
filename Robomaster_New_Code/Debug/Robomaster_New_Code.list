
Robomaster_New_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004230  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080043b8  080043b8  000143b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f0  080043f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080043f0  080043f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043f0  080043f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f0  080043f0  000143f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043f4  080043f4  000143f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080043f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000010  08004404  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08004404  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e054  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a08  00000000  00000000  0002e090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0002fa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  00030698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ade7  00000000  00000000  00031200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e761  00000000  00000000  0004bfe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a220b  00000000  00000000  0005a748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc953  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003340  00000000  00000000  000fc9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080043a0 	.word	0x080043a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080043a0 	.word	0x080043a0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_9)
 800054a:	88fb      	ldrh	r3, [r7, #6]
 800054c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000550:	d120      	bne.n	8000594 <HAL_GPIO_EXTI_Callback+0x54>
	{
		us1_echo = __HAL_TIM_GET_COUNTER(&htim2);
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000558:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <HAL_GPIO_EXTI_Callback+0x60>)
 800055a:	6013      	str	r3, [r2, #0]
		distance = (float)((us1_echo - us1_start)) * 330 * 2 / 100000;
 800055c:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <HAL_GPIO_EXTI_Callback+0x60>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	ee07 3a90 	vmov	s15, r3
 800056a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800056e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80005a8 <HAL_GPIO_EXTI_Callback+0x68>
 8000572:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000576:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800057a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80005ac <HAL_GPIO_EXTI_Callback+0x6c>
 800057e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000582:	ee16 0a90 	vmov	r0, s13
 8000586:	f7ff ff83 	bl	8000490 <__aeabi_f2d>
 800058a:	4602      	mov	r2, r0
 800058c:	460b      	mov	r3, r1
 800058e:	4908      	ldr	r1, [pc, #32]	; (80005b0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000590:	e9c1 2300 	strd	r2, r3, [r1]


	}

}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000128 	.word	0x20000128
 80005a0:	20000034 	.word	0x20000034
 80005a4:	20000030 	.word	0x20000030
 80005a8:	43a50000 	.word	0x43a50000
 80005ac:	47c35000 	.word	0x47c35000
 80005b0:	20000088 	.word	0x20000088

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fd12 	bl	8000fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f868 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 faa6 	bl	8000b10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 fa74 	bl	8000ab0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005c8:	f000 f8c0 	bl	800074c <MX_TIM1_Init>
  MX_TIM6_Init();
 80005cc:	f000 f9c0 	bl	8000950 <MX_TIM6_Init>
  MX_TIM17_Init();
 80005d0:	f000 f9f4 	bl	80009bc <MX_TIM17_Init>
  MX_TIM2_Init();
 80005d4:	f000 f96e 	bl	80008b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005d8:	2100      	movs	r1, #0
 80005da:	4829      	ldr	r0, [pc, #164]	; (8000680 <main+0xcc>)
 80005dc:	f002 fc0a 	bl	8002df4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005e0:	2104      	movs	r1, #4
 80005e2:	4827      	ldr	r0, [pc, #156]	; (8000680 <main+0xcc>)
 80005e4:	f002 fc06 	bl	8002df4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80005e8:	2108      	movs	r1, #8
 80005ea:	4825      	ldr	r0, [pc, #148]	; (8000680 <main+0xcc>)
 80005ec:	f002 fc02 	bl	8002df4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80005f0:	210c      	movs	r1, #12
 80005f2:	4823      	ldr	r0, [pc, #140]	; (8000680 <main+0xcc>)
 80005f4:	f002 fbfe 	bl	8002df4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80005f8:	2100      	movs	r1, #0
 80005fa:	4822      	ldr	r0, [pc, #136]	; (8000684 <main+0xd0>)
 80005fc:	f002 fbfa 	bl	8002df4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start(&htim2);
 8000600:	4821      	ldr	r0, [pc, #132]	; (8000688 <main+0xd4>)
 8000602:	f002 fb53 	bl	8002cac <HAL_TIM_Base_Start>
//  uint16_t timer_counter;
//  uint16_t compare_register;
  while (1)
  {
	  us1_start = __HAL_TIM_GET_COUNTER(&htim2);
 8000606:	4b20      	ldr	r3, [pc, #128]	; (8000688 <main+0xd4>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800060c:	4a1f      	ldr	r2, [pc, #124]	; (800068c <main+0xd8>)
 800060e:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061a:	f000 ffef 	bl	80015fc <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f000 fd44 	bl	80010ac <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062e:	f000 ffe5 	bl	80015fc <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000632:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000636:	f000 fd39 	bl	80010ac <HAL_Delay>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 800063a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063e:	f000 fd35 	bl	80010ac <HAL_Delay>
	  //The wheeeeeeelsz
	  htim1.Instance->CCR1 = 10000;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <main+0xcc>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f242 7210 	movw	r2, #10000	; 0x2710
 800064a:	635a      	str	r2, [r3, #52]	; 0x34
	  htim1.Instance->CCR2 = 10000;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <main+0xcc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f242 7210 	movw	r2, #10000	; 0x2710
 8000654:	639a      	str	r2, [r3, #56]	; 0x38
	  htim1.Instance->CCR3 = 10000;
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <main+0xcc>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f242 7210 	movw	r2, #10000	; 0x2710
 800065e:	63da      	str	r2, [r3, #60]	; 0x3c
	  htim1.Instance->CCR4 = 10000;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <main+0xcc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f242 7210 	movw	r2, #10000	; 0x2710
 8000668:	641a      	str	r2, [r3, #64]	; 0x40

	  //The rotary blade that moves
	  htim17.Instance->CCR1 = 10000;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <main+0xd0>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000672:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 8000674:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000678:	f000 fd18 	bl	80010ac <HAL_Delay>
	  us1_start = __HAL_TIM_GET_COUNTER(&htim2);
 800067c:	e7c3      	b.n	8000606 <main+0x52>
 800067e:	bf00      	nop
 8000680:	200000dc 	.word	0x200000dc
 8000684:	20000038 	.word	0x20000038
 8000688:	20000128 	.word	0x20000128
 800068c:	20000030 	.word	0x20000030

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b09c      	sub	sp, #112	; 0x70
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800069a:	2228      	movs	r2, #40	; 0x28
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 fe76 	bl	8004390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b4:	463b      	mov	r3, r7
 80006b6:	2234      	movs	r2, #52	; 0x34
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 fe68 	bl	8004390 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ce:	2301      	movs	r3, #1
 80006d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 ffb8 	bl	800165c <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006f2:	f000 fac1 	bl	8000c78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000710:	2102      	movs	r1, #2
 8000712:	4618      	mov	r0, r3
 8000714:	f001 feaa 	bl	800246c <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800071e:	f000 faab 	bl	8000c78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM17;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <SystemClock_Config+0xb8>)
 8000724:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000726:	2300      	movs	r3, #0
 8000728:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 800072a:	2300      	movs	r3, #0
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800072e:	463b      	mov	r3, r7
 8000730:	4618      	mov	r0, r3
 8000732:	f002 f8d1 	bl	80028d8 <HAL_RCCEx_PeriphCLKConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800073c:	f000 fa9c 	bl	8000c78 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3770      	adds	r7, #112	; 0x70
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	00101000 	.word	0x00101000

0800074c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b096      	sub	sp, #88	; 0x58
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000752:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800075e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
 800076e:	615a      	str	r2, [r3, #20]
 8000770:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	222c      	movs	r2, #44	; 0x2c
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f003 fe09 	bl	8004390 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800077e:	4b4b      	ldr	r3, [pc, #300]	; (80008ac <MX_TIM1_Init+0x160>)
 8000780:	4a4b      	ldr	r2, [pc, #300]	; (80008b0 <MX_TIM1_Init+0x164>)
 8000782:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000784:	4b49      	ldr	r3, [pc, #292]	; (80008ac <MX_TIM1_Init+0x160>)
 8000786:	2247      	movs	r2, #71	; 0x47
 8000788:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	4b48      	ldr	r3, [pc, #288]	; (80008ac <MX_TIM1_Init+0x160>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000790:	4b46      	ldr	r3, [pc, #280]	; (80008ac <MX_TIM1_Init+0x160>)
 8000792:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000796:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000798:	4b44      	ldr	r3, [pc, #272]	; (80008ac <MX_TIM1_Init+0x160>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800079e:	4b43      	ldr	r3, [pc, #268]	; (80008ac <MX_TIM1_Init+0x160>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a4:	4b41      	ldr	r3, [pc, #260]	; (80008ac <MX_TIM1_Init+0x160>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007aa:	4840      	ldr	r0, [pc, #256]	; (80008ac <MX_TIM1_Init+0x160>)
 80007ac:	f002 faca 	bl	8002d44 <HAL_TIM_PWM_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80007b6:	f000 fa5f 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007be:	2300      	movs	r3, #0
 80007c0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007ca:	4619      	mov	r1, r3
 80007cc:	4837      	ldr	r0, [pc, #220]	; (80008ac <MX_TIM1_Init+0x160>)
 80007ce:	f003 f9a9 	bl	8003b24 <HAL_TIMEx_MasterConfigSynchronization>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007d8:	f000 fa4e 	bl	8000c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007dc:	2360      	movs	r3, #96	; 0x60
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e4:	2300      	movs	r3, #0
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007f0:	2300      	movs	r3, #0
 80007f2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007f4:	2300      	movs	r3, #0
 80007f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007fc:	2200      	movs	r2, #0
 80007fe:	4619      	mov	r1, r3
 8000800:	482a      	ldr	r0, [pc, #168]	; (80008ac <MX_TIM1_Init+0x160>)
 8000802:	f002 fbdd 	bl	8002fc0 <HAL_TIM_PWM_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800080c:	f000 fa34 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000810:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000814:	2204      	movs	r2, #4
 8000816:	4619      	mov	r1, r3
 8000818:	4824      	ldr	r0, [pc, #144]	; (80008ac <MX_TIM1_Init+0x160>)
 800081a:	f002 fbd1 	bl	8002fc0 <HAL_TIM_PWM_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000824:	f000 fa28 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000828:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800082c:	2208      	movs	r2, #8
 800082e:	4619      	mov	r1, r3
 8000830:	481e      	ldr	r0, [pc, #120]	; (80008ac <MX_TIM1_Init+0x160>)
 8000832:	f002 fbc5 	bl	8002fc0 <HAL_TIM_PWM_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800083c:	f000 fa1c 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000840:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000844:	220c      	movs	r2, #12
 8000846:	4619      	mov	r1, r3
 8000848:	4818      	ldr	r0, [pc, #96]	; (80008ac <MX_TIM1_Init+0x160>)
 800084a:	f002 fbb9 	bl	8002fc0 <HAL_TIM_PWM_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000854:	f000 fa10 	bl	8000c78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800086c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000870:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800087a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	4619      	mov	r1, r3
 800088c:	4807      	ldr	r0, [pc, #28]	; (80008ac <MX_TIM1_Init+0x160>)
 800088e:	f003 f9af 	bl	8003bf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000898:	f000 f9ee 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800089c:	4803      	ldr	r0, [pc, #12]	; (80008ac <MX_TIM1_Init+0x160>)
 800089e:	f000 fa7b 	bl	8000d98 <HAL_TIM_MspPostInit>

}
 80008a2:	bf00      	nop
 80008a4:	3758      	adds	r7, #88	; 0x58
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000dc 	.word	0x200000dc
 80008b0:	40012c00 	.word	0x40012c00

080008b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <MX_TIM2_Init+0x98>)
 80008d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_TIM2_Init+0x98>)
 80008dc:	2247      	movs	r2, #71	; 0x47
 80008de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_TIM2_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_TIM2_Init+0x98>)
 80008e8:	f04f 32ff 	mov.w	r2, #4294967295
 80008ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_TIM2_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_TIM2_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008fa:	4814      	ldr	r0, [pc, #80]	; (800094c <MX_TIM2_Init+0x98>)
 80008fc:	f002 f97e 	bl	8002bfc <HAL_TIM_Base_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000906:	f000 f9b7 	bl	8000c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	4619      	mov	r1, r3
 8000916:	480d      	ldr	r0, [pc, #52]	; (800094c <MX_TIM2_Init+0x98>)
 8000918:	f002 fc66 	bl	80031e8 <HAL_TIM_ConfigClockSource>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000922:	f000 f9a9 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	4619      	mov	r1, r3
 8000932:	4806      	ldr	r0, [pc, #24]	; (800094c <MX_TIM2_Init+0x98>)
 8000934:	f003 f8f6 	bl	8003b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800093e:	f000 f99b 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	3720      	adds	r7, #32
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000128 	.word	0x20000128

08000950 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_TIM6_Init+0x64>)
 8000962:	4a15      	ldr	r2, [pc, #84]	; (80009b8 <MX_TIM6_Init+0x68>)
 8000964:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_TIM6_Init+0x64>)
 8000968:	2247      	movs	r2, #71	; 0x47
 800096a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_TIM6_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_TIM6_Init+0x64>)
 8000974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000978:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_TIM6_Init+0x64>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <MX_TIM6_Init+0x64>)
 8000982:	f002 f93b 	bl	8002bfc <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800098c:	f000 f974 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_TIM6_Init+0x64>)
 800099e:	f003 f8c1 	bl	8003b24 <HAL_TIMEx_MasterConfigSynchronization>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80009a8:	f000 f966 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000090 	.word	0x20000090
 80009b8:	40001000 	.word	0x40001000

080009bc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b092      	sub	sp, #72	; 0x48
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
 80009d2:	615a      	str	r2, [r3, #20]
 80009d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009d6:	463b      	mov	r3, r7
 80009d8:	222c      	movs	r2, #44	; 0x2c
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 fcd7 	bl	8004390 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80009e2:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <MX_TIM17_Init+0xec>)
 80009e4:	4a31      	ldr	r2, [pc, #196]	; (8000aac <MX_TIM17_Init+0xf0>)
 80009e6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 72-1;
 80009e8:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <MX_TIM17_Init+0xec>)
 80009ea:	2247      	movs	r2, #71	; 0x47
 80009ec:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <MX_TIM17_Init+0xec>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000;
 80009f4:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <MX_TIM17_Init+0xec>)
 80009f6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80009fa:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <MX_TIM17_Init+0xec>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a02:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <MX_TIM17_Init+0xec>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <MX_TIM17_Init+0xec>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a0e:	4826      	ldr	r0, [pc, #152]	; (8000aa8 <MX_TIM17_Init+0xec>)
 8000a10:	f002 f8f4 	bl	8002bfc <HAL_TIM_Base_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000a1a:	f000 f92d 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000a1e:	4822      	ldr	r0, [pc, #136]	; (8000aa8 <MX_TIM17_Init+0xec>)
 8000a20:	f002 f990 	bl	8002d44 <HAL_TIM_PWM_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000a2a:	f000 f925 	bl	8000c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2e:	2360      	movs	r3, #96	; 0x60
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a36:	2300      	movs	r3, #0
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4619      	mov	r1, r3
 8000a52:	4815      	ldr	r0, [pc, #84]	; (8000aa8 <MX_TIM17_Init+0xec>)
 8000a54:	f002 fab4 	bl	8002fc0 <HAL_TIM_PWM_ConfigChannel>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000a5e:	f000 f90b 	bl	8000c78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000a84:	463b      	mov	r3, r7
 8000a86:	4619      	mov	r1, r3
 8000a88:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <MX_TIM17_Init+0xec>)
 8000a8a:	f003 f8b1 	bl	8003bf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000a94:	f000 f8f0 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <MX_TIM17_Init+0xec>)
 8000a9a:	f000 f97d 	bl	8000d98 <HAL_TIM_MspPostInit>

}
 8000a9e:	bf00      	nop
 8000aa0:	3748      	adds	r7, #72	; 0x48
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000038 	.word	0x20000038
 8000aac:	40014800 	.word	0x40014800

08000ab0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000ab6:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <MX_USART2_UART_Init+0x5c>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000abc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_USART2_UART_Init+0x58>)
 8000af4:	f003 f8f4 	bl	8003ce0 <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000afe:	f000 f8bb 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000174 	.word	0x20000174
 8000b0c:	40004400 	.word	0x40004400

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	4b51      	ldr	r3, [pc, #324]	; (8000c6c <MX_GPIO_Init+0x15c>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	4a50      	ldr	r2, [pc, #320]	; (8000c6c <MX_GPIO_Init+0x15c>)
 8000b2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b30:	6153      	str	r3, [r2, #20]
 8000b32:	4b4e      	ldr	r3, [pc, #312]	; (8000c6c <MX_GPIO_Init+0x15c>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b3e:	4b4b      	ldr	r3, [pc, #300]	; (8000c6c <MX_GPIO_Init+0x15c>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	4a4a      	ldr	r2, [pc, #296]	; (8000c6c <MX_GPIO_Init+0x15c>)
 8000b44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b48:	6153      	str	r3, [r2, #20]
 8000b4a:	4b48      	ldr	r3, [pc, #288]	; (8000c6c <MX_GPIO_Init+0x15c>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b45      	ldr	r3, [pc, #276]	; (8000c6c <MX_GPIO_Init+0x15c>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4a44      	ldr	r2, [pc, #272]	; (8000c6c <MX_GPIO_Init+0x15c>)
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	6153      	str	r3, [r2, #20]
 8000b62:	4b42      	ldr	r3, [pc, #264]	; (8000c6c <MX_GPIO_Init+0x15c>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b3f      	ldr	r3, [pc, #252]	; (8000c6c <MX_GPIO_Init+0x15c>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	4a3e      	ldr	r2, [pc, #248]	; (8000c6c <MX_GPIO_Init+0x15c>)
 8000b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b78:	6153      	str	r3, [r2, #20]
 8000b7a:	4b3c      	ldr	r3, [pc, #240]	; (8000c6c <MX_GPIO_Init+0x15c>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|Ultrasonic_3_Trigger_Pin|Ultrasonic_4_Trigger_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f242 2120 	movw	r1, #8736	; 0x2220
 8000b8c:	4838      	ldr	r0, [pc, #224]	; (8000c70 <MX_GPIO_Init+0x160>)
 8000b8e:	f000 fd35 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Ultrasonic_1_Trigger_Pin|Ultrasonic_2_Trigger_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9c:	f000 fd2e 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	482f      	ldr	r0, [pc, #188]	; (8000c74 <MX_GPIO_Init+0x164>)
 8000bb8:	f000 fbae 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Ultrasonic_3_Trigger_Pin Ultrasonic_4_Trigger_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Ultrasonic_3_Trigger_Pin|Ultrasonic_4_Trigger_Pin;
 8000bbc:	f242 2320 	movw	r3, #8736	; 0x2220
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4826      	ldr	r0, [pc, #152]	; (8000c70 <MX_GPIO_Init+0x160>)
 8000bd6:	f000 fb9f 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ultrasonic_1_Trigger_Pin Ultrasonic_2_Trigger_Pin */
  GPIO_InitStruct.Pin = Ultrasonic_1_Trigger_Pin|Ultrasonic_2_Trigger_Pin;
 8000bda:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf6:	f000 fb8f 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ultrasonic_1_Echo_Pin Ultrasonic_2_Echo_Pin */
  GPIO_InitStruct.Pin = Ultrasonic_1_Echo_Pin|Ultrasonic_2_Echo_Pin;
 8000bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c00:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c14:	f000 fb80 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ultrasonic_3_Echo_Pin Ultrasonic_4_Echo_Pin */
  GPIO_InitStruct.Pin = Ultrasonic_3_Echo_Pin|Ultrasonic_4_Echo_Pin;
 8000c18:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c1e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4810      	ldr	r0, [pc, #64]	; (8000c70 <MX_GPIO_Init+0x160>)
 8000c30:	f000 fb72 	bl	8001318 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	200a      	movs	r0, #10
 8000c3a:	f000 fb36 	bl	80012aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c3e:	200a      	movs	r0, #10
 8000c40:	f000 fb4f 	bl	80012e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	2017      	movs	r0, #23
 8000c4a:	f000 fb2e 	bl	80012aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c4e:	2017      	movs	r0, #23
 8000c50:	f000 fb47 	bl	80012e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2100      	movs	r1, #0
 8000c58:	2028      	movs	r0, #40	; 0x28
 8000c5a:	f000 fb26 	bl	80012aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c5e:	2028      	movs	r0, #40	; 0x28
 8000c60:	f000 fb3f 	bl	80012e2 <HAL_NVIC_EnableIRQ>

}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	48000400 	.word	0x48000400
 8000c74:	48000800 	.word	0x48000800

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <Error_Handler+0x8>
	...

08000c84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_MspInit+0x44>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <HAL_MspInit+0x44>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6193      	str	r3, [r2, #24]
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_MspInit+0x44>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_MspInit+0x44>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_MspInit+0x44>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	61d3      	str	r3, [r2, #28]
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_MspInit+0x44>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cba:	2007      	movs	r0, #7
 8000cbc:	f000 faea 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40021000 	.word	0x40021000

08000ccc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_TIM_PWM_MspInit+0x38>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d10b      	bne.n	8000cf6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ce4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ce8:	6193      	str	r3, [r2, #24]
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40012c00 	.word	0x40012c00
 8000d08:	40021000 	.word	0x40021000

08000d0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d1c:	d10c      	bne.n	8000d38 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <HAL_TIM_Base_MspInit+0x80>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	4a1a      	ldr	r2, [pc, #104]	; (8000d8c <HAL_TIM_Base_MspInit+0x80>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	61d3      	str	r3, [r2, #28]
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_TIM_Base_MspInit+0x80>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000d36:	e022      	b.n	8000d7e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM6)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <HAL_TIM_Base_MspInit+0x84>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d10c      	bne.n	8000d5c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_TIM_Base_MspInit+0x80>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a11      	ldr	r2, [pc, #68]	; (8000d8c <HAL_TIM_Base_MspInit+0x80>)
 8000d48:	f043 0310 	orr.w	r3, r3, #16
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_TIM_Base_MspInit+0x80>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
}
 8000d5a:	e010      	b.n	8000d7e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM17)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <HAL_TIM_Base_MspInit+0x88>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d10b      	bne.n	8000d7e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_TIM_Base_MspInit+0x80>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_TIM_Base_MspInit+0x80>)
 8000d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d70:	6193      	str	r3, [r2, #24]
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_TIM_Base_MspInit+0x80>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
}
 8000d7e:	bf00      	nop
 8000d80:	371c      	adds	r7, #28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40001000 	.word	0x40001000
 8000d94:	40014800 	.word	0x40014800

08000d98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a22      	ldr	r2, [pc, #136]	; (8000e40 <HAL_TIM_MspPostInit+0xa8>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d11c      	bne.n	8000df4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <HAL_TIM_MspPostInit+0xac>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	4a21      	ldr	r2, [pc, #132]	; (8000e44 <HAL_TIM_MspPostInit+0xac>)
 8000dc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dc4:	6153      	str	r3, [r2, #20]
 8000dc6:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <HAL_TIM_MspPostInit+0xac>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = DC_Motor_PWM_CH1_Pin|DC_Motor_PWM_CH2_Pin|DC_Motor_PWM_CH3_Pin|DC_Motor_PWM_CH4_Pin;
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000de2:	2302      	movs	r3, #2
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4816      	ldr	r0, [pc, #88]	; (8000e48 <HAL_TIM_MspPostInit+0xb0>)
 8000dee:	f000 fa93 	bl	8001318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000df2:	e021      	b.n	8000e38 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM17)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <HAL_TIM_MspPostInit+0xb4>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d11c      	bne.n	8000e38 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_TIM_MspPostInit+0xac>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <HAL_TIM_MspPostInit+0xac>)
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	6153      	str	r3, [r2, #20]
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_TIM_MspPostInit+0xac>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DC_Motor_Brush_PWM_Pin;
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000e26:	2301      	movs	r3, #1
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DC_Motor_Brush_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f000 fa70 	bl	8001318 <HAL_GPIO_Init>
}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40012c00 	.word	0x40012c00
 8000e44:	40021000 	.word	0x40021000
 8000e48:	48000800 	.word	0x48000800
 8000e4c:	40014800 	.word	0x40014800

08000e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <HAL_UART_MspInit+0x7c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d128      	bne.n	8000ec4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_UART_MspInit+0x80>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	4a16      	ldr	r2, [pc, #88]	; (8000ed0 <HAL_UART_MspInit+0x80>)
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	61d3      	str	r3, [r2, #28]
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_UART_MspInit+0x80>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_UART_MspInit+0x80>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <HAL_UART_MspInit+0x80>)
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	6153      	str	r3, [r2, #20]
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_UART_MspInit+0x80>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ea2:	230c      	movs	r3, #12
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec0:	f000 fa2a 	bl	8001318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40004400 	.word	0x40004400
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f20:	f000 f8a4 	bl	800106c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ultrasonic_3_Echo_Pin);
 8000f2c:	2010      	movs	r0, #16
 8000f2e:	f000 fb7d 	bl	800162c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ultrasonic_1_Trigger_Pin);
 8000f3a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f3e:	f000 fb75 	bl	800162c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Ultrasonic_1_Echo_Pin);
 8000f42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f46:	f000 fb71 	bl	800162c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ultrasonic_2_Echo_Pin);
 8000f52:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f56:	f000 fb69 	bl	800162c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f5a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f5e:	f000 fb65 	bl	800162c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f92:	490e      	ldr	r1, [pc, #56]	; (8000fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <LoopForever+0xe>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa8:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <LoopForever+0x16>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fb6:	f7ff ffd7 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f003 f9c5 	bl	8004348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fbe:	f7ff faf9 	bl	80005b4 <main>

08000fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fc4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fd0:	080043f8 	.word	0x080043f8
  ldr r2, =_sbss
 8000fd4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000fd8:	200001fc 	.word	0x200001fc

08000fdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC1_IRQHandler>
	...

08000fe0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <HAL_Init+0x28>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_Init+0x28>)
 8000fea:	f043 0310 	orr.w	r3, r3, #16
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 f94f 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f000 f808 	bl	800100c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffc:	f7ff fe42 	bl	8000c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40022000 	.word	0x40022000

0800100c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_InitTick+0x54>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0x58>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f967 	bl	80012fe <HAL_SYSTICK_Config>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e00e      	b.n	8001058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d80a      	bhi.n	8001056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f000 f92f 	bl	80012aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <HAL_InitTick+0x5c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e000      	b.n	8001058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000000 	.word	0x20000000
 8001064:	20000008 	.word	0x20000008
 8001068:	20000004 	.word	0x20000004

0800106c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_IncTick+0x20>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x24>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <HAL_IncTick+0x24>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000008 	.word	0x20000008
 8001090:	200001f8 	.word	0x200001f8

08001094 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;  
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_GetTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	200001f8 	.word	0x200001f8

080010ac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b4:	f7ff ffee 	bl	8001094 <HAL_GetTick>
 80010b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c4:	d005      	beq.n	80010d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_Delay+0x44>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010d2:	bf00      	nop
 80010d4:	f7ff ffde 	bl	8001094 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d8f7      	bhi.n	80010d4 <HAL_Delay+0x28>
  {
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008

080010f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800111c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0b      	blt.n	8001182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4907      	ldr	r1, [pc, #28]	; (8001190 <__NVIC_EnableIRQ+0x38>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000e100 	.word	0xe000e100

08001194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db0a      	blt.n	80011be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	490c      	ldr	r1, [pc, #48]	; (80011e0 <__NVIC_SetPriority+0x4c>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011bc:	e00a      	b.n	80011d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4908      	ldr	r1, [pc, #32]	; (80011e4 <__NVIC_SetPriority+0x50>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	3b04      	subs	r3, #4
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	761a      	strb	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f1c3 0307 	rsb	r3, r3, #7
 8001202:	2b04      	cmp	r3, #4
 8001204:	bf28      	it	cs
 8001206:	2304      	movcs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	2b06      	cmp	r3, #6
 8001210:	d902      	bls.n	8001218 <NVIC_EncodePriority+0x30>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b03      	subs	r3, #3
 8001216:	e000      	b.n	800121a <NVIC_EncodePriority+0x32>
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	401a      	ands	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43d9      	mvns	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	4313      	orrs	r3, r2
         );
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001260:	d301      	bcc.n	8001266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001262:	2301      	movs	r3, #1
 8001264:	e00f      	b.n	8001286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <SysTick_Config+0x40>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126e:	210f      	movs	r1, #15
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f7ff ff8e 	bl	8001194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <SysTick_Config+0x40>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <SysTick_Config+0x40>)
 8001280:	2207      	movs	r2, #7
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	e000e010 	.word	0xe000e010

08001294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff29 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012bc:	f7ff ff3e 	bl	800113c <__NVIC_GetPriorityGrouping>
 80012c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff ff8e 	bl	80011e8 <NVIC_EncodePriority>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff5d 	bl	8001194 <__NVIC_SetPriority>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff31 	bl	8001158 <__NVIC_EnableIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffa2 	bl	8001250 <SysTick_Config>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001326:	e14e      	b.n	80015c6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	2101      	movs	r1, #1
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	4013      	ands	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 8140 	beq.w	80015c0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b01      	cmp	r3, #1
 800134a:	d005      	beq.n	8001358 <HAL_GPIO_Init+0x40>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d130      	bne.n	80013ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800138e:	2201      	movs	r2, #1
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	f003 0201 	and.w	r2, r3, #1
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d017      	beq.n	80013f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	2203      	movs	r2, #3
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d123      	bne.n	800144a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800140e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	220f      	movs	r2, #15
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	691a      	ldr	r2, [r3, #16]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	08da      	lsrs	r2, r3, #3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3208      	adds	r2, #8
 8001444:	6939      	ldr	r1, [r7, #16]
 8001446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0203 	and.w	r2, r3, #3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 809a 	beq.w	80015c0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148c:	4b55      	ldr	r3, [pc, #340]	; (80015e4 <HAL_GPIO_Init+0x2cc>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a54      	ldr	r2, [pc, #336]	; (80015e4 <HAL_GPIO_Init+0x2cc>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	4b52      	ldr	r3, [pc, #328]	; (80015e4 <HAL_GPIO_Init+0x2cc>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014a4:	4a50      	ldr	r2, [pc, #320]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3302      	adds	r3, #2
 80014ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	220f      	movs	r2, #15
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014ce:	d013      	beq.n	80014f8 <HAL_GPIO_Init+0x1e0>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a46      	ldr	r2, [pc, #280]	; (80015ec <HAL_GPIO_Init+0x2d4>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d00d      	beq.n	80014f4 <HAL_GPIO_Init+0x1dc>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a45      	ldr	r2, [pc, #276]	; (80015f0 <HAL_GPIO_Init+0x2d8>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d007      	beq.n	80014f0 <HAL_GPIO_Init+0x1d8>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a44      	ldr	r2, [pc, #272]	; (80015f4 <HAL_GPIO_Init+0x2dc>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d101      	bne.n	80014ec <HAL_GPIO_Init+0x1d4>
 80014e8:	2303      	movs	r3, #3
 80014ea:	e006      	b.n	80014fa <HAL_GPIO_Init+0x1e2>
 80014ec:	2305      	movs	r3, #5
 80014ee:	e004      	b.n	80014fa <HAL_GPIO_Init+0x1e2>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e002      	b.n	80014fa <HAL_GPIO_Init+0x1e2>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <HAL_GPIO_Init+0x1e2>
 80014f8:	2300      	movs	r3, #0
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	f002 0203 	and.w	r2, r2, #3
 8001500:	0092      	lsls	r2, r2, #2
 8001502:	4093      	lsls	r3, r2
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800150a:	4937      	ldr	r1, [pc, #220]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001518:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <HAL_GPIO_Init+0x2e0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800153c:	4a2e      	ldr	r2, [pc, #184]	; (80015f8 <HAL_GPIO_Init+0x2e0>)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001542:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <HAL_GPIO_Init+0x2e0>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001566:	4a24      	ldr	r2, [pc, #144]	; (80015f8 <HAL_GPIO_Init+0x2e0>)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <HAL_GPIO_Init+0x2e0>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001590:	4a19      	ldr	r2, [pc, #100]	; (80015f8 <HAL_GPIO_Init+0x2e0>)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_GPIO_Init+0x2e0>)
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015ba:	4a0f      	ldr	r2, [pc, #60]	; (80015f8 <HAL_GPIO_Init+0x2e0>)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3301      	adds	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f47f aea9 	bne.w	8001328 <HAL_GPIO_Init+0x10>
  }
}
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010000 	.word	0x40010000
 80015ec:	48000400 	.word	0x48000400
 80015f0:	48000800 	.word	0x48000800
 80015f4:	48000c00 	.word	0x48000c00
 80015f8:	40010400 	.word	0x40010400

080015fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800160c:	787b      	ldrb	r3, [r7, #1]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001618:	e002      	b.n	8001620 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800161a:	887a      	ldrh	r2, [r7, #2]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	4013      	ands	r3, r2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d006      	beq.n	8001650 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff78 	bl	8000540 <HAL_GPIO_EXTI_Callback>
  }
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40010400 	.word	0x40010400

0800165c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001662:	af00      	add	r7, sp, #0
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	f000 bef4 	b.w	800245e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 816a 	beq.w	800195a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001686:	4bb3      	ldr	r3, [pc, #716]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b04      	cmp	r3, #4
 8001690:	d00c      	beq.n	80016ac <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001692:	4bb0      	ldr	r3, [pc, #704]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b08      	cmp	r3, #8
 800169c:	d159      	bne.n	8001752 <HAL_RCC_OscConfig+0xf6>
 800169e:	4bad      	ldr	r3, [pc, #692]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016aa:	d152      	bne.n	8001752 <HAL_RCC_OscConfig+0xf6>
 80016ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016b0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c4:	fab3 f383 	clz	r3, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d102      	bne.n	80016de <HAL_RCC_OscConfig+0x82>
 80016d8:	4b9e      	ldr	r3, [pc, #632]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	e015      	b.n	800170a <HAL_RCC_OscConfig+0xae>
 80016de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80016f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016f6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80016fa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80016fe:	fa93 f3a3 	rbit	r3, r3
 8001702:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001706:	4b93      	ldr	r3, [pc, #588]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800170e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001712:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001716:	fa92 f2a2 	rbit	r2, r2
 800171a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800171e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001722:	fab2 f282 	clz	r2, r2
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	f042 0220 	orr.w	r2, r2, #32
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	f002 021f 	and.w	r2, r2, #31
 8001732:	2101      	movs	r1, #1
 8001734:	fa01 f202 	lsl.w	r2, r1, r2
 8001738:	4013      	ands	r3, r2
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 810c 	beq.w	8001958 <HAL_RCC_OscConfig+0x2fc>
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	f040 8106 	bne.w	8001958 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	f000 be86 	b.w	800245e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175c:	d106      	bne.n	800176c <HAL_RCC_OscConfig+0x110>
 800175e:	4b7d      	ldr	r3, [pc, #500]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a7c      	ldr	r2, [pc, #496]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 8001764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e030      	b.n	80017ce <HAL_RCC_OscConfig+0x172>
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10c      	bne.n	8001790 <HAL_RCC_OscConfig+0x134>
 8001776:	4b77      	ldr	r3, [pc, #476]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a76      	ldr	r2, [pc, #472]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 800177c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	4b74      	ldr	r3, [pc, #464]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a73      	ldr	r2, [pc, #460]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 8001788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e01e      	b.n	80017ce <HAL_RCC_OscConfig+0x172>
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800179a:	d10c      	bne.n	80017b6 <HAL_RCC_OscConfig+0x15a>
 800179c:	4b6d      	ldr	r3, [pc, #436]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a6c      	ldr	r2, [pc, #432]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 80017a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b6a      	ldr	r3, [pc, #424]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a69      	ldr	r2, [pc, #420]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 80017ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	e00b      	b.n	80017ce <HAL_RCC_OscConfig+0x172>
 80017b6:	4b67      	ldr	r3, [pc, #412]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a66      	ldr	r2, [pc, #408]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 80017bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	4b64      	ldr	r3, [pc, #400]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a63      	ldr	r2, [pc, #396]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 80017c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017cc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017ce:	4b61      	ldr	r3, [pc, #388]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	f023 020f 	bic.w	r2, r3, #15
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	495d      	ldr	r1, [pc, #372]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d059      	beq.n	80018a0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fc52 	bl	8001094 <HAL_GetTick>
 80017f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f4:	e00a      	b.n	800180c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f6:	f7ff fc4d 	bl	8001094 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	d902      	bls.n	800180c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	f000 be29 	b.w	800245e <HAL_RCC_OscConfig+0xe02>
 800180c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001810:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001818:	fa93 f3a3 	rbit	r3, r3
 800181c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001820:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001824:	fab3 f383 	clz	r3, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	b2db      	uxtb	r3, r3
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b01      	cmp	r3, #1
 8001836:	d102      	bne.n	800183e <HAL_RCC_OscConfig+0x1e2>
 8001838:	4b46      	ldr	r3, [pc, #280]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	e015      	b.n	800186a <HAL_RCC_OscConfig+0x20e>
 800183e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001842:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800184a:	fa93 f3a3 	rbit	r3, r3
 800184e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001852:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001856:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800185a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800185e:	fa93 f3a3 	rbit	r3, r3
 8001862:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001866:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800186e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001872:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001876:	fa92 f2a2 	rbit	r2, r2
 800187a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800187e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001882:	fab2 f282 	clz	r2, r2
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	f042 0220 	orr.w	r2, r2, #32
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	f002 021f 	and.w	r2, r2, #31
 8001892:	2101      	movs	r1, #1
 8001894:	fa01 f202 	lsl.w	r2, r1, r2
 8001898:	4013      	ands	r3, r2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0ab      	beq.n	80017f6 <HAL_RCC_OscConfig+0x19a>
 800189e:	e05c      	b.n	800195a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff fbf8 	bl	8001094 <HAL_GetTick>
 80018a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018aa:	f7ff fbf3 	bl	8001094 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	; 0x64
 80018b8:	d902      	bls.n	80018c0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	f000 bdcf 	b.w	800245e <HAL_RCC_OscConfig+0xe02>
 80018c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80018d4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d102      	bne.n	80018f2 <HAL_RCC_OscConfig+0x296>
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	e015      	b.n	800191e <HAL_RCC_OscConfig+0x2c2>
 80018f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001906:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800190a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800190e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_RCC_OscConfig+0x2f8>)
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001922:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001926:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800192a:	fa92 f2a2 	rbit	r2, r2
 800192e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001932:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001936:	fab2 f282 	clz	r2, r2
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	f042 0220 	orr.w	r2, r2, #32
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	f002 021f 	and.w	r2, r2, #31
 8001946:	2101      	movs	r1, #1
 8001948:	fa01 f202 	lsl.w	r2, r1, r2
 800194c:	4013      	ands	r3, r2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1ab      	bne.n	80018aa <HAL_RCC_OscConfig+0x24e>
 8001952:	e002      	b.n	800195a <HAL_RCC_OscConfig+0x2fe>
 8001954:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 816f 	beq.w	8001c48 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800196a:	4bd0      	ldr	r3, [pc, #832]	; (8001cac <HAL_RCC_OscConfig+0x650>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001976:	4bcd      	ldr	r3, [pc, #820]	; (8001cac <HAL_RCC_OscConfig+0x650>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b08      	cmp	r3, #8
 8001980:	d16c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x400>
 8001982:	4bca      	ldr	r3, [pc, #808]	; (8001cac <HAL_RCC_OscConfig+0x650>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d166      	bne.n	8001a5c <HAL_RCC_OscConfig+0x400>
 800198e:	2302      	movs	r3, #2
 8001990:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001998:	fa93 f3a3 	rbit	r3, r3
 800199c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80019a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d102      	bne.n	80019be <HAL_RCC_OscConfig+0x362>
 80019b8:	4bbc      	ldr	r3, [pc, #752]	; (8001cac <HAL_RCC_OscConfig+0x650>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	e013      	b.n	80019e6 <HAL_RCC_OscConfig+0x38a>
 80019be:	2302      	movs	r3, #2
 80019c0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80019d0:	2302      	movs	r3, #2
 80019d2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80019d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80019e2:	4bb2      	ldr	r3, [pc, #712]	; (8001cac <HAL_RCC_OscConfig+0x650>)
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	2202      	movs	r2, #2
 80019e8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80019ec:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019f0:	fa92 f2a2 	rbit	r2, r2
 80019f4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80019f8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80019fc:	fab2 f282 	clz	r2, r2
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	f042 0220 	orr.w	r2, r2, #32
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	f002 021f 	and.w	r2, r2, #31
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d007      	beq.n	8001a28 <HAL_RCC_OscConfig+0x3cc>
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d002      	beq.n	8001a28 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	f000 bd1b 	b.w	800245e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a28:	4ba0      	ldr	r3, [pc, #640]	; (8001cac <HAL_RCC_OscConfig+0x650>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	21f8      	movs	r1, #248	; 0xf8
 8001a38:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a40:	fa91 f1a1 	rbit	r1, r1
 8001a44:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001a48:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001a4c:	fab1 f181 	clz	r1, r1
 8001a50:	b2c9      	uxtb	r1, r1
 8001a52:	408b      	lsls	r3, r1
 8001a54:	4995      	ldr	r1, [pc, #596]	; (8001cac <HAL_RCC_OscConfig+0x650>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5a:	e0f5      	b.n	8001c48 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8085 	beq.w	8001b72 <HAL_RCC_OscConfig+0x516>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001a7a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2301      	movs	r3, #1
 8001a92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff fafe 	bl	8001094 <HAL_GetTick>
 8001a98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9c:	e00a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9e:	f7ff faf9 	bl	8001094 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d902      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	f000 bcd5 	b.w	800245e <HAL_RCC_OscConfig+0xe02>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001abe:	fa93 f3a3 	rbit	r3, r3
 8001ac2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001ac6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	095b      	lsrs	r3, r3, #5
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d102      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x488>
 8001ade:	4b73      	ldr	r3, [pc, #460]	; (8001cac <HAL_RCC_OscConfig+0x650>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	e013      	b.n	8001b0c <HAL_RCC_OscConfig+0x4b0>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001af6:	2302      	movs	r3, #2
 8001af8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001afc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001b00:	fa93 f3a3 	rbit	r3, r3
 8001b04:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b08:	4b68      	ldr	r3, [pc, #416]	; (8001cac <HAL_RCC_OscConfig+0x650>)
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001b12:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b16:	fa92 f2a2 	rbit	r2, r2
 8001b1a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001b1e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001b22:	fab2 f282 	clz	r2, r2
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	f042 0220 	orr.w	r2, r2, #32
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	f002 021f 	and.w	r2, r2, #31
 8001b32:	2101      	movs	r1, #1
 8001b34:	fa01 f202 	lsl.w	r2, r1, r2
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0af      	beq.n	8001a9e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3e:	4b5b      	ldr	r3, [pc, #364]	; (8001cac <HAL_RCC_OscConfig+0x650>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	21f8      	movs	r1, #248	; 0xf8
 8001b4e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b56:	fa91 f1a1 	rbit	r1, r1
 8001b5a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001b5e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001b62:	fab1 f181 	clz	r1, r1
 8001b66:	b2c9      	uxtb	r1, r1
 8001b68:	408b      	lsls	r3, r1
 8001b6a:	4950      	ldr	r1, [pc, #320]	; (8001cac <HAL_RCC_OscConfig+0x650>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]
 8001b70:	e06a      	b.n	8001c48 <HAL_RCC_OscConfig+0x5ec>
 8001b72:	2301      	movs	r3, #1
 8001b74:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001b84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	461a      	mov	r2, r3
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7ff fa79 	bl	8001094 <HAL_GetTick>
 8001ba2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba6:	e00a      	b.n	8001bbe <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba8:	f7ff fa74 	bl	8001094 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d902      	bls.n	8001bbe <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	f000 bc50 	b.w	800245e <HAL_RCC_OscConfig+0xe02>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d102      	bne.n	8001bee <HAL_RCC_OscConfig+0x592>
 8001be8:	4b30      	ldr	r3, [pc, #192]	; (8001cac <HAL_RCC_OscConfig+0x650>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	e013      	b.n	8001c16 <HAL_RCC_OscConfig+0x5ba>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c00:	2302      	movs	r3, #2
 8001c02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c06:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001c12:	4b26      	ldr	r3, [pc, #152]	; (8001cac <HAL_RCC_OscConfig+0x650>)
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	2202      	movs	r2, #2
 8001c18:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001c1c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c20:	fa92 f2a2 	rbit	r2, r2
 8001c24:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001c28:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c2c:	fab2 f282 	clz	r2, r2
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	f042 0220 	orr.w	r2, r2, #32
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	f002 021f 	and.w	r2, r2, #31
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1af      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80da 	beq.w	8001e0c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d069      	beq.n	8001d36 <HAL_RCC_OscConfig+0x6da>
 8001c62:	2301      	movs	r3, #1
 8001c64:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c78:	fab3 f383 	clz	r3, r3
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_RCC_OscConfig+0x654>)
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	461a      	mov	r2, r3
 8001c88:	2301      	movs	r3, #1
 8001c8a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8c:	f7ff fa02 	bl	8001094 <HAL_GetTick>
 8001c90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c94:	e00e      	b.n	8001cb4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c96:	f7ff f9fd 	bl	8001094 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d906      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e3d9      	b.n	800245e <HAL_RCC_OscConfig+0xe02>
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	10908120 	.word	0x10908120
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001cc6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cca:	2202      	movs	r2, #2
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	fa93 f2a3 	rbit	r2, r3
 8001cd8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	fa93 f2a3 	rbit	r2, r3
 8001cf0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001cf4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	4ba5      	ldr	r3, [pc, #660]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001cf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cfa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001cfe:	2102      	movs	r1, #2
 8001d00:	6019      	str	r1, [r3, #0]
 8001d02:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fa93 f1a3 	rbit	r1, r3
 8001d0c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d10:	6019      	str	r1, [r3, #0]
  return result;
 8001d12:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fab3 f383 	clz	r3, r3
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	2101      	movs	r1, #1
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0b0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x63a>
 8001d34:	e06a      	b.n	8001e0c <HAL_RCC_OscConfig+0x7b0>
 8001d36:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	fa93 f2a3 	rbit	r2, r3
 8001d48:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d4c:	601a      	str	r2, [r3, #0]
  return result;
 8001d4e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d52:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b8c      	ldr	r3, [pc, #560]	; (8001f90 <HAL_RCC_OscConfig+0x934>)
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	461a      	mov	r2, r3
 8001d64:	2300      	movs	r3, #0
 8001d66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d68:	f7ff f994 	bl	8001094 <HAL_GetTick>
 8001d6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d70:	e009      	b.n	8001d86 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d72:	f7ff f98f 	bl	8001094 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e36b      	b.n	800245e <HAL_RCC_OscConfig+0xe02>
 8001d86:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	fa93 f2a3 	rbit	r2, r3
 8001d98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001da2:	2202      	movs	r2, #2
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	fa93 f2a3 	rbit	r2, r3
 8001db0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001dba:	2202      	movs	r2, #2
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	fa93 f2a3 	rbit	r2, r3
 8001dc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dcc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dce:	4b6f      	ldr	r3, [pc, #444]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dd2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	6019      	str	r1, [r3, #0]
 8001dda:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	fa93 f1a3 	rbit	r1, r3
 8001de4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001de8:	6019      	str	r1, [r3, #0]
  return result;
 8001dea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	2101      	movs	r1, #1
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1b2      	bne.n	8001d72 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8158 	beq.w	80020cc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e22:	4b5a      	ldr	r3, [pc, #360]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d112      	bne.n	8001e54 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	4b57      	ldr	r3, [pc, #348]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	4a56      	ldr	r2, [pc, #344]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e38:	61d3      	str	r3, [r2, #28]
 8001e3a:	4b54      	ldr	r3, [pc, #336]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e42:	f107 0308 	add.w	r3, r7, #8
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	f107 0308 	add.w	r3, r7, #8
 8001e4c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e54:	4b4f      	ldr	r3, [pc, #316]	; (8001f94 <HAL_RCC_OscConfig+0x938>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d11a      	bne.n	8001e96 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e60:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <HAL_RCC_OscConfig+0x938>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a4b      	ldr	r2, [pc, #300]	; (8001f94 <HAL_RCC_OscConfig+0x938>)
 8001e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6c:	f7ff f912 	bl	8001094 <HAL_GetTick>
 8001e70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	e009      	b.n	8001e8a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e76:	f7ff f90d 	bl	8001094 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	; 0x64
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e2e9      	b.n	800245e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b42      	ldr	r3, [pc, #264]	; (8001f94 <HAL_RCC_OscConfig+0x938>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0ef      	beq.n	8001e76 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x852>
 8001ea0:	4b3a      	ldr	r3, [pc, #232]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a39      	ldr	r2, [pc, #228]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	e02f      	b.n	8001f0e <HAL_RCC_OscConfig+0x8b2>
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10c      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x876>
 8001eb8:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4a33      	ldr	r2, [pc, #204]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001ebe:	f023 0301 	bic.w	r3, r3, #1
 8001ec2:	6213      	str	r3, [r2, #32]
 8001ec4:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4a30      	ldr	r2, [pc, #192]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001eca:	f023 0304 	bic.w	r3, r3, #4
 8001ece:	6213      	str	r3, [r2, #32]
 8001ed0:	e01d      	b.n	8001f0e <HAL_RCC_OscConfig+0x8b2>
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b05      	cmp	r3, #5
 8001eda:	d10c      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x89a>
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4a2a      	ldr	r2, [pc, #168]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	6213      	str	r3, [r2, #32]
 8001ee8:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a27      	ldr	r2, [pc, #156]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6213      	str	r3, [r2, #32]
 8001ef4:	e00b      	b.n	8001f0e <HAL_RCC_OscConfig+0x8b2>
 8001ef6:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a24      	ldr	r2, [pc, #144]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	6213      	str	r3, [r2, #32]
 8001f02:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a21      	ldr	r2, [pc, #132]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001f08:	f023 0304 	bic.w	r3, r3, #4
 8001f0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d06b      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f18:	f7ff f8bc 	bl	8001094 <HAL_GetTick>
 8001f1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f20:	e00b      	b.n	8001f3a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7ff f8b7 	bl	8001094 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e291      	b.n	800245e <HAL_RCC_OscConfig+0xe02>
 8001f3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f3e:	2202      	movs	r2, #2
 8001f40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	fa93 f2a3 	rbit	r2, r3
 8001f4c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f56:	2202      	movs	r2, #2
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	fa93 f2a3 	rbit	r2, r3
 8001f64:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f68:	601a      	str	r2, [r3, #0]
  return result;
 8001f6a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f043 0302 	orr.w	r3, r3, #2
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d109      	bne.n	8001f98 <HAL_RCC_OscConfig+0x93c>
 8001f84:	4b01      	ldr	r3, [pc, #4]	; (8001f8c <HAL_RCC_OscConfig+0x930>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	e014      	b.n	8001fb4 <HAL_RCC_OscConfig+0x958>
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	10908120 	.word	0x10908120
 8001f94:	40007000 	.word	0x40007000
 8001f98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	fa93 f2a3 	rbit	r2, r3
 8001faa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	4bbb      	ldr	r3, [pc, #748]	; (80022a0 <HAL_RCC_OscConfig+0xc44>)
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001fb8:	2102      	movs	r1, #2
 8001fba:	6011      	str	r1, [r2, #0]
 8001fbc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	fa92 f1a2 	rbit	r1, r2
 8001fc6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001fca:	6011      	str	r1, [r2, #0]
  return result;
 8001fcc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	fab2 f282 	clz	r2, r2
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	f002 021f 	and.w	r2, r2, #31
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d099      	beq.n	8001f22 <HAL_RCC_OscConfig+0x8c6>
 8001fee:	e063      	b.n	80020b8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff0:	f7ff f850 	bl	8001094 <HAL_GetTick>
 8001ff4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff8:	e00b      	b.n	8002012 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ffa:	f7ff f84b 	bl	8001094 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e225      	b.n	800245e <HAL_RCC_OscConfig+0xe02>
 8002012:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002016:	2202      	movs	r2, #2
 8002018:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	fa93 f2a3 	rbit	r2, r3
 8002024:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800202e:	2202      	movs	r2, #2
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	fa93 f2a3 	rbit	r2, r3
 800203c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002040:	601a      	str	r2, [r3, #0]
  return result;
 8002042:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002046:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	b2db      	uxtb	r3, r3
 8002052:	f043 0302 	orr.w	r3, r3, #2
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d102      	bne.n	8002062 <HAL_RCC_OscConfig+0xa06>
 800205c:	4b90      	ldr	r3, [pc, #576]	; (80022a0 <HAL_RCC_OscConfig+0xc44>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	e00d      	b.n	800207e <HAL_RCC_OscConfig+0xa22>
 8002062:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002066:	2202      	movs	r2, #2
 8002068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	fa93 f2a3 	rbit	r2, r3
 8002074:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	4b89      	ldr	r3, [pc, #548]	; (80022a0 <HAL_RCC_OscConfig+0xc44>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002082:	2102      	movs	r1, #2
 8002084:	6011      	str	r1, [r2, #0]
 8002086:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	fa92 f1a2 	rbit	r1, r2
 8002090:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002094:	6011      	str	r1, [r2, #0]
  return result;
 8002096:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	fab2 f282 	clz	r2, r2
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f002 021f 	and.w	r2, r2, #31
 80020ac:	2101      	movs	r1, #1
 80020ae:	fa01 f202 	lsl.w	r2, r1, r2
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1a0      	bne.n	8001ffa <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020b8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d105      	bne.n	80020cc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c0:	4b77      	ldr	r3, [pc, #476]	; (80022a0 <HAL_RCC_OscConfig+0xc44>)
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	4a76      	ldr	r2, [pc, #472]	; (80022a0 <HAL_RCC_OscConfig+0xc44>)
 80020c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 81c2 	beq.w	800245c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d8:	4b71      	ldr	r3, [pc, #452]	; (80022a0 <HAL_RCC_OscConfig+0xc44>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	f000 819c 	beq.w	800241e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	f040 8114 	bne.w	800231a <HAL_RCC_OscConfig+0xcbe>
 80020f2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	fa93 f2a3 	rbit	r2, r3
 8002106:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800210a:	601a      	str	r2, [r3, #0]
  return result;
 800210c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002110:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800211c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	461a      	mov	r2, r3
 8002124:	2300      	movs	r3, #0
 8002126:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7fe ffb4 	bl	8001094 <HAL_GetTick>
 800212c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002130:	e009      	b.n	8002146 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002132:	f7fe ffaf 	bl	8001094 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e18b      	b.n	800245e <HAL_RCC_OscConfig+0xe02>
 8002146:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800214a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800214e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	fa93 f2a3 	rbit	r2, r3
 800215a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800215e:	601a      	str	r2, [r3, #0]
  return result;
 8002160:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002164:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d102      	bne.n	8002180 <HAL_RCC_OscConfig+0xb24>
 800217a:	4b49      	ldr	r3, [pc, #292]	; (80022a0 <HAL_RCC_OscConfig+0xc44>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	e01b      	b.n	80021b8 <HAL_RCC_OscConfig+0xb5c>
 8002180:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002184:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002188:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	fa93 f2a3 	rbit	r2, r3
 8002194:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800219e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	fa93 f2a3 	rbit	r2, r3
 80021ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	4b3a      	ldr	r3, [pc, #232]	; (80022a0 <HAL_RCC_OscConfig+0xc44>)
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80021bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021c0:	6011      	str	r1, [r2, #0]
 80021c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	fa92 f1a2 	rbit	r1, r2
 80021cc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80021d0:	6011      	str	r1, [r2, #0]
  return result;
 80021d2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	fab2 f282 	clz	r2, r2
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	f042 0220 	orr.w	r2, r2, #32
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	f002 021f 	and.w	r2, r2, #31
 80021e8:	2101      	movs	r1, #1
 80021ea:	fa01 f202 	lsl.w	r2, r1, r2
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d19e      	bne.n	8002132 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f4:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <HAL_RCC_OscConfig+0xc44>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	430b      	orrs	r3, r1
 800220a:	4925      	ldr	r1, [pc, #148]	; (80022a0 <HAL_RCC_OscConfig+0xc44>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
 8002210:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002214:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002218:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	fa93 f2a3 	rbit	r2, r3
 8002224:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002228:	601a      	str	r2, [r3, #0]
  return result;
 800222a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800222e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800223a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	461a      	mov	r2, r3
 8002242:	2301      	movs	r3, #1
 8002244:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002246:	f7fe ff25 	bl	8001094 <HAL_GetTick>
 800224a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800224e:	e009      	b.n	8002264 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002250:	f7fe ff20 	bl	8001094 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e0fc      	b.n	800245e <HAL_RCC_OscConfig+0xe02>
 8002264:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002268:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800226c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	fa93 f2a3 	rbit	r2, r3
 8002278:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800227c:	601a      	str	r2, [r3, #0]
  return result;
 800227e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002282:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d105      	bne.n	80022a4 <HAL_RCC_OscConfig+0xc48>
 8002298:	4b01      	ldr	r3, [pc, #4]	; (80022a0 <HAL_RCC_OscConfig+0xc44>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	e01e      	b.n	80022dc <HAL_RCC_OscConfig+0xc80>
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	fa93 f2a3 	rbit	r2, r3
 80022b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	fa93 f2a3 	rbit	r2, r3
 80022d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	4b63      	ldr	r3, [pc, #396]	; (8002468 <HAL_RCC_OscConfig+0xe0c>)
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022e4:	6011      	str	r1, [r2, #0]
 80022e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	fa92 f1a2 	rbit	r1, r2
 80022f0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80022f4:	6011      	str	r1, [r2, #0]
  return result;
 80022f6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	fab2 f282 	clz	r2, r2
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	f042 0220 	orr.w	r2, r2, #32
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	f002 021f 	and.w	r2, r2, #31
 800230c:	2101      	movs	r1, #1
 800230e:	fa01 f202 	lsl.w	r2, r1, r2
 8002312:	4013      	ands	r3, r2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d09b      	beq.n	8002250 <HAL_RCC_OscConfig+0xbf4>
 8002318:	e0a0      	b.n	800245c <HAL_RCC_OscConfig+0xe00>
 800231a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800231e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002322:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	fa93 f2a3 	rbit	r2, r3
 800232e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002332:	601a      	str	r2, [r3, #0]
  return result;
 8002334:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002338:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002344:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	461a      	mov	r2, r3
 800234c:	2300      	movs	r3, #0
 800234e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7fe fea0 	bl	8001094 <HAL_GetTick>
 8002354:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002358:	e009      	b.n	800236e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235a:	f7fe fe9b 	bl	8001094 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e077      	b.n	800245e <HAL_RCC_OscConfig+0xe02>
 800236e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002372:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002376:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	fa93 f2a3 	rbit	r2, r3
 8002382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002386:	601a      	str	r2, [r3, #0]
  return result;
 8002388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	095b      	lsrs	r3, r3, #5
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d102      	bne.n	80023a8 <HAL_RCC_OscConfig+0xd4c>
 80023a2:	4b31      	ldr	r3, [pc, #196]	; (8002468 <HAL_RCC_OscConfig+0xe0c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	e01b      	b.n	80023e0 <HAL_RCC_OscConfig+0xd84>
 80023a8:	f107 0320 	add.w	r3, r7, #32
 80023ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f107 0320 	add.w	r3, r7, #32
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	fa93 f2a3 	rbit	r2, r3
 80023bc:	f107 031c 	add.w	r3, r7, #28
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	f107 0318 	add.w	r3, r7, #24
 80023c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	f107 0318 	add.w	r3, r7, #24
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	fa93 f2a3 	rbit	r2, r3
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	4b22      	ldr	r3, [pc, #136]	; (8002468 <HAL_RCC_OscConfig+0xe0c>)
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	f107 0210 	add.w	r2, r7, #16
 80023e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023e8:	6011      	str	r1, [r2, #0]
 80023ea:	f107 0210 	add.w	r2, r7, #16
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	fa92 f1a2 	rbit	r1, r2
 80023f4:	f107 020c 	add.w	r2, r7, #12
 80023f8:	6011      	str	r1, [r2, #0]
  return result;
 80023fa:	f107 020c 	add.w	r2, r7, #12
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	fab2 f282 	clz	r2, r2
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	f042 0220 	orr.w	r2, r2, #32
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	f002 021f 	and.w	r2, r2, #31
 8002410:	2101      	movs	r1, #1
 8002412:	fa01 f202 	lsl.w	r2, r1, r2
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d19e      	bne.n	800235a <HAL_RCC_OscConfig+0xcfe>
 800241c:	e01e      	b.n	800245c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e018      	b.n	800245e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800242c:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <HAL_RCC_OscConfig+0xe0c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002434:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002438:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	429a      	cmp	r2, r3
 8002444:	d108      	bne.n	8002458 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002446:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800244a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000

0800246c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b09e      	sub	sp, #120	; 0x78
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e162      	b.n	800274a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002484:	4b90      	ldr	r3, [pc, #576]	; (80026c8 <HAL_RCC_ClockConfig+0x25c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d910      	bls.n	80024b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b8d      	ldr	r3, [pc, #564]	; (80026c8 <HAL_RCC_ClockConfig+0x25c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 0207 	bic.w	r2, r3, #7
 800249a:	498b      	ldr	r1, [pc, #556]	; (80026c8 <HAL_RCC_ClockConfig+0x25c>)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	4b89      	ldr	r3, [pc, #548]	; (80026c8 <HAL_RCC_ClockConfig+0x25c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e14a      	b.n	800274a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b82      	ldr	r3, [pc, #520]	; (80026cc <HAL_RCC_ClockConfig+0x260>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	497f      	ldr	r1, [pc, #508]	; (80026cc <HAL_RCC_ClockConfig+0x260>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80dc 	beq.w	8002698 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d13c      	bne.n	8002562 <HAL_RCC_ClockConfig+0xf6>
 80024e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80024f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d102      	bne.n	8002512 <HAL_RCC_ClockConfig+0xa6>
 800250c:	4b6f      	ldr	r3, [pc, #444]	; (80026cc <HAL_RCC_ClockConfig+0x260>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	e00f      	b.n	8002532 <HAL_RCC_ClockConfig+0xc6>
 8002512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002516:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	667b      	str	r3, [r7, #100]	; 0x64
 8002520:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002524:	663b      	str	r3, [r7, #96]	; 0x60
 8002526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002528:	fa93 f3a3 	rbit	r3, r3
 800252c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800252e:	4b67      	ldr	r3, [pc, #412]	; (80026cc <HAL_RCC_ClockConfig+0x260>)
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002536:	65ba      	str	r2, [r7, #88]	; 0x58
 8002538:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800253a:	fa92 f2a2 	rbit	r2, r2
 800253e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002540:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002542:	fab2 f282 	clz	r2, r2
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	f042 0220 	orr.w	r2, r2, #32
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	f002 021f 	and.w	r2, r2, #31
 8002552:	2101      	movs	r1, #1
 8002554:	fa01 f202 	lsl.w	r2, r1, r2
 8002558:	4013      	ands	r3, r2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d17b      	bne.n	8002656 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e0f3      	b.n	800274a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d13c      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x178>
 800256a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800256e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d102      	bne.n	8002594 <HAL_RCC_ClockConfig+0x128>
 800258e:	4b4f      	ldr	r3, [pc, #316]	; (80026cc <HAL_RCC_ClockConfig+0x260>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e00f      	b.n	80025b4 <HAL_RCC_ClockConfig+0x148>
 8002594:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002598:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	647b      	str	r3, [r7, #68]	; 0x44
 80025a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025a6:	643b      	str	r3, [r7, #64]	; 0x40
 80025a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b0:	4b46      	ldr	r3, [pc, #280]	; (80026cc <HAL_RCC_ClockConfig+0x260>)
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80025ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025bc:	fa92 f2a2 	rbit	r2, r2
 80025c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80025c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025c4:	fab2 f282 	clz	r2, r2
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	f042 0220 	orr.w	r2, r2, #32
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	f002 021f 	and.w	r2, r2, #31
 80025d4:	2101      	movs	r1, #1
 80025d6:	fa01 f202 	lsl.w	r2, r1, r2
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d13a      	bne.n	8002656 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0b2      	b.n	800274a <HAL_RCC_ClockConfig+0x2de>
 80025e4:	2302      	movs	r3, #2
 80025e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b01      	cmp	r3, #1
 8002604:	d102      	bne.n	800260c <HAL_RCC_ClockConfig+0x1a0>
 8002606:	4b31      	ldr	r3, [pc, #196]	; (80026cc <HAL_RCC_ClockConfig+0x260>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	e00d      	b.n	8002628 <HAL_RCC_ClockConfig+0x1bc>
 800260c:	2302      	movs	r3, #2
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
 8002618:	2302      	movs	r3, #2
 800261a:	623b      	str	r3, [r7, #32]
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	4b29      	ldr	r3, [pc, #164]	; (80026cc <HAL_RCC_ClockConfig+0x260>)
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	2202      	movs	r2, #2
 800262a:	61ba      	str	r2, [r7, #24]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	fa92 f2a2 	rbit	r2, r2
 8002632:	617a      	str	r2, [r7, #20]
  return result;
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	fab2 f282 	clz	r2, r2
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	f042 0220 	orr.w	r2, r2, #32
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	f002 021f 	and.w	r2, r2, #31
 8002646:	2101      	movs	r1, #1
 8002648:	fa01 f202 	lsl.w	r2, r1, r2
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e079      	b.n	800274a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002656:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <HAL_RCC_ClockConfig+0x260>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f023 0203 	bic.w	r2, r3, #3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	491a      	ldr	r1, [pc, #104]	; (80026cc <HAL_RCC_ClockConfig+0x260>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002668:	f7fe fd14 	bl	8001094 <HAL_GetTick>
 800266c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	e00a      	b.n	8002686 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002670:	f7fe fd10 	bl	8001094 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e061      	b.n	800274a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_RCC_ClockConfig+0x260>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 020c 	and.w	r2, r3, #12
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	429a      	cmp	r2, r3
 8002696:	d1eb      	bne.n	8002670 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_ClockConfig+0x25c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d214      	bcs.n	80026d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <HAL_RCC_ClockConfig+0x25c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 0207 	bic.w	r2, r3, #7
 80026ae:	4906      	ldr	r1, [pc, #24]	; (80026c8 <HAL_RCC_ClockConfig+0x25c>)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <HAL_RCC_ClockConfig+0x25c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e040      	b.n	800274a <HAL_RCC_ClockConfig+0x2de>
 80026c8:	40022000 	.word	0x40022000
 80026cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026dc:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <HAL_RCC_ClockConfig+0x2e8>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	491a      	ldr	r1, [pc, #104]	; (8002754 <HAL_RCC_ClockConfig+0x2e8>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026fa:	4b16      	ldr	r3, [pc, #88]	; (8002754 <HAL_RCC_ClockConfig+0x2e8>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4912      	ldr	r1, [pc, #72]	; (8002754 <HAL_RCC_ClockConfig+0x2e8>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800270e:	f000 f829 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 8002712:	4601      	mov	r1, r0
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_RCC_ClockConfig+0x2e8>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800271c:	22f0      	movs	r2, #240	; 0xf0
 800271e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	fa92 f2a2 	rbit	r2, r2
 8002726:	60fa      	str	r2, [r7, #12]
  return result;
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	fab2 f282 	clz	r2, r2
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	40d3      	lsrs	r3, r2
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <HAL_RCC_ClockConfig+0x2ec>)
 8002734:	5cd3      	ldrb	r3, [r2, r3]
 8002736:	fa21 f303 	lsr.w	r3, r1, r3
 800273a:	4a08      	ldr	r2, [pc, #32]	; (800275c <HAL_RCC_ClockConfig+0x2f0>)
 800273c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_RCC_ClockConfig+0x2f4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fc62 	bl	800100c <HAL_InitTick>
  
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3778      	adds	r7, #120	; 0x78
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	080043b8 	.word	0x080043b8
 800275c:	20000000 	.word	0x20000000
 8002760:	20000004 	.word	0x20000004

08002764 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002764:	b480      	push	{r7}
 8002766:	b08b      	sub	sp, #44	; 0x2c
 8002768:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	2300      	movs	r3, #0
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800277e:	4b29      	ldr	r3, [pc, #164]	; (8002824 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b04      	cmp	r3, #4
 800278c:	d002      	beq.n	8002794 <HAL_RCC_GetSysClockFreq+0x30>
 800278e:	2b08      	cmp	r3, #8
 8002790:	d003      	beq.n	800279a <HAL_RCC_GetSysClockFreq+0x36>
 8002792:	e03c      	b.n	800280e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002794:	4b24      	ldr	r3, [pc, #144]	; (8002828 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002796:	623b      	str	r3, [r7, #32]
      break;
 8002798:	e03c      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80027a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80027a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	fa92 f2a2 	rbit	r2, r2
 80027ac:	607a      	str	r2, [r7, #4]
  return result;
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	fab2 f282 	clz	r2, r2
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	40d3      	lsrs	r3, r2
 80027b8:	4a1c      	ldr	r2, [pc, #112]	; (800282c <HAL_RCC_GetSysClockFreq+0xc8>)
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80027be:	4b19      	ldr	r3, [pc, #100]	; (8002824 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	220f      	movs	r2, #15
 80027c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	fa92 f2a2 	rbit	r2, r2
 80027d0:	60fa      	str	r2, [r7, #12]
  return result;
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	fab2 f282 	clz	r2, r2
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	40d3      	lsrs	r3, r2
 80027dc:	4a14      	ldr	r2, [pc, #80]	; (8002830 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027ec:	4a0e      	ldr	r2, [pc, #56]	; (8002828 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
 80027fc:	e004      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	4a0c      	ldr	r2, [pc, #48]	; (8002834 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002802:	fb02 f303 	mul.w	r3, r2, r3
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	623b      	str	r3, [r7, #32]
      break;
 800280c:	e002      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002810:	623b      	str	r3, [r7, #32]
      break;
 8002812:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002814:	6a3b      	ldr	r3, [r7, #32]
}
 8002816:	4618      	mov	r0, r3
 8002818:	372c      	adds	r7, #44	; 0x2c
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
 8002828:	007a1200 	.word	0x007a1200
 800282c:	080043d0 	.word	0x080043d0
 8002830:	080043e0 	.word	0x080043e0
 8002834:	003d0900 	.word	0x003d0900

08002838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <HAL_RCC_GetHCLKFreq+0x14>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	20000000 	.word	0x20000000

08002850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002856:	f7ff ffef 	bl	8002838 <HAL_RCC_GetHCLKFreq>
 800285a:	4601      	mov	r1, r0
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002864:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002868:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	fa92 f2a2 	rbit	r2, r2
 8002870:	603a      	str	r2, [r7, #0]
  return result;
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	fab2 f282 	clz	r2, r2
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	40d3      	lsrs	r3, r2
 800287c:	4a04      	ldr	r2, [pc, #16]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x40>)
 800287e:	5cd3      	ldrb	r3, [r2, r3]
 8002880:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40021000 	.word	0x40021000
 8002890:	080043c8 	.word	0x080043c8

08002894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800289a:	f7ff ffcd 	bl	8002838 <HAL_RCC_GetHCLKFreq>
 800289e:	4601      	mov	r1, r0
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80028a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	fa92 f2a2 	rbit	r2, r2
 80028b4:	603a      	str	r2, [r7, #0]
  return result;
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	fab2 f282 	clz	r2, r2
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	40d3      	lsrs	r3, r2
 80028c0:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	080043c8 	.word	0x080043c8

080028d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b092      	sub	sp, #72	; 0x48
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80028e8:	2300      	movs	r3, #0
 80028ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80d4 	beq.w	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fc:	4b4e      	ldr	r3, [pc, #312]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10e      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002908:	4b4b      	ldr	r3, [pc, #300]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	4a4a      	ldr	r2, [pc, #296]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002912:	61d3      	str	r3, [r2, #28]
 8002914:	4b48      	ldr	r3, [pc, #288]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002920:	2301      	movs	r3, #1
 8002922:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002926:	4b45      	ldr	r3, [pc, #276]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	d118      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002932:	4b42      	ldr	r3, [pc, #264]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a41      	ldr	r2, [pc, #260]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293e:	f7fe fba9 	bl	8001094 <HAL_GetTick>
 8002942:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002944:	e008      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002946:	f7fe fba5 	bl	8001094 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b64      	cmp	r3, #100	; 0x64
 8002952:	d901      	bls.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e14b      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	4b38      	ldr	r3, [pc, #224]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002964:	4b34      	ldr	r3, [pc, #208]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800296e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8084 	beq.w	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002980:	429a      	cmp	r2, r3
 8002982:	d07c      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002984:	4b2c      	ldr	r3, [pc, #176]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800298e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002992:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800299c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	461a      	mov	r2, r3
 80029ae:	2301      	movs	r3, #1
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	461a      	mov	r2, r3
 80029d2:	2300      	movs	r3, #0
 80029d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029d6:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d04b      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e6:	f7fe fb55 	bl	8001094 <HAL_GetTick>
 80029ea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fe fb51 	bl	8001094 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0f5      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002a04:	2302      	movs	r3, #2
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a10:	2302      	movs	r3, #2
 8002a12:	623b      	str	r3, [r7, #32]
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	61fb      	str	r3, [r7, #28]
  return result;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f043 0302 	orr.w	r3, r3, #2
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d108      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a32:	4b01      	ldr	r3, [pc, #4]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	e00d      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40007000 	.word	0x40007000
 8002a40:	10908100 	.word	0x10908100
 8002a44:	2302      	movs	r3, #2
 8002a46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	4b69      	ldr	r3, [pc, #420]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	2202      	movs	r2, #2
 8002a56:	613a      	str	r2, [r7, #16]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	fa92 f2a2 	rbit	r2, r2
 8002a5e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	fab2 f282 	clz	r2, r2
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	f002 021f 	and.w	r2, r2, #31
 8002a72:	2101      	movs	r1, #1
 8002a74:	fa01 f202 	lsl.w	r2, r1, r2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0b7      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a7e:	4b5e      	ldr	r3, [pc, #376]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	495b      	ldr	r1, [pc, #364]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d105      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a98:	4b57      	ldr	r3, [pc, #348]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	4a56      	ldr	r2, [pc, #344]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ab0:	4b51      	ldr	r3, [pc, #324]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	f023 0203 	bic.w	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	494e      	ldr	r1, [pc, #312]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ace:	4b4a      	ldr	r3, [pc, #296]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f023 0210 	bic.w	r2, r3, #16
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	4947      	ldr	r1, [pc, #284]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002aec:	4b42      	ldr	r3, [pc, #264]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	493f      	ldr	r1, [pc, #252]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b0a:	4b3b      	ldr	r3, [pc, #236]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f023 0220 	bic.w	r2, r3, #32
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	4938      	ldr	r1, [pc, #224]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b28:	4b33      	ldr	r3, [pc, #204]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	4930      	ldr	r1, [pc, #192]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b46:	4b2c      	ldr	r3, [pc, #176]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	4929      	ldr	r1, [pc, #164]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002b64:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	4921      	ldr	r1, [pc, #132]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	491a      	ldr	r1, [pc, #104]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ba0:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	4912      	ldr	r1, [pc, #72]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	490b      	ldr	r1, [pc, #44]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	4903      	ldr	r1, [pc, #12]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3748      	adds	r7, #72	; 0x48
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000

08002bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e049      	b.n	8002ca2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe f872 	bl	8000d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	f000 fb9e 	bl	800337c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d001      	beq.n	8002cc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e033      	b.n	8002d2c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <HAL_TIM_Base_Start+0x8c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d009      	beq.n	8002cea <HAL_TIM_Base_Start+0x3e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cde:	d004      	beq.n	8002cea <HAL_TIM_Base_Start+0x3e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a15      	ldr	r2, [pc, #84]	; (8002d3c <HAL_TIM_Base_Start+0x90>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d115      	bne.n	8002d16 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <HAL_TIM_Base_Start+0x94>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2b06      	cmp	r3, #6
 8002cfa:	d015      	beq.n	8002d28 <HAL_TIM_Base_Start+0x7c>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d02:	d011      	beq.n	8002d28 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d14:	e008      	b.n	8002d28 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0201 	orr.w	r2, r2, #1
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	e000      	b.n	8002d2a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	40012c00 	.word	0x40012c00
 8002d3c:	40014000 	.word	0x40014000
 8002d40:	00010007 	.word	0x00010007

08002d44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e049      	b.n	8002dea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fd ffae 	bl	8000ccc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	4619      	mov	r1, r3
 8002d82:	4610      	mov	r0, r2
 8002d84:	f000 fafa 	bl	800337c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d109      	bne.n	8002e18 <HAL_TIM_PWM_Start+0x24>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	bf14      	ite	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	2300      	moveq	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e03c      	b.n	8002e92 <HAL_TIM_PWM_Start+0x9e>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d109      	bne.n	8002e32 <HAL_TIM_PWM_Start+0x3e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	bf14      	ite	ne
 8002e2a:	2301      	movne	r3, #1
 8002e2c:	2300      	moveq	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	e02f      	b.n	8002e92 <HAL_TIM_PWM_Start+0x9e>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d109      	bne.n	8002e4c <HAL_TIM_PWM_Start+0x58>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	bf14      	ite	ne
 8002e44:	2301      	movne	r3, #1
 8002e46:	2300      	moveq	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	e022      	b.n	8002e92 <HAL_TIM_PWM_Start+0x9e>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b0c      	cmp	r3, #12
 8002e50:	d109      	bne.n	8002e66 <HAL_TIM_PWM_Start+0x72>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	bf14      	ite	ne
 8002e5e:	2301      	movne	r3, #1
 8002e60:	2300      	moveq	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	e015      	b.n	8002e92 <HAL_TIM_PWM_Start+0x9e>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d109      	bne.n	8002e80 <HAL_TIM_PWM_Start+0x8c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	bf14      	ite	ne
 8002e78:	2301      	movne	r3, #1
 8002e7a:	2300      	moveq	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e008      	b.n	8002e92 <HAL_TIM_PWM_Start+0x9e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	bf14      	ite	ne
 8002e8c:	2301      	movne	r3, #1
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e083      	b.n	8002fa2 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d104      	bne.n	8002eaa <HAL_TIM_PWM_Start+0xb6>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea8:	e023      	b.n	8002ef2 <HAL_TIM_PWM_Start+0xfe>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d104      	bne.n	8002eba <HAL_TIM_PWM_Start+0xc6>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb8:	e01b      	b.n	8002ef2 <HAL_TIM_PWM_Start+0xfe>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d104      	bne.n	8002eca <HAL_TIM_PWM_Start+0xd6>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec8:	e013      	b.n	8002ef2 <HAL_TIM_PWM_Start+0xfe>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b0c      	cmp	r3, #12
 8002ece:	d104      	bne.n	8002eda <HAL_TIM_PWM_Start+0xe6>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ed8:	e00b      	b.n	8002ef2 <HAL_TIM_PWM_Start+0xfe>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b10      	cmp	r3, #16
 8002ede:	d104      	bne.n	8002eea <HAL_TIM_PWM_Start+0xf6>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ee8:	e003      	b.n	8002ef2 <HAL_TIM_PWM_Start+0xfe>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2202      	movs	r2, #2
 8002eee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	6839      	ldr	r1, [r7, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fdec 	bl	8003ad8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a29      	ldr	r2, [pc, #164]	; (8002fac <HAL_TIM_PWM_Start+0x1b8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00e      	beq.n	8002f28 <HAL_TIM_PWM_Start+0x134>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a28      	ldr	r2, [pc, #160]	; (8002fb0 <HAL_TIM_PWM_Start+0x1bc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d009      	beq.n	8002f28 <HAL_TIM_PWM_Start+0x134>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a26      	ldr	r2, [pc, #152]	; (8002fb4 <HAL_TIM_PWM_Start+0x1c0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d004      	beq.n	8002f28 <HAL_TIM_PWM_Start+0x134>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a25      	ldr	r2, [pc, #148]	; (8002fb8 <HAL_TIM_PWM_Start+0x1c4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d101      	bne.n	8002f2c <HAL_TIM_PWM_Start+0x138>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <HAL_TIM_PWM_Start+0x13a>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a19      	ldr	r2, [pc, #100]	; (8002fac <HAL_TIM_PWM_Start+0x1b8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <HAL_TIM_PWM_Start+0x16c>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f54:	d004      	beq.n	8002f60 <HAL_TIM_PWM_Start+0x16c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a15      	ldr	r2, [pc, #84]	; (8002fb0 <HAL_TIM_PWM_Start+0x1bc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d115      	bne.n	8002f8c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <HAL_TIM_PWM_Start+0x1c8>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b06      	cmp	r3, #6
 8002f70:	d015      	beq.n	8002f9e <HAL_TIM_PWM_Start+0x1aa>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f78:	d011      	beq.n	8002f9e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0201 	orr.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8a:	e008      	b.n	8002f9e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	e000      	b.n	8002fa0 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40012c00 	.word	0x40012c00
 8002fb0:	40014000 	.word	0x40014000
 8002fb4:	40014400 	.word	0x40014400
 8002fb8:	40014800 	.word	0x40014800
 8002fbc:	00010007 	.word	0x00010007

08002fc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e0ff      	b.n	80031de <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b14      	cmp	r3, #20
 8002fea:	f200 80f0 	bhi.w	80031ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002fee:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	08003049 	.word	0x08003049
 8002ff8:	080031cf 	.word	0x080031cf
 8002ffc:	080031cf 	.word	0x080031cf
 8003000:	080031cf 	.word	0x080031cf
 8003004:	08003089 	.word	0x08003089
 8003008:	080031cf 	.word	0x080031cf
 800300c:	080031cf 	.word	0x080031cf
 8003010:	080031cf 	.word	0x080031cf
 8003014:	080030cb 	.word	0x080030cb
 8003018:	080031cf 	.word	0x080031cf
 800301c:	080031cf 	.word	0x080031cf
 8003020:	080031cf 	.word	0x080031cf
 8003024:	0800310b 	.word	0x0800310b
 8003028:	080031cf 	.word	0x080031cf
 800302c:	080031cf 	.word	0x080031cf
 8003030:	080031cf 	.word	0x080031cf
 8003034:	0800314d 	.word	0x0800314d
 8003038:	080031cf 	.word	0x080031cf
 800303c:	080031cf 	.word	0x080031cf
 8003040:	080031cf 	.word	0x080031cf
 8003044:	0800318d 	.word	0x0800318d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68b9      	ldr	r1, [r7, #8]
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fa02 	bl	8003458 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0208 	orr.w	r2, r2, #8
 8003062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699a      	ldr	r2, [r3, #24]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0204 	bic.w	r2, r2, #4
 8003072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6999      	ldr	r1, [r3, #24]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	619a      	str	r2, [r3, #24]
      break;
 8003086:	e0a5      	b.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fa68 	bl	8003564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6999      	ldr	r1, [r3, #24]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	021a      	lsls	r2, r3, #8
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	619a      	str	r2, [r3, #24]
      break;
 80030c8:	e084      	b.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fac7 	bl	8003664 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 0208 	orr.w	r2, r2, #8
 80030e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69da      	ldr	r2, [r3, #28]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0204 	bic.w	r2, r2, #4
 80030f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	69d9      	ldr	r1, [r3, #28]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	61da      	str	r2, [r3, #28]
      break;
 8003108:	e064      	b.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fb25 	bl	8003760 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69da      	ldr	r2, [r3, #28]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69da      	ldr	r2, [r3, #28]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	69d9      	ldr	r1, [r3, #28]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	021a      	lsls	r2, r3, #8
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	61da      	str	r2, [r3, #28]
      break;
 800314a:	e043      	b.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fb68 	bl	8003828 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0208 	orr.w	r2, r2, #8
 8003166:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0204 	bic.w	r2, r2, #4
 8003176:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800318a:	e023      	b.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fba6 	bl	80038e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	021a      	lsls	r2, r3, #8
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80031cc:	e002      	b.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
      break;
 80031d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop

080031e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_TIM_ConfigClockSource+0x1c>
 8003200:	2302      	movs	r3, #2
 8003202:	e0b6      	b.n	8003372 <HAL_TIM_ConfigClockSource+0x18a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800322e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003240:	d03e      	beq.n	80032c0 <HAL_TIM_ConfigClockSource+0xd8>
 8003242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003246:	f200 8087 	bhi.w	8003358 <HAL_TIM_ConfigClockSource+0x170>
 800324a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324e:	f000 8086 	beq.w	800335e <HAL_TIM_ConfigClockSource+0x176>
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003256:	d87f      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x170>
 8003258:	2b70      	cmp	r3, #112	; 0x70
 800325a:	d01a      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0xaa>
 800325c:	2b70      	cmp	r3, #112	; 0x70
 800325e:	d87b      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x170>
 8003260:	2b60      	cmp	r3, #96	; 0x60
 8003262:	d050      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x11e>
 8003264:	2b60      	cmp	r3, #96	; 0x60
 8003266:	d877      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x170>
 8003268:	2b50      	cmp	r3, #80	; 0x50
 800326a:	d03c      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0xfe>
 800326c:	2b50      	cmp	r3, #80	; 0x50
 800326e:	d873      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x170>
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	d058      	beq.n	8003326 <HAL_TIM_ConfigClockSource+0x13e>
 8003274:	2b40      	cmp	r3, #64	; 0x40
 8003276:	d86f      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x170>
 8003278:	2b30      	cmp	r3, #48	; 0x30
 800327a:	d064      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15e>
 800327c:	2b30      	cmp	r3, #48	; 0x30
 800327e:	d86b      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x170>
 8003280:	2b20      	cmp	r3, #32
 8003282:	d060      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15e>
 8003284:	2b20      	cmp	r3, #32
 8003286:	d867      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x170>
 8003288:	2b00      	cmp	r3, #0
 800328a:	d05c      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15e>
 800328c:	2b10      	cmp	r3, #16
 800328e:	d05a      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15e>
 8003290:	e062      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6899      	ldr	r1, [r3, #8]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f000 fbf9 	bl	8003a98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	609a      	str	r2, [r3, #8]
      break;
 80032be:	e04f      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	6899      	ldr	r1, [r3, #8]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f000 fbe2 	bl	8003a98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032e2:	609a      	str	r2, [r3, #8]
      break;
 80032e4:	e03c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6859      	ldr	r1, [r3, #4]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	461a      	mov	r2, r3
 80032f4:	f000 fb56 	bl	80039a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2150      	movs	r1, #80	; 0x50
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fbaf 	bl	8003a62 <TIM_ITRx_SetConfig>
      break;
 8003304:	e02c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6859      	ldr	r1, [r3, #4]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	461a      	mov	r2, r3
 8003314:	f000 fb75 	bl	8003a02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2160      	movs	r1, #96	; 0x60
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fb9f 	bl	8003a62 <TIM_ITRx_SetConfig>
      break;
 8003324:	e01c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6859      	ldr	r1, [r3, #4]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	461a      	mov	r2, r3
 8003334:	f000 fb36 	bl	80039a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2140      	movs	r1, #64	; 0x40
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fb8f 	bl	8003a62 <TIM_ITRx_SetConfig>
      break;
 8003344:	e00c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4619      	mov	r1, r3
 8003350:	4610      	mov	r0, r2
 8003352:	f000 fb86 	bl	8003a62 <TIM_ITRx_SetConfig>
      break;
 8003356:	e003      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
      break;
 800335c:	e000      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800335e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003370:	7bfb      	ldrb	r3, [r7, #15]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a2e      	ldr	r2, [pc, #184]	; (8003448 <TIM_Base_SetConfig+0xcc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <TIM_Base_SetConfig+0x20>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339a:	d108      	bne.n	80033ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a25      	ldr	r2, [pc, #148]	; (8003448 <TIM_Base_SetConfig+0xcc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00f      	beq.n	80033d6 <TIM_Base_SetConfig+0x5a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033bc:	d00b      	beq.n	80033d6 <TIM_Base_SetConfig+0x5a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a22      	ldr	r2, [pc, #136]	; (800344c <TIM_Base_SetConfig+0xd0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d007      	beq.n	80033d6 <TIM_Base_SetConfig+0x5a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a21      	ldr	r2, [pc, #132]	; (8003450 <TIM_Base_SetConfig+0xd4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d003      	beq.n	80033d6 <TIM_Base_SetConfig+0x5a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a20      	ldr	r2, [pc, #128]	; (8003454 <TIM_Base_SetConfig+0xd8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d108      	bne.n	80033e8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a0e      	ldr	r2, [pc, #56]	; (8003448 <TIM_Base_SetConfig+0xcc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00b      	beq.n	800342c <TIM_Base_SetConfig+0xb0>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a0d      	ldr	r2, [pc, #52]	; (800344c <TIM_Base_SetConfig+0xd0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d007      	beq.n	800342c <TIM_Base_SetConfig+0xb0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a0c      	ldr	r2, [pc, #48]	; (8003450 <TIM_Base_SetConfig+0xd4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d003      	beq.n	800342c <TIM_Base_SetConfig+0xb0>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a0b      	ldr	r2, [pc, #44]	; (8003454 <TIM_Base_SetConfig+0xd8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d103      	bne.n	8003434 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	615a      	str	r2, [r3, #20]
}
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40012c00 	.word	0x40012c00
 800344c:	40014000 	.word	0x40014000
 8003450:	40014400 	.word	0x40014400
 8003454:	40014800 	.word	0x40014800

08003458 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f023 0201 	bic.w	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f023 0302 	bic.w	r3, r3, #2
 80034a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a28      	ldr	r2, [pc, #160]	; (8003554 <TIM_OC1_SetConfig+0xfc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00b      	beq.n	80034d0 <TIM_OC1_SetConfig+0x78>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a27      	ldr	r2, [pc, #156]	; (8003558 <TIM_OC1_SetConfig+0x100>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d007      	beq.n	80034d0 <TIM_OC1_SetConfig+0x78>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a26      	ldr	r2, [pc, #152]	; (800355c <TIM_OC1_SetConfig+0x104>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d003      	beq.n	80034d0 <TIM_OC1_SetConfig+0x78>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a25      	ldr	r2, [pc, #148]	; (8003560 <TIM_OC1_SetConfig+0x108>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d10c      	bne.n	80034ea <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f023 0308 	bic.w	r3, r3, #8
 80034d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f023 0304 	bic.w	r3, r3, #4
 80034e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a19      	ldr	r2, [pc, #100]	; (8003554 <TIM_OC1_SetConfig+0xfc>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00b      	beq.n	800350a <TIM_OC1_SetConfig+0xb2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a18      	ldr	r2, [pc, #96]	; (8003558 <TIM_OC1_SetConfig+0x100>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d007      	beq.n	800350a <TIM_OC1_SetConfig+0xb2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a17      	ldr	r2, [pc, #92]	; (800355c <TIM_OC1_SetConfig+0x104>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d003      	beq.n	800350a <TIM_OC1_SetConfig+0xb2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a16      	ldr	r2, [pc, #88]	; (8003560 <TIM_OC1_SetConfig+0x108>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d111      	bne.n	800352e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	621a      	str	r2, [r3, #32]
}
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40014000 	.word	0x40014000
 800355c:	40014400 	.word	0x40014400
 8003560:	40014800 	.word	0x40014800

08003564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f023 0210 	bic.w	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 0320 	bic.w	r3, r3, #32
 80035b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a24      	ldr	r2, [pc, #144]	; (8003654 <TIM_OC2_SetConfig+0xf0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d10d      	bne.n	80035e4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a1b      	ldr	r2, [pc, #108]	; (8003654 <TIM_OC2_SetConfig+0xf0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00b      	beq.n	8003604 <TIM_OC2_SetConfig+0xa0>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a1a      	ldr	r2, [pc, #104]	; (8003658 <TIM_OC2_SetConfig+0xf4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d007      	beq.n	8003604 <TIM_OC2_SetConfig+0xa0>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a19      	ldr	r2, [pc, #100]	; (800365c <TIM_OC2_SetConfig+0xf8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <TIM_OC2_SetConfig+0xa0>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a18      	ldr	r2, [pc, #96]	; (8003660 <TIM_OC2_SetConfig+0xfc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d113      	bne.n	800362c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800360a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003612:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	621a      	str	r2, [r3, #32]
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40012c00 	.word	0x40012c00
 8003658:	40014000 	.word	0x40014000
 800365c:	40014400 	.word	0x40014400
 8003660:	40014800 	.word	0x40014800

08003664 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0303 	bic.w	r3, r3, #3
 800369e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a23      	ldr	r2, [pc, #140]	; (8003750 <TIM_OC3_SetConfig+0xec>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d10d      	bne.n	80036e2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	021b      	lsls	r3, r3, #8
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036e0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a1a      	ldr	r2, [pc, #104]	; (8003750 <TIM_OC3_SetConfig+0xec>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00b      	beq.n	8003702 <TIM_OC3_SetConfig+0x9e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a19      	ldr	r2, [pc, #100]	; (8003754 <TIM_OC3_SetConfig+0xf0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d007      	beq.n	8003702 <TIM_OC3_SetConfig+0x9e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a18      	ldr	r2, [pc, #96]	; (8003758 <TIM_OC3_SetConfig+0xf4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d003      	beq.n	8003702 <TIM_OC3_SetConfig+0x9e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a17      	ldr	r2, [pc, #92]	; (800375c <TIM_OC3_SetConfig+0xf8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d113      	bne.n	800372a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	621a      	str	r2, [r3, #32]
}
 8003744:	bf00      	nop
 8003746:	371c      	adds	r7, #28
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	40012c00 	.word	0x40012c00
 8003754:	40014000 	.word	0x40014000
 8003758:	40014400 	.word	0x40014400
 800375c:	40014800 	.word	0x40014800

08003760 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800378e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800379a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	031b      	lsls	r3, r3, #12
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a16      	ldr	r2, [pc, #88]	; (8003818 <TIM_OC4_SetConfig+0xb8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00b      	beq.n	80037dc <TIM_OC4_SetConfig+0x7c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a15      	ldr	r2, [pc, #84]	; (800381c <TIM_OC4_SetConfig+0xbc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d007      	beq.n	80037dc <TIM_OC4_SetConfig+0x7c>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a14      	ldr	r2, [pc, #80]	; (8003820 <TIM_OC4_SetConfig+0xc0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d003      	beq.n	80037dc <TIM_OC4_SetConfig+0x7c>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a13      	ldr	r2, [pc, #76]	; (8003824 <TIM_OC4_SetConfig+0xc4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d109      	bne.n	80037f0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	019b      	lsls	r3, r3, #6
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	621a      	str	r2, [r3, #32]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40012c00 	.word	0x40012c00
 800381c:	40014000 	.word	0x40014000
 8003820:	40014400 	.word	0x40014400
 8003824:	40014800 	.word	0x40014800

08003828 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800386c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	041b      	lsls	r3, r3, #16
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a15      	ldr	r2, [pc, #84]	; (80038d4 <TIM_OC5_SetConfig+0xac>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00b      	beq.n	800389a <TIM_OC5_SetConfig+0x72>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a14      	ldr	r2, [pc, #80]	; (80038d8 <TIM_OC5_SetConfig+0xb0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d007      	beq.n	800389a <TIM_OC5_SetConfig+0x72>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a13      	ldr	r2, [pc, #76]	; (80038dc <TIM_OC5_SetConfig+0xb4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d003      	beq.n	800389a <TIM_OC5_SetConfig+0x72>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a12      	ldr	r2, [pc, #72]	; (80038e0 <TIM_OC5_SetConfig+0xb8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d109      	bne.n	80038ae <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	621a      	str	r2, [r3, #32]
}
 80038c8:	bf00      	nop
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	40012c00 	.word	0x40012c00
 80038d8:	40014000 	.word	0x40014000
 80038dc:	40014400 	.word	0x40014400
 80038e0:	40014800 	.word	0x40014800

080038e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800392a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	051b      	lsls	r3, r3, #20
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a16      	ldr	r2, [pc, #88]	; (8003994 <TIM_OC6_SetConfig+0xb0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d00b      	beq.n	8003958 <TIM_OC6_SetConfig+0x74>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a15      	ldr	r2, [pc, #84]	; (8003998 <TIM_OC6_SetConfig+0xb4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d007      	beq.n	8003958 <TIM_OC6_SetConfig+0x74>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a14      	ldr	r2, [pc, #80]	; (800399c <TIM_OC6_SetConfig+0xb8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <TIM_OC6_SetConfig+0x74>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a13      	ldr	r2, [pc, #76]	; (80039a0 <TIM_OC6_SetConfig+0xbc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d109      	bne.n	800396c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	029b      	lsls	r3, r3, #10
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	621a      	str	r2, [r3, #32]
}
 8003986:	bf00      	nop
 8003988:	371c      	adds	r7, #28
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40012c00 	.word	0x40012c00
 8003998:	40014000 	.word	0x40014000
 800399c:	40014400 	.word	0x40014400
 80039a0:	40014800 	.word	0x40014800

080039a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f023 0201 	bic.w	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f023 030a 	bic.w	r3, r3, #10
 80039e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b087      	sub	sp, #28
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f023 0210 	bic.w	r2, r3, #16
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	031b      	lsls	r3, r3, #12
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	621a      	str	r2, [r3, #32]
}
 8003a56:	bf00      	nop
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b085      	sub	sp, #20
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f043 0307 	orr.w	r3, r3, #7
 8003a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	609a      	str	r2, [r3, #8]
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	021a      	lsls	r2, r3, #8
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	609a      	str	r2, [r3, #8]
}
 8003acc:	bf00      	nop
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	2201      	movs	r2, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a1a      	ldr	r2, [r3, #32]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	43db      	mvns	r3, r3
 8003afa:	401a      	ands	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a1a      	ldr	r2, [r3, #32]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 031f 	and.w	r3, r3, #31
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b10:	431a      	orrs	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	621a      	str	r2, [r3, #32]
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
	...

08003b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e04f      	b.n	8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a21      	ldr	r2, [pc, #132]	; (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d108      	bne.n	8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a14      	ldr	r2, [pc, #80]	; (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d009      	beq.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba4:	d004      	beq.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a10      	ldr	r2, [pc, #64]	; (8003bec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d10c      	bne.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	40012c00 	.word	0x40012c00
 8003bec:	40014000 	.word	0x40014000

08003bf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e060      	b.n	8003cce <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	041b      	lsls	r3, r3, #16
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a14      	ldr	r2, [pc, #80]	; (8003cdc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d115      	bne.n	8003cbc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	051b      	lsls	r3, r3, #20
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40012c00 	.word	0x40012c00

08003ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e040      	b.n	8003d74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fd f8a4 	bl	8000e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2224      	movs	r2, #36	; 0x24
 8003d0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0201 	bic.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f82c 	bl	8003d7c <UART_SetConfig>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e022      	b.n	8003d74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f956 	bl	8003fe8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f9dd 	bl	800412c <UART_CheckIdleState>
 8003d72:	4603      	mov	r3, r0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4b8a      	ldr	r3, [pc, #552]	; (8003fd0 <UART_SetConfig+0x254>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6812      	ldr	r2, [r2, #0]
 8003dae:	6979      	ldr	r1, [r7, #20]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a78      	ldr	r2, [pc, #480]	; (8003fd4 <UART_SetConfig+0x258>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d120      	bne.n	8003e3a <UART_SetConfig+0xbe>
 8003df8:	4b77      	ldr	r3, [pc, #476]	; (8003fd8 <UART_SetConfig+0x25c>)
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d817      	bhi.n	8003e34 <UART_SetConfig+0xb8>
 8003e04:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <UART_SetConfig+0x90>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e1d 	.word	0x08003e1d
 8003e10:	08003e29 	.word	0x08003e29
 8003e14:	08003e2f 	.word	0x08003e2f
 8003e18:	08003e23 	.word	0x08003e23
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	e01d      	b.n	8003e5e <UART_SetConfig+0xe2>
 8003e22:	2302      	movs	r3, #2
 8003e24:	77fb      	strb	r3, [r7, #31]
 8003e26:	e01a      	b.n	8003e5e <UART_SetConfig+0xe2>
 8003e28:	2304      	movs	r3, #4
 8003e2a:	77fb      	strb	r3, [r7, #31]
 8003e2c:	e017      	b.n	8003e5e <UART_SetConfig+0xe2>
 8003e2e:	2308      	movs	r3, #8
 8003e30:	77fb      	strb	r3, [r7, #31]
 8003e32:	e014      	b.n	8003e5e <UART_SetConfig+0xe2>
 8003e34:	2310      	movs	r3, #16
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e011      	b.n	8003e5e <UART_SetConfig+0xe2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a67      	ldr	r2, [pc, #412]	; (8003fdc <UART_SetConfig+0x260>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d102      	bne.n	8003e4a <UART_SetConfig+0xce>
 8003e44:	2300      	movs	r3, #0
 8003e46:	77fb      	strb	r3, [r7, #31]
 8003e48:	e009      	b.n	8003e5e <UART_SetConfig+0xe2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a64      	ldr	r2, [pc, #400]	; (8003fe0 <UART_SetConfig+0x264>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d102      	bne.n	8003e5a <UART_SetConfig+0xde>
 8003e54:	2300      	movs	r3, #0
 8003e56:	77fb      	strb	r3, [r7, #31]
 8003e58:	e001      	b.n	8003e5e <UART_SetConfig+0xe2>
 8003e5a:	2310      	movs	r3, #16
 8003e5c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e66:	d15b      	bne.n	8003f20 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003e68:	7ffb      	ldrb	r3, [r7, #31]
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d827      	bhi.n	8003ebe <UART_SetConfig+0x142>
 8003e6e:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <UART_SetConfig+0xf8>)
 8003e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e74:	08003e99 	.word	0x08003e99
 8003e78:	08003ea1 	.word	0x08003ea1
 8003e7c:	08003ea9 	.word	0x08003ea9
 8003e80:	08003ebf 	.word	0x08003ebf
 8003e84:	08003eaf 	.word	0x08003eaf
 8003e88:	08003ebf 	.word	0x08003ebf
 8003e8c:	08003ebf 	.word	0x08003ebf
 8003e90:	08003ebf 	.word	0x08003ebf
 8003e94:	08003eb7 	.word	0x08003eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e98:	f7fe fcda 	bl	8002850 <HAL_RCC_GetPCLK1Freq>
 8003e9c:	61b8      	str	r0, [r7, #24]
        break;
 8003e9e:	e013      	b.n	8003ec8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ea0:	f7fe fcf8 	bl	8002894 <HAL_RCC_GetPCLK2Freq>
 8003ea4:	61b8      	str	r0, [r7, #24]
        break;
 8003ea6:	e00f      	b.n	8003ec8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea8:	4b4e      	ldr	r3, [pc, #312]	; (8003fe4 <UART_SetConfig+0x268>)
 8003eaa:	61bb      	str	r3, [r7, #24]
        break;
 8003eac:	e00c      	b.n	8003ec8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eae:	f7fe fc59 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 8003eb2:	61b8      	str	r0, [r7, #24]
        break;
 8003eb4:	e008      	b.n	8003ec8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eba:	61bb      	str	r3, [r7, #24]
        break;
 8003ebc:	e004      	b.n	8003ec8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	77bb      	strb	r3, [r7, #30]
        break;
 8003ec6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d074      	beq.n	8003fb8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	005a      	lsls	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	085b      	lsrs	r3, r3, #1
 8003ed8:	441a      	add	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	2b0f      	cmp	r3, #15
 8003eea:	d916      	bls.n	8003f1a <UART_SetConfig+0x19e>
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef2:	d212      	bcs.n	8003f1a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	f023 030f 	bic.w	r3, r3, #15
 8003efc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	085b      	lsrs	r3, r3, #1
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	89fb      	ldrh	r3, [r7, #14]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	89fa      	ldrh	r2, [r7, #14]
 8003f16:	60da      	str	r2, [r3, #12]
 8003f18:	e04e      	b.n	8003fb8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	77bb      	strb	r3, [r7, #30]
 8003f1e:	e04b      	b.n	8003fb8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f20:	7ffb      	ldrb	r3, [r7, #31]
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d827      	bhi.n	8003f76 <UART_SetConfig+0x1fa>
 8003f26:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <UART_SetConfig+0x1b0>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003f51 	.word	0x08003f51
 8003f30:	08003f59 	.word	0x08003f59
 8003f34:	08003f61 	.word	0x08003f61
 8003f38:	08003f77 	.word	0x08003f77
 8003f3c:	08003f67 	.word	0x08003f67
 8003f40:	08003f77 	.word	0x08003f77
 8003f44:	08003f77 	.word	0x08003f77
 8003f48:	08003f77 	.word	0x08003f77
 8003f4c:	08003f6f 	.word	0x08003f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f50:	f7fe fc7e 	bl	8002850 <HAL_RCC_GetPCLK1Freq>
 8003f54:	61b8      	str	r0, [r7, #24]
        break;
 8003f56:	e013      	b.n	8003f80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f58:	f7fe fc9c 	bl	8002894 <HAL_RCC_GetPCLK2Freq>
 8003f5c:	61b8      	str	r0, [r7, #24]
        break;
 8003f5e:	e00f      	b.n	8003f80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f60:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <UART_SetConfig+0x268>)
 8003f62:	61bb      	str	r3, [r7, #24]
        break;
 8003f64:	e00c      	b.n	8003f80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f66:	f7fe fbfd 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 8003f6a:	61b8      	str	r0, [r7, #24]
        break;
 8003f6c:	e008      	b.n	8003f80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f72:	61bb      	str	r3, [r7, #24]
        break;
 8003f74:	e004      	b.n	8003f80 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f7e:	bf00      	nop
    }

    if (pclk != 0U)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d018      	beq.n	8003fb8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	085a      	lsrs	r2, r3, #1
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	441a      	add	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b0f      	cmp	r3, #15
 8003fa0:	d908      	bls.n	8003fb4 <UART_SetConfig+0x238>
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa8:	d204      	bcs.n	8003fb4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	e001      	b.n	8003fb8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003fc4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3720      	adds	r7, #32
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	efff69f3 	.word	0xefff69f3
 8003fd4:	40013800 	.word	0x40013800
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40004400 	.word	0x40004400
 8003fe0:	40004800 	.word	0x40004800
 8003fe4:	007a1200 	.word	0x007a1200

08003fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01a      	beq.n	80040fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e6:	d10a      	bne.n	80040fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
  }
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af02      	add	r7, sp, #8
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800413c:	f7fc ffaa 	bl	8001094 <HAL_GetTick>
 8004140:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b08      	cmp	r3, #8
 800414e:	d10e      	bne.n	800416e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004150:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f82d 	bl	80041be <UART_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e023      	b.n	80041b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b04      	cmp	r3, #4
 800417a:	d10e      	bne.n	800419a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800417c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f817 	bl	80041be <UART_WaitOnFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e00d      	b.n	80041b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b09c      	sub	sp, #112	; 0x70
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	603b      	str	r3, [r7, #0]
 80041ca:	4613      	mov	r3, r2
 80041cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ce:	e0a5      	b.n	800431c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d6:	f000 80a1 	beq.w	800431c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041da:	f7fc ff5b 	bl	8001094 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d302      	bcc.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80041ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d13e      	bne.n	800426e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004200:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004204:	667b      	str	r3, [r7, #100]	; 0x64
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800420e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004210:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004214:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800421c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e6      	bne.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3308      	adds	r3, #8
 8004228:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800422c:	e853 3f00 	ldrex	r3, [r3]
 8004230:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	663b      	str	r3, [r7, #96]	; 0x60
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3308      	adds	r3, #8
 8004240:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004242:	64ba      	str	r2, [r7, #72]	; 0x48
 8004244:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004246:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800424a:	e841 2300 	strex	r3, r2, [r1]
 800424e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1e5      	bne.n	8004222 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e067      	b.n	800433e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d04f      	beq.n	800431c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800428a:	d147      	bne.n	800431c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004294:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b4:	637b      	str	r3, [r7, #52]	; 0x34
 80042b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e6      	bne.n	8004296 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3308      	adds	r3, #8
 80042ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	613b      	str	r3, [r7, #16]
   return(result);
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f023 0301 	bic.w	r3, r3, #1
 80042de:	66bb      	str	r3, [r7, #104]	; 0x68
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3308      	adds	r3, #8
 80042e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042e8:	623a      	str	r2, [r7, #32]
 80042ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	69f9      	ldr	r1, [r7, #28]
 80042ee:	6a3a      	ldr	r2, [r7, #32]
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e5      	bne.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2220      	movs	r2, #32
 8004300:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2220      	movs	r2, #32
 8004306:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e010      	b.n	800433e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	69da      	ldr	r2, [r3, #28]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4013      	ands	r3, r2
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	429a      	cmp	r2, r3
 800432a:	bf0c      	ite	eq
 800432c:	2301      	moveq	r3, #1
 800432e:	2300      	movne	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	429a      	cmp	r2, r3
 8004338:	f43f af4a 	beq.w	80041d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3770      	adds	r7, #112	; 0x70
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <__libc_init_array>:
 8004348:	b570      	push	{r4, r5, r6, lr}
 800434a:	4d0d      	ldr	r5, [pc, #52]	; (8004380 <__libc_init_array+0x38>)
 800434c:	4c0d      	ldr	r4, [pc, #52]	; (8004384 <__libc_init_array+0x3c>)
 800434e:	1b64      	subs	r4, r4, r5
 8004350:	10a4      	asrs	r4, r4, #2
 8004352:	2600      	movs	r6, #0
 8004354:	42a6      	cmp	r6, r4
 8004356:	d109      	bne.n	800436c <__libc_init_array+0x24>
 8004358:	4d0b      	ldr	r5, [pc, #44]	; (8004388 <__libc_init_array+0x40>)
 800435a:	4c0c      	ldr	r4, [pc, #48]	; (800438c <__libc_init_array+0x44>)
 800435c:	f000 f820 	bl	80043a0 <_init>
 8004360:	1b64      	subs	r4, r4, r5
 8004362:	10a4      	asrs	r4, r4, #2
 8004364:	2600      	movs	r6, #0
 8004366:	42a6      	cmp	r6, r4
 8004368:	d105      	bne.n	8004376 <__libc_init_array+0x2e>
 800436a:	bd70      	pop	{r4, r5, r6, pc}
 800436c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004370:	4798      	blx	r3
 8004372:	3601      	adds	r6, #1
 8004374:	e7ee      	b.n	8004354 <__libc_init_array+0xc>
 8004376:	f855 3b04 	ldr.w	r3, [r5], #4
 800437a:	4798      	blx	r3
 800437c:	3601      	adds	r6, #1
 800437e:	e7f2      	b.n	8004366 <__libc_init_array+0x1e>
 8004380:	080043f0 	.word	0x080043f0
 8004384:	080043f0 	.word	0x080043f0
 8004388:	080043f0 	.word	0x080043f0
 800438c:	080043f4 	.word	0x080043f4

08004390 <memset>:
 8004390:	4402      	add	r2, r0
 8004392:	4603      	mov	r3, r0
 8004394:	4293      	cmp	r3, r2
 8004396:	d100      	bne.n	800439a <memset+0xa>
 8004398:	4770      	bx	lr
 800439a:	f803 1b01 	strb.w	r1, [r3], #1
 800439e:	e7f9      	b.n	8004394 <memset+0x4>

080043a0 <_init>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	bf00      	nop
 80043a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a6:	bc08      	pop	{r3}
 80043a8:	469e      	mov	lr, r3
 80043aa:	4770      	bx	lr

080043ac <_fini>:
 80043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ae:	bf00      	nop
 80043b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b2:	bc08      	pop	{r3}
 80043b4:	469e      	mov	lr, r3
 80043b6:	4770      	bx	lr
